
==== Current Todo List ====
  these changes should be made before introducing it to the community

See if logging in as an admin can also log the user in as a regular user

try using the parking_lot crate for mutex's instead of standard library ones

try using config_struct crate which can import settings from a toml/json/yaml/ron?

reorganize routes to hopefully optimize the routing

see if loading the fonts can be handled better, maybe cached better, serve from nginx
    make fonts cached (currently when server is shutdown icons disappear when page is loaded again)

Could possibly preload all content pages with an on_launch() Fairing
    this may not work as it is not yet listening for requests...
    may be able to call and load the content manually from the serve() etc functions

make an install guide/tutorial/readme

use ripgrep to ensure no unwanted text document remains in the git history
    search for all .txt files, look for banking/associated files as well as .private and .env files
    also search for current server and database usernames and passwords

make pagination generic, instead of forcing a Page<Pagination> do Page<T: Collate>

document all datastructures/methods/functions/etc
    ONLY CODE IN THE LIBRARY CRATE - binary projcets do not generate documentation

Split blogr into blogr (library) and blogr-server (binary)

Add another div inside the #v-body and around the .v-content
    set the height at 60% or something
    this should allow the content area to be bigger?  but how to make the individual boxes bigger
        without making them huge when using multiple pieces??
    *** This breaks the nav menu *** does not seem to go all the way down ***
Done - create bash shell script to check if the blogr-tls service is active
	systemctl is-active blogr-tls
	should print active if it is running
       ?? benchmark (time() ?) the bash shell script to see how long it takes to run
            this will be used to determine the interval to run the script


===== Future possibilites =====
cache author names and ids
    could use this cache when filtering rss by username
        and also possibly when showing articles by author or other things???
            right now routes::author::cache_author() only looks up authors
            by userid, this cache could allow lookup by username as well
    also add a route to call filter_rss() with both tag and author filters
wherever a collate::Pagination struct is taken as for a parameter, replace with
    a generic T: Collate
maybe rewrite the sanitization functions in the sanitize module
    use the technique and crates used by the rocket-auth-login crate for sanitization

===== Future Additions =====
Design
 **     make a basic javascript file with all the custom required javascript
 *      edit template: experiment with EDIT INPUT BOX making an edit div set to scroll with the page
            set height to 100% if the content is larger than the screen, so the edit box
            will never be larger than the screen so user can use the edit box scrollbar

 ***    add new label (bootstrap label) to posts made within x days (defined in config)
            use Handlebars custom function for this (so it uses the current day)

 ***    Bootstrap thumbnails for images in content and articles

Codebase
 *****  replace error handlers with the newer Catchers introduced in Rocket 0.3.15
            maybe keep old error handlers and add something that uses them for older versions of Rocket
        add an upload feature to upload files, and an admin panel to manage them
        possibly add Handlebars helper functions for menu generation and other templating functions
 ****   create a shutdown route and/or bash script that will save log data immediately
 ****   add option to load content files as articles
 ***    full text searching of content files - https://crates.io/crates/tantivy
 ***    create module to find out client info like whether they are mobile or not, what browser, etc
 **     add tests and benchmarks for all functionality
 ***    create an author page that displays all authors.  Add fields in user table in database
            add a fields in the user database called 'public_listing', 'user_listing'
                public indidates all visitors can see the user in the author index
                user indicates the visitor must be a logged in user to see the user in the author index
            admins can see all users
 *      add option when editing articles to have no image
            also enable header image to be disabled in the single article template
 *      add option for user registrations, and add routes
        add user management (delete/edit/view) in the admin panel
 *      add option for specifying which file extensions should be loaded as content in the content folder
            differentiate between code files, metadata files, and code with metadata
 *      add option to use a different default compression algorithm
            the setting specifies the order using the constants
            like: [BROTLI, GZIP, DEFLATE]
            so the apply_defaults() can use
            if enc & A { ... }
 *      add option to turn compression on/off
            add compression to all applicable routes
            when compression is off disable the compression step
 *      add option to enable/disable statistics
 **     add option to use Json Web Tokens (JWT) to authenticate users
 *      add ability to use SSO (single sigh on) services like google, facebook, etc
 ***    add option to run without a database
 **     add option to use other types of databases
 ****   make a windows version of the database backup script
            make windows/*nix[/apple?] function variants using attributes or cfg macros
        make the RSS feed use Category's instead of separate RSS feeds for each tag/author
 *      add option to not use an internal cache (for low memory machines?)
            also allow option to limit the size of the cache to store only most visited articles
            non-cached articles will have their id cached, and maybe tags and author, but not body
                non-cached articles will be retrieved from database/files
        add an article trash where deleted articles get sent to before permanent deletion
        add ability to make and reply to comments
            add a comment trash
            add option to force clients to be a registed and logged in user before making comments
            add option to allow regular users to edit/delete their own comments
            administrators should always be able to delete all comments (send to trash which can be undeleted)


























NO - make rss-userid and rss-username into a single rss-author route
    but would this work well with numeric usernames??? No not really

add links to display rss feeds for authors and tags

maybe add custom channel/link/category/etc stuff to RSS feeds filtered by authors and tags

replace error handlers with the newer Catchers introduced in Rocket 0.3.15




