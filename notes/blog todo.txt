
Rocket-auth-login
	Update examples to use the new &mut Cookies for .redirect() and .flash_redirect() as well as ::delete_cookie()
		Publish with new version number

	Add repository url link in the Cargo.toml file
	
	Cleanup the administrator.rs module in the tls_example
		Remove the password module
		Cleanup all the commented-out old byte vector password code

	In examples make sure in the process route that the inner form variable is typed:
		let login: AdministratorForm = form.into_inner().form;

	In examples, in the administrator module change the folowing
		cookies.remove_private(Cookie::named(AdministratorCooklie::cookie_id()));
		to
	        Administrator::delete_cookie();
	
	Check the OWASP guide and also check which characters are in the unicode categories
		allowed by the sanitize functions, basically just make sure they're secure


orange:   #de6d11
dark ora: #853c01

Compile for production:
	#!/bin/bash
	 cargo rustc -- --cfg production


Blog Theme
	Verify and maybe change the generation timer to use 9 digits instead of 8

	Add article header images to articles
		add database column in articles table, if null use a default image
		set the image as a background so it fills the width of the container
		could add text?

	Maybe add another bubble inside the article bubble
		separate the title author date etc in one bubble
			and the article contents in another
		make the backgrounds
			rgba(80,80,80,0.1)

SCSS
	Find timestamp of the consumer css file and find the created date
		look in git repo for all changes made after the created date


Blogr
	Add image input field to create and edit forms

	Add image field to javascript preview function(s)


	Reorganize Modules
		Split Blog module into several modules
			ArticleId
			Article
			ArticleDisplay
			ArticleForm
			ArticleWrapper
			GenTimer
			NaiveDateTimeWrapper
			Search
			SearchDisplay
			Sort
			SortDisplay
			Tag
			User
			ViewPage
	Maybe make a dropdown (select) box for choosing an image for each article
		Could also choose randomly and eliminate the choice
		Could also choose based on the tags
		Could also choose based on the first letter of the title

	Make SEO friendly article links replace spaces with hyphens

	Change initial size of title input fields to be much smaller

	change copyright to 2008

	Display generation time in ms instead of seconds

	Add link to go back to manage after saving or even before saving
		if contents have changed ask user if they want to continue

	Add domain name configuration to the vps guide and commands text files

	See if rocket can tell whether its https or http and subdomain stuff?
		Find a way to have a single rust rocket app deliver both https and http content
		https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
		http://nginx.org/en/docs/http/ngx_http_core_module.html

	Figure out how to make a git repo on the server that can have files transfered to it that reflect the repo
		maybe a script that will run


	Find better system for development/production variables
		Maybe serialized file, toml/yaml/haml/json/hjson (just not binary - not msgpack)
		Maybe use conditional compilation to read the appropriate files
			https://doc.rust-lang.org/reference/attributes.html
			#[cfg(any(unix, windows))]
			#[cfg(target_os = "macos")]
			#[cfg(unix)]
		Could also use conditional compilation but instead of testing for unix or windows
			test to see if a variable was passed while building it
				create a shell script that runs the 'cargo build --release'
					but with --cfg PRODUCTION  or  --cfg 'BUILD_TARGET="PRODUCTION"'
			

	Make manage page display each manage item on a new line for mobile devices
		use col-md-#
	
	Should human readable times have a leading zero

	Make Blog title either smaller or overflow over the side
		Make font smaller but for medium or larger displays make it the original size
	
	Setup an ftp server on VPS

	Add more address bar color changes for other browsers like apple and ms

	Add a noscript note on addd and edit pages saying that different markup parser will be used if
		javascript is disabled and the rendered output may differ from the javascript version

	Make an admin route that will download a backup of the sql database
	Make an admin route that will download a copy of the rust web app (everything but the /target folder)

	Viewing the layout on a mobile device is BROKEN

	Remove pagination test, hit counter tests, and other page tests
	
	In the /admin and /users routes add db column to retrieve the number of login attempts before calling flash_redirect()
		then display the attempts in the flash message if the attempts is more than just a few or under MAX_ATTEMPTS
	Somehow keep track of previous login attempts after logging in
	or Add a message to the flash message upon successful login telling the user how many login attempts have been made
		the purpose is to alert the user to any attempts to brute force or guess the user's password

	Add <meta> metadata keywords and descriptions

	Do RSS feeds have to show all the items?
		Can it show the 50 most recent and any old items will persist in the RSS reader?
			Or will rss reader remove them once no longer in the feed?

	Publish the xpress module 


	Make a database cache that is updated every 4 hours or on demand by a special route that caches:
		all normal unfiltered select queries
			also query sort by title as well as date, both asc and desc
		queries for each tag in the tag cloud, or the top 200 tags
		tag cloud
		queries for each author
		do not query authorization queries
		
	

	Copy edit page into create page but remove default value attributes

	Cleanup source code and remove old comments

	For pages that display flash messages, use different alert_* functions for different flash msg names
		for error flash messages use alert_danger()
		for warning flash messages use alert_warning()
		for success flash messages use alert_success()
		for all others use alert_info()
			see the /manage route for an example
	
	Add content to the about me page.
	
	Figure out how to add version badge to github readme.md file
	
	Convert blogr to ssl

	Get VPS

	Force SSL unless in Dev mode

	Eventually change the hbs_templates to have the flash message in the general parameters/info not in the TemplateBody

	When creating a blog post fails for reasons other than unauthorized
		(or maybe even if its unauthorized)
		redirect back to create page with all of the form data filled in
		change the insert form template to include if statements to show msg
			{{#if info.msg}}{{{info.msg}}}{{/if}}



	sanitize:
		login rety (admin and user): username and failmsg
		tag?<tag>: sanitize split_tags

	Create a signup page
		ensure the user enters a password with a min length etc

	Create a page to edit the signed in user's data.

	Make a page that lists articles by date, group by month maybe




Design:
	Figure out a way to make the middle box backgrounds transparent and the outside black still
		This allows a static background to be placed that will move with the page, 
			staying in the same position on the screen at all times
			only the content boxes moves, allowing their inside to display the image


Future Todo:

	Convert structs containing strings to &str
		See below for example
		https://api.rocket.rs/rocket/request/trait.FromParam.html
	
	Add unique visitors
		Maybe create a file or in-memory list of ip addresses
			every once and a while write them to database
		IP Address Fairing Example:
			https://github.com/lukaspustina/ifconfig-rs/blob/master/src/fairings.rs
		Rocket Request.remote() method
			https://api.rocket.rs/rocket/struct.Request.html#method.remote

	Track page views and unique visitors

	
	Maybe add last_build_date as last modified date for the channel
		https://docs.rs/rss/1.1.0/rss/struct.ChannelBuilder.html#method.last_build_date
		Builder:
		https://docs.rs/rss/1.1.0/rss/struct.ItemBuilder.html#method.pub_date

	Add etags to articles
		set ttl to enable the caching thens
		The hash should be: hash(title + current datetime)
		Do not need to hash body contents, will just be slower, datetime will make it unique
		Could retrieve hash from database in a query or by hashing in Rust, either way
	
	Add last modified (and created, if exists?) http headers to individual article pages
		Maybe add a last modified header to articles page where the last modified
		date value is the newest date of all the article dates
	

	Allow modifications to user info
		GET /users
		GET /user?<userid> - userid: UserId
		POST /user	// saves changes to display email and any other properties
		Create a Users page that shows all users with public profiles
			add a is_public bool to the user table in the database
		Create a show user page that displays user information
			create a UserId struct with a single username attribute
			if the user has is_public set to false only admins can see it
			Show Username link, and emai
			if the viewer is an admin show a checkbox to change the is_admin field
			if the logged in user/admin is viewing their own page
				allow them to edit their information
				allow password to be changed
					add a hidden username form field
	
	
	Test the current method of finding the generation time (Instant::now() and start.elapsed())
		Chrono's Duration.span() runs a closure and returns the time it took to run the closure
		
		
		
		NOT the Time crate, it is deprecated.
		against the Time crate's SteadyTime and PreciseTime
			Benchmark how fast each is, and how accurate each is
			Run Benchmark Tests with thread::sleep
				use std::thread::sleep;
				sleep(Duration::new(secs, nano_secs))


	Write article about better way to organize template stuff
	Possibly rewrite the template system interface to expose something like
		hbs::info(title, page, hbs::general_page(contents) )
			.add_user(user)
			.add_admin(admin)
			.add_timer(start)
			.add_javascript(js)
			.change_something()
			.add_something_else()
			.finalize()
		only rewrite if really really need extras


	Look into Handlebar Helper functions using Rocket_Contrib's Templates
	IMPORTANT
	Research NoSQL databases which could be faster
		Maybe even redis

	Cache all HTML output from pages using database queries
		Allow different versions of the page to be cached
			Cache brotli, gzip, deflate, and uncompressed versions of the page
			Only cache the page with a given compressino method when page is requested
				with a given compression method
		Add an option in the hbs_template() that indicates whether it should
			look for and store cached results
			Maybe the option should be an Option<u32> indicating how many 
				minutes to store the cached contents
		Use Redis
		Or other caching tools

	Add search functionality
	
	Add a signup page

	Add pagination

	Build a search form with search term, min and max date(time), and tags

	Add editing and deletion capabilities for admins

	Add comments
	Add ability to reply to a specific comment
	Maybe add ability for admins to reply to a comment with a special styling, 
		like on newegg when companies reply to a comment about a problem
	Display a form allowing users to make new comments and edit and maybe delete their own
                                                                                                              
	Maybe when validating forms, set focus to first invalid form field
		set a var called something like is_focused = true after first field
		to prevent others from being focused


Research Futures
	try to implement caching by calling a function that returns a string and schedules an async function
	to write the string to a cache afzter the string is returned to allow the webpage to load while the 
	string is being written to the cache


Rocket-auth-login:
	BEFORE PUBLISH:
		change font demonized to another freeware font as demonized is personal-use
		the quicksand font is freeware and prolly doesnt have to change
	Add description and other settings to Cargo.toml file
	
	NOT DONE - Decided not to do this as the example are excluded from the actual published crate
	Add [[bin]] sections to the root crate's Cargo.toml



DONE
	For user account lockout due to repeated unsuccessful attempts make levels or tiers of locking
		after 6 attempts lock for 3 minutes
		after 12 attempts lock for 6 minutes (total not 12 more attempts [that would be 6 more attempts after the first tier)
		      
		maybe make a lockout(minutes) function to help with this

	maybe just remove the /search route as the search form already works
		and the complex search featuers don't really work yet anyways
	
	remove the test routes - compression and hit counters

	Add pagination to author page too
		And view tag
		NOT - And search?

	Add a 'Read More' or 'See Full Article' link when listing multiple articles

	Does blogr search page show a form with the date range?
		I can't even remember, prolly not.

	Allow admin to delete posts and edit them

	Throttle brute force login attempts

	No - Maybe add a preview as a popup modal [for creating posts?]
		display single article template in the modal template? (just the <article> and <script> tags)

	Search pagination - not sure how to proceed
	    -Need to be able to pass the search query to link
	    -Reverting back for now

		Create a new template for paginated search
			Create a new Pagination type named SearchPages
			override the link method to 
			Do not take Page<Pagination> but instead take Page<SearchPages>
			
			NOT - For the paginated search page add the search query to the search button using javascript

	 Add a database function that will take an article's description and body
		if the description exists return that otherwise return a truncated body
			if pg doesn't support nullable params then lookup the row by aid ( description(aid) )

	Test collate module's sql

	Either change the create template to take an optional Page parameter
	or make a new template for Editing an article
		need to make sure form url points to edit route with the specified aid
		prolly just create new template
	
	Items Per Page Selector Errors:
		page 2 @ 6ipp	=> 8ipp 	page=2&ipp=8

	Add edit to article template

	Add a Items Per Page dropdown menu next to pagination links

	Make a delete route that will do a confirm before deleting
		or use javascript to confirm the action before continuing
	
	Article Template: Add edit link below the title and below the tags to the article template
		
	Maybe hardcode the tag and search links/form to go to the non querystring pages
		instead of relying on redirection, although should leave redirections there in case	
	
	NO - not needed. Add javascript to sort the tables

	Research how to use pieces of other templates in handlebars templates
		so that each template only needs the minimum amount of code
		-Will need to make separate partials for article vs articles due to the {{../}} part

	Add a route that looks up an article by the date [and category] and name
		convert spaces to - and remove non-word characters
		route: /post/2017/12/02/

	
	No - preview has a link.  Maybe add link on the edit page to view the original post (in new tab/window)

	Only allow delete from the manage page

	Add manage page
	
	Add pagination to search page
		Redirect from the route /search?q=... to /search/q
			which will fix all problems with routes and querystrings

		
	Add a noscript message by the preview button

	On manage page make dimmed description icons dark red for articles with no description


	NO - using button - For the edit/create page use the pagination html/css to switch between html/md/raw views
		just use the active page css class with the current view

	
	Add hidden input that tells the rust app whether javascript processed the body contents as
	markdown already or if the js failed or was disabled and the contents need to be converted yet
		If markdown box is checked and the processed hidden input is false
			 then have rust convert it from markdown to html

	Do no need a markdown editor - just use a converter to go from markdown to html
	OR use a markdown parser to convert from

	Make a data type that will track hits and unique visitors
		the data type will implement FromRequest which will give it access to the Request
		The Request will allow access to the global rocket state


	
	Need to allow markdown column in the data structure and template

	In the FromRequest guard, make the hit counter counter hits for individual articles
		and maybe even tags
			/author/<id>
			/search/<searchstr>
			/article/<aid>
			/tag/<tag>

	If body is empty but markdown is not then generate the html using rust
		use a CommonMark crate to process the html
	JS will generate different (maybe better?) results so rely on that first

	Does saving work correctly?  - is the html filtered/sanitized out?


	Edit and Create pages
	When editing:
	check markdown box if the markdown column is not empty
	Check to see if the frist non-whitespace characters are ** or __ or other markdown characters
		if so then check the markdown box
	when saving if the markdown box is NOT checked then delete the contents of the markdown column
		
	When creating:
	check markdown box by default

	Add a checkbox to indicate whether the contents should be parsed as markdown or not
		Display a warning box when going from markdown to html saying that once going to html
			you cannot go back to markdown easily 
				not until the html to markdown parser is done
	
	Implement a js and rust markdown parser
		Could make a custom html <-> markdown parser which could add custom markdown for 
		custom html code in the blog

	Make a simple html to markdown converter
		when saving a page that has a null markdown column and the markdown box is checked
		convert from html to markdown to store the converted contents in the markdown column
		
		https://github.com/domchristie/to-markdown/tree/turndown
		https://github.com/domchristie/turndown-plugin-gfm

		or maybe
		https://github.com/netgusto/upndown
	

	Set the password field to have focus when login attempt fails
	Set username field to have focus when logging in without retry
	
	
	Add a attempts and lockout fields in the user database, which can be null and would be set to a datetime
		if it is not null do not allow successful login until the time has passed
			set a flash message explaining the timeout
		attempts counts the number of continuous attempts to login without success
			every x attempts lock it, do not clear the attempts until successful login
	
	Use the rocket-file-cache crate to cache static files
		https://crates.io/crates/rocket-file-cache

	If a user is signing in as an admin or regular user and has already signed in as another user type
		check if the usernames/userid match, otherwise remove the old cookie
		This prevents a user from being logged in as two separate users with different user types
		Maybe set a flash message saying that the other user was logged out or something
	
	Change search, article, and articles templates to show an author.
		Update the database to link each article to an author
		Update the RSS page to reflect the author for each article, use a join query to get the author
	


	Add pagination and limit number of articles shown in the following pages:
		front page
		search
		individual tag page (lists just one tag)
	Pagination will work by creating a type that stores:
		current page (offset = rpp*page)
		results per page  (limit = rpp)
			could set a limit in the type name
				could do something like Pagination50 for a pagination type that 
				maxes out at 50 results per page
		
		must retrieve num of rows in the route
		then call a method to generate the links
			Pagination.nav_links(route="/route", num_results=213, relative_pages=3)
			relative_pages is how many pages before and after the current page to show
		
		First page:
		SELECT * FROM articles ORDER BY posted DESC LIMIT 10 OFFSET 0
		Any other page:
		SELECT * FROM articles ORDER BY posted DESC LIMIT 10 OFFSET rpp*page
		
		make a new method for the Pagination type so routes that have no query string
			and are the first page can generate links with the new instance of Pagination

	Nah - Add a TL;DR: section of articles
		Should be optional (nullable in the database)
		Should also be included in the full-text column
	
	Add article "types"
		The Markdown type will interpret the article contents as markdown and format it into HTML
			Maybe index all h1 (# or Text\n====) and h2 (## or Text\n-----)
				For each header add a <a name="lowercase_underscored_header">Header</a>
				Maybe add a vertical menu using the scrollspy bootstrap plugin thingy
		The HTML type will leave it as is, unprocessed
	
	Not Needed [Pagination] - Limit tags to only show top 50 tags, or maybe make a separate page that shows all of them

	Add a email/contact links at the bottom of the page in the footer
		Maybe change add an email link in the name of the copyright
		(c) 2017 <a href="">Andrew Prindle</a>
	
	Maybe: Add author to the homepage (multiple articles) instead of just on the single article?

	Add a 404 page, maybe other error pages as well
		#[error(404)] I believe it is
	
	Update RSS, add the author field
	
	Add an author page which shows all articles by that user
		Do not need a page to show author info, there is not enough info in the db about each user to display a full page
		
	Add author when submitting a new article, read the AdministratorCookie's user id
		
	Maybe add email addresses?  The RSS author field is supposed to be an email. 
		Probably not as it would increase spam

	Add author link in article/articles
		show author in articles
		in the templates show a link to a page that will list all articles by that user
	
	Make the templates display the user's display name if it is not None (it is an option field) otherwise the username

	Fix the templates, new rocket-auth-login code needs to have admin/user data sent to it 
		to render the template with the correct permissions
	
	Change menu items to reflect new login pages

	Add compression?
		Could use the zopfli crate for the gzip/deflate algorithm?
		https://github.com/SergioBenitez/Rocket/issues/195
		Make sure the AcceptEncoding allows compression, use the following as a reference:
			https://mmstick.tk/post/jmP

	Add content expiration headers?

	Convert from the simple-auth to my rocket-auth-login crate for authentication and login processing

	Change the blogr database password to a text column called pass
	Add a text column called salt to the database
	Add a trigger and function to hash the password with the salt on insert or update
	Change sql for authentication to check for the salted password hash

	Convert sanitize functions to using the unicode_segments crate

	Fix the admin menu logout to direct the user to admin_logout instead of logout

	Rename/remove the pages_administrator module

	Make a Request Guard (from_request) that creates a start (Instance) variable
		This has the added benefit of being able to start a timer then call
			another route's function using the same timer, this allows
			the timer to be started in a different function than the template
		so the route does not have to declare the start variable itself for timing
		it just needs to declare the timer type in the funciton signature

	Login is broke, ran sql statement generated by login authentication but no resulst in pgadmin.	
			Not sure why but the password isn't getting hashed correctly or something

	Express
		Express::compress() only works on strings not templates!
			At least that what it seems is the reason compression is not working
				Yes that is the problem.  It works fine with strings.  Rewrite!!!
			Make the new responder compress static files/strings with the data
			Make the templates compress the response body data
			
			
			
		Move actual compression into the responder, set compression with the compression() method of Express
		Maybe check if pages load faster if compression is handled inside the Responder (respond_to() method)
			Instead of during the route
		
		Check for other ways to convert from Template to String other than template.show()
			Note: Docs say its slow and even without compression its slow (1.2 seconds to load mainly just the layout)
			Wrap the template responder inside the Express responder, use express.join(template.respond_to(req))
			
		Maybe add a way to change compression method priorities as long as they are supported
		DO NOT combine AcceptEncoding and Responder (keep purity of responder)
			Combine the AcceptEncoding and Responder (both use the request parameter)
		Compile as release
		Maybe stream the results of the responder in large files
			https://api.rocket.rs/rocket/response/trait.Responder.html
			Stream::from(Cursor::new(string))
		Maybe use streamed_body
			https://api.rocket.rs/rocket/response/struct.ResponseBuilder.html#method.streamed_body
		Wrap the template responder inside the Express responder
		Timings:
			Gzip: ~200-300ms for compress

	Fix viewing of single articles - broke when users table changed

	DO NOT  make password a byte vector, Vector<u8> instead of String
		the password comes in as a plaintext string, the only place it is
		not a string is in the database, and the database takes care of all
		of the hasing and salting stuff so keep the password a string!!!!!!

	Change passwords from using a simple hash to a hash(salt + password)
		make a database column called salt
		the salt is randomly generated and concatenated to the plaintext password before hashing
		the hash of the password+salt is what is stored in the database

	Add a method/helper function to retrieve an article and user from a qry
		retrieve the data from the raw qry
		returns a result <Article/User, String>
		maybe make a trait that defines methods on Strings?? for retrieving stuff like
			.retrieve_article()
	
	Add RSS feed (add link in footer)
		Maybe add clipboard.js to copy the link when clicked
	
	Add the article title in the url when possible
		change the links to the articles to include a substring of the title
		change the article page route to have a segment that ignores the title?

	
	Display a page that lists the tags, maybe even sort by number of posts each has
	
	DOES NOT WORK: localhost:8000/tag?tag=
		But should it??? Not really...

	Maybe add a page option in the hbs_template() function
		indicates which page should be highlighted in the nav bar

	Change description in insert form to text input box with maxlength=250
		Change maxlength in database as well
	
	Posting articles: maybe add a javascript function to alert the user when spaces are detected in the tag field but no commas are found
		Display: Did you mean to use commas instead of spaces?

	CONVERT TO HANDLEBARS OR MUSTACHE TEMPLATES
	Customize the navigation link
	Make the menu link to:
	view
	tags - create new page that list the unique tags, maybe even sort by number of posts each has
	insert - for admins
	login - for users who are not logged in
		if user either admin or regular user do not display login, whichever cookie is set determines the userlevel
	signup - create signup page

		Add dropdown menu for admin
			New Article
			Logout
		Add dropdown menu for user
			My Info
			My Comments
				for each artile the user has commented on:
					shows article title (that links to the article)
					a list of comments made by the user
					an edit/delete button for that comment

			Logout

		Add custom <title> tag text for each page??
			Replace the title with a page specific one
			For /article?<aid> make the title equal to VishusBlog: <article title>

	Add messages (msg) to general-template, article-template
	
	Eventually change the index page to list blog articles and show a login link elsewhere like in the nav

	Reduce margins for mobiles
	if landscape reduce nav brand font size

	Change validation to use jQuery and Bootstrap - looks sooo pretty

	Change tags from text to character varying[] (array of varchars)
		Make a tag column that will be the new tags

	Maybe add a number of tabs at the beginning of each line of body text in the template() function
		The number of tabs to be determined by the layout
	
	IMPORTANT
	url_decode() the strings FromForm implementation for ArticleForm
		They are being saved as url_encoded() strings in the database

	JAVASCRIPT
	Add a second password box that has no placeholder text and has display: none
		when form is submitted set display: none to current password box and enable the hdiden one
	Also set submit button to disablabled after validating

	Style the insert form with bootstrap forms
	
	Auto resize the article body text box height when text height is larger than the box's

	Called init_pg_pool in main on program startup to avoid the extra 80ms delay it takes
	Changed user parameter from Option<UserCookie> to AdminCookie
	Added unauthorized_post()

	Add Description field
	
	Only show a shortened body or description for tag and view pages

	Make the template() function take a String instead of a &str
		The String will not be used anymore so its ok to move its ownership
		The &str needed to be converted to a String anyways
		NEVERMIND - passing in a &str is better
			Passing as a string needs to pass it as a reference anyways
			Only thing it does it erase the passed in variable when it doesnt need to
	




	Maybe remove all the is_admin is_user username fields for the article templates
		Use javascript to add the edit/delete options
		But in the route check the correct cookie is set for that action


	Add Tls/Ssl using Let's Encrypt
		https://mmstick.tk/post/q42
		https://rocket.rs/guide/configuration/#configuring-tls
		https://api.rocket.rs/rocket/config/struct.Config.html#method.set_tls
	Sanitizing strings
	Make an actual layout
	Maybe implement a cache
	maybe implement a file cache
		This would allow files to be served even when the url
		is a folder in root.  CSS & JS files for example will
		not work correctly if the url is: 
		localhost/view/category/blah
	Finish implementing the Usertype module, make it an enum that holds whatever?



Blogr Theme
	NO - Maybe add like triangle to the corner or something like: (use trans parent bgs ?)
		____________________
		|Blog__________    |
                |___/          \___|
		|   |          |   |
		|   | content  |   |
		|   |          |   |
		|   |          |   |

	Maybe for multiple article pages show a scrollbar (overflow: scroll) and customize the scrollbars 
		only for chrome, do not add scrollbars for other browsers
	Maybe add height: 100% to html, body 
		then add height: 60% to mainWrapper 
		then height: 100% to v-body and v-content



TESTS
	Test if two datastructures that are defined the exact same but defined
		in different modules are compatible
	
	
	
	

