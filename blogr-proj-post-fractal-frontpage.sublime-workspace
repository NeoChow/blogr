{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Uniq",
				"UniqueHits"
			],
			[
				"HIT",
				"HITS_SAVE_INTERVAL"
			],
			[
				"CacheLock",
				"ContentCacheLock"
			],
			[
				"In",
				"InternalServerError"
			],
			[
				"IA",
				"ImATeapot"
			],
			[
				"S",
				"STATIC_PAGES_DIR"
			],
			[
				"DEFAULT",
				"DEFAULT_PAGE_TEMPLATE"
			],
			[
				"cach",
				"cache_uri"
			],
			[
				"content_conte",
				"content_context_opt"
			],
			[
				"Cach",
				"ContentCached"
			],
			[
				"User",
				"UserCookie"
			],
			[
				"from_",
				"from_utf8_lossy"
			],
			[
				"from",
				"from_utf8_lossy"
			],
			[
				"A",
				"AcceptCompression"
			],
			[
				"docum",
				"document.getElementById"
			],
			[
				"docu",
				"document.getElementById"
			],
			[
				"prev-",
				"prev-insert-tags"
			],
			[
				"NaiveDate",
				"NaiveDateTimeWrapper"
			],
			[
				"Naive",
				"NaiveDateTimeWrapper"
			],
			[
				"get",
				"getElementById„Äîfunction„Äï"
			],
			[
				"with",
				"with_capacity"
			],
			[
				"text-de",
				"text-decoration-color"
			],
			[
				"inl",
				"inline-block"
			],
			[
				"in",
				"inline-block"
			],
			[
				"getEl",
				"getElementsByTagName„Äîfunction„Äï"
			],
			[
				"LOC",
				"LOCKOUT_DURATION"
			],
			[
				"Naiv",
				"NaiveDateTime"
			],
			[
				"Admin",
				"AdministratorCookie"
			],
			[
				"Administra",
				"AdministratorForm"
			],
			[
				"Guid",
				"GuidBuilder"
			],
			[
				"MAX",
				"MAX_CREATE_DESCRIPTION"
			],
			[
				"MAX_CREATE_",
				"MAX_CREATE_TITLE"
			],
			[
				"GENERIC_PAGE",
				"GENERIC_PAGE_START"
			],
			[
				"Postgres",
				"PostgresConnectionManager"
			],
			[
				"sani",
				"sanitize_tags"
			],
			[
				"sanitize",
				"sanitize_tags"
			],
			[
				"SAN",
				"SANITIZE_PASSWORD"
			],
			[
				"list",
				"listcmds"
			],
			[
				"cm",
				"partial_cmp"
			],
			[
				"str",
				"str"
			],
			[
				"Des",
				"Deserialize"
			],
			[
				"Recipe",
				"Recipe"
			],
			[
				"cou",
				"count_lines"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/main.rs",
			"settings":
			{
				"buffer_size": 8056,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/settings.rs",
			"settings":
			{
				"buffer_size": 12097,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "pages/setup-vps.md",
			"settings":
			{
				"buffer_size": 11801,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/counter.rs",
			"settings":
			{
				"buffer_size": 14203,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/content.rs",
			"settings":
			{
				"buffer_size": 43952,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Andrew/.vscode/extensions/vishuscode/themes/vishuscode.json",
			"settings":
			{
				"buffer_size": 5970,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/templates.rs",
			"settings":
			{
				"buffer_size": 18365,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nGitGutter\n---------\n\n  1.7.15:\n  -------\n  \n    Fix:\n     - Compatibility issue of GitGutter with Snap on Ubuntu (#495)\n     - Write access regression when creating temp dir (#498)\n  \n    Enhancement:\n     - Reduce number of git --version calls (#493)\n  \n  \n  üíõ Git Gutter? Want to support development?\n  \n  I've teamed up with Wes Bos to offer the following discounts:\n  \n  +------------------------------------------------+\n  |                                                |\n  |   Use the coupon code GITGUTTER for $10 off    |\n  |                                                |\n  +------------------------------------------------+\n  \n  üèÖ ‚≠ê ES6 ‚≠ê\n  \n  üëâ ES6.io/friend/GITGUTTER\n  \n  üèÖ ‚≠ê Sublime Text Book ‚≠ê\n  \n  üëâ SublimeTextBook.com/friend/GITGUTTER\n  \n  üèÖ ‚≠ê React For Beginners ‚≠ê\n  \n  üëâ ReactForBeginners.com/friend/GITGUTTER\n  \n  \n  Join 15,000 other developers already learning with Wes Bos.\n  \n  These are fantastic resources - 100% money back guarantee! üåü\n\n  1.7.14:\n  -------\n  \n    Fix:\n     - Diff Popup's content looks ugly due to Courier font\n     - Use Segoe UI Symbol for popup toolbars\n     - ST2 compatibility issue in TempFile class\n\n  1.7.13:\n  -------\n  \n    Fix:\n     - New `tempfile` module conflicts with stdlib in ST2\n     - A typo in the recent release message of 1.7.12\n\n  1.7.12:\n  -------\n  \n    README:\n     - Add a reason for GitGutter to keep quiet\n     - Fix documentation for `diff_algorithm`\n  \n    Enhancement:\n     - Place all temporary files into a dedicated sub directory\n     - Use XDG_RUNTIME_DIR for temporary files if available\n     - Delete old temporary files upon startup\n\n\nGitSavvy\n--------\n\n  Changes since 2.17.2:\n  \n    Enhancement:\n     - support prefix in prerelease when using smart tag\n     - support project-wise settings\n     - make `rebase_default_base_ref` more consistant with project-wise settings\n     - allow to use \"git: blame current file\" at blame view\n     - Opening commit from commadline respect setting\n  \n    Feature:\n     - git: checkout current file at commit\n  \n    Fix:\n     - Pedantic commit checks allows comment on 2. line\n     - On startup in-memory `instances` cache can be empty\n     - fix set status on cherry-pick done\n  \n    Other:\n     - Emphasize in docs when to use run_in_thread\n     - Fix subprocess command crashing with OSError\n     - Include A traceback when an exception happens and we don't handle it\n  \n  \n    Contributors:\n     - herr kaste\n     - Simon\n     - Randy Lai\n     - Pavel Savchenko\n     - joan\n     - Maarten Nieber\n\n  Changes since 2.17.0:\n  \n    Enhancement:\n     - use a more meanful branch name when reviewing PRs\n  \n    Fix:\n     - fix show file bug on Windows\n     - fix tag dashboard bug if hash length != 8\n     - Pass startupinfo to `subprocess.check_output` on Windows\n  \n    Contributors:\n     - herr kaste\n     - Randy Lai\n\n  Changes since 2.16.6:\n  \n    Requirement:\n     - bump git requirement, git v1.19.0 or above is required\n  \n    Feature:\n     - quick stage and amend\n     - git remote rename\n     - implement GitLab merge request review\n     - Pedantic commit messages\n     - add helpers to handle merge conflicts in status dashboard\n     - Live output: Show STDIN when present in live log\n  \n    Enhancement:\n    -  refreash UI when merge failed\n    -  add `abort rebase` command\n     - Add a refresh_gitsavvy_interfaces PoC for bug #835\n     - show diff stat when `show_commit_diff` is \"full\".\n     - manipulate commits with untracked files\n     - reset to original commit after failure\n     - use ssh url instead of url when adding fork\n     - support .sublime-color-scheme in inline diff view\n     - git pull from remote tracking branch directly\n     - use GsPullBase mixin\n     - add pull with rebase\n     - do commit synchronously when commit_on_close is true\n     - make following file renames optional\n     - rename `git: add (edit)` command\n  \n    Fix:\n     - only show diff patch when `show_commit_diff` is \"full\"\n     - use unicode to write .gitignore\n     - hash tag sign is a valid char for branch name\n     - load user specfic theme first\n  \n    Internal:\n     - Use window.status_message instead of sublime.status_message\n  \n    Docs:\n     - Add doc for setting PATH environment\n  \n    Contributors:\n     - Guillaume Wenzek\n     - Simon\n     - Pavel Savchenko\n     - Tom van Ommeren\n     - Randy Lai\n\n\nRust Enhanced\n-------------\n\n  # Rust Enhanced 2.11.0\n  \n  You must restart Sublime after installing this update.\n  \n  ## New Features\n  - Added `\"rust_message_theme\"` configuration setting for choosing different\n    styles of inline messages.  Currently two options are available: \"clear\" and\n    \"solid\".  See\n    https://github.com/rust-lang/rust-enhanced/blob/master/docs/build.md#general-settings\n    for examples.\n  \n  - If the Rust compiler provides a suggestion on how to fix an error, the\n    inline messages now include a link that you can click to automatically apply\n    the suggestion.\n  \n  ## Syntax Updates\n  - Support u128/i128 integer suffix.\n\n\nRustFmt\n-------\n\n  Changes:\n  \n    * support for newer `rustfmt`\n    * simpler and faster update of the view buffer\n  \n  1.\n  \n  Newer `rustfmt` requires `--emit=stdout` instead of `--write-mode=display`. The plugin uses the new arguments by default. If you have an older version and don't want to update, add this to the plugin settings:\n  \n  ```sublime-settings\n    \"legacy_write_mode_option\": true,\n  ```\n  \n  2.\n  \n  Finally found a working way to save/restore scroll position in Sublime. Now, the plugin simply replaces the entire view buffer with the output of `rustfmt`, preserving the scroll position, instead of the ridiculously convoluted diffing algorithm used before. Should be more reliable and faster. If there are any regressions, let me know.\n\n\nSublimeLinter-php\n-----------------\n\n  SublimeLinter-php 1.2.1\n  ---------------------------\n  \n  The 'cmd' setting has been deprecated. The new name for the same thing is 'executable' which is the common name for all linters in SublimeLinter land.\n  \n  {\n      \"SublimeLinter\": {\n          \"linters\": {\n              \"php\": {\n                  \"executable\": \"/path/to/php\"\n              }\n          }\n      }\n  }\n",
			"settings":
			{
				"buffer_size": 6235,
				"line_ending": "Windows",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"contents": "#26292C\n#F8F8F0\n#F8F8F2\n#3B3A32\n#202325\n#49483E\n#FFE792\n#000000\n#222218\n#9D550F\n#F8F8F2\n#F8F8F2\n#ccc\n#ffffff\n#ffffff\n#FFDB00\n#ffffff\n#E900CC\n#FF3C37\n#FF0095\n#FF0095\n#ffffff\n#FFA100\n#FA6CFF\n#fd6783\n#fd6783\n#777777\n#666\n#FF8500\n#800\n#FF8500\n#fd6783\n#FF0700\n#FFA100\n#000000\n#ffffff\n#FF0095\n#fd65c6\n#a7f848\n#FF3C37\n#FFEA6B\n#FFA100\n#e50055\n#19f1c4\n#01F4FF\n#FF6F6B\n#FFF700\n#ffffff\n#FFA937\n#FF5300\n#000\n#FFA937\n#FF5300\n#000\n#FF8500\n#ffffff\n#000\n#FF8500\n#ffffff\n#FF3C37\n#FF3C37\n#FF8500\n#9b9b9b\n#D4B06A\n#FFCF38\n#D4B06A\n#3fd6ff\n#FFCF38\n#D4B06A\n#D4B06A\n#000\n#320004\n#FF0700\n#be0036\n#35FF00\n#35FF00\n#FF0095\n#000\n#FF8500\n#35FF00\n#35FF00\n#FFDB00\n#dafefd\n#6CF8FF\n#DDFF37\n#00354a\n#dafefd\n#6CF8FF\n#DDFF37\n#00354a\n#EEE\n#FF0000\n#00E6AC\n#3FCAFF\n#3FCAFF\n#660000\n#FF0700\n#ccc\n#000\n#3FCAFF\n#99F200\n#35FF00\n#BFFF37\n#CFFF6B\n#FF3C37\n#FF0095\n#F165FA\n#FF0095\n#18FF00\n#38F6FF\n#B7F200\n#18FF00\n#B7F200\n#38F6FF\n#FFDB00\n#FFDB00\n#fd6783\n#000\n#320004\n#FF0700\n#14b9dc\n#320004\n#c38913\n#320004\n#444\n#be0036\n#666\n#be0036\n#fff\n#be0036\n#320004\n#be0036\n#FF0700\n#78f2fe\n#666\n#FF0700\n#320004\n#be0036\n#FF0700\n#78f2fe\n#000\n#320004\n#be0036\n#FF0700\n#78f2fe\n#FF0095\n#FFB700\n#fd9daf\n#ffffff\n#fd9daf\n#ffffff\n#65C3FA\n#ffffff\n#FF3C37\n#ffffff\n#00E5B8\n#18FF00\n#38F6FF\n#BE8CFE\n#38F6FF\n#000\n#FF8500\n#3b3b90\n#FF8500\n#3b3b90\n#FF8500\n#FF9200\n#CD73FF\n#99F200\n#FF3C37\n#BE8CFE\n#000\n#14D100",
			"settings":
			{
				"buffer_size": 1326,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#000000\n#000000\n#000000\n#00354a\n#00354a\n#00E5B8\n#00E6AC\n#01F4FF\n#14b9dc\n#14D100\n#18FF00\n#18FF00\n#18FF00\n#19f1c4\n#202325\n#222218\n#26292C\n#320004\n#320004\n#320004\n#320004\n#320004\n#320004\n#320004\n#35FF00\n#35FF00\n#35FF00\n#35FF00\n#35FF00\n#38F6FF\n#38F6FF\n#38F6FF\n#38F6FF\n#3B3A32\n#3b3b90\n#3b3b90\n#3FCAFF\n#3FCAFF\n#3FCAFF\n#3fd6ff\n#444444\n#49483E\n#65C3FA\n#660000\n#666666\n#666666\n#666666\n#6CF8FF\n#6CF8FF\n#777777\n#78f2fe\n#78f2fe\n#78f2fe\n#880000\n#99F200\n#99F200\n#9b9b9b\n#9D550F\n#a7f848\n#B7F200\n#B7F200\n#be0036\n#be0036\n#be0036\n#be0036\n#be0036\n#be0036\n#be0036\n#BE8CFE\n#BE8CFE\n#BFFF37\n#c38913\n#cccccc\n#CD73FF\n#CFFF6B\n#D4B06A\n#D4B06A\n#D4B06A\n#D4B06A\n#dafefd\n#dafefd\n#DDFF37\n#DDFF37\n#e50055\n#E900CC\n#EEEEEE\n#F165FA\n#F8F8F0\n#F8F8F2\n#F8F8F2\n#F8F8F2\n#FA6CFF\n#fd65c6\n#fd6783\n#fd6783\n#fd6783\n#fd6783\n#fd9daf\n#fd9daf\n#FF0000\n#FF0095\n#FF0095\n#FF0095\n#FF0095\n#FF0095\n#FF0095\n#FF0095\n#FF0700\n#FF0700\n#FF0700\n#FF0700\n#FF0700\n#FF0700\n#FF0700\n#FF0700\n#FF3C37\n#FF3C37\n#FF3C37\n#FF3C37\n#FF3C37\n#FF3C37\n#FF3C37\n#FF5300\n#FF5300\n#FF6F6B\n#FF8500\n#FF8500\n#FF8500\n#FF8500\n#FF8500\n#FF8500\n#FF8500\n#FF8500\n#FF8500\n#FF9200\n#FFA100\n#FFA100\n#FFA100\n#FFA937\n#FFA937\n#FFB700\n#FFCF38\n#FFCF38\n#FFDB00\n#FFDB00\n#FFDB00\n#FFDB00\n#FFE792\n#FFEA6B\n#FFF700\n#ffffff\n#ffffff\n#ffffff\n#ffffff\n#ffffff\n#ffffff\n#ffffff\n#ffffff\n#ffffff\n#ffffff\n#ffffff\n#ffffff\n#ffffff",
			"settings":
			{
				"buffer_size": 1303,
				"line_ending": "Windows",
				"name": "#000000"
			}
		},
		{
			"contents": "\n{\n    \"name\": \"Vishus Code\",\n    \"type\": \"dark\",\n    \"colors\": {\n        \"editor.background\": \"#26292C\",\n        \"editor.foreground\": \"#F8F8F2\",\n        \"editor.lineHighlightBackground\": \"#353535\",\n        \"editorWhitespace.foreground\": \"#707070\",\n        \"editorIndentGuide.background\": \"#222222\",\n        \"editor.findMatchHighlightForeground\": \"#FF8500\",\n        \"editor.findMatchHighlightBackground\": \"#000000\",\n        \"editorLineNumber.foreground\": \"#999999\"\n    },\n    \"tokenColors\": [\n        {\n            \"name\": \"Storage\",\n            \"scope\": [\n                \"storage.class.std\",\n                \"storage.type.core\",\n                \"support.constant.core\",\n                \"support.type.marker\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#35FF00\"\n            }\n        },\n        {\n            \"name\": \"Raw Strings\",\n            \"scope\": [\n                \"string.quoted.double.raw\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#dafefd\",\n                \"background\": \"#006597\"\n            }\n        },\n        {\n            \"name\": \"Variables\",\n            \"scope\": [\n                \"variable.language\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#FFA937\"\n            }\n        },\n        {\n            \"name\": \"Attributes\",\n            \"scope\": [\n                \"meta.attribute.rust\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#FF0700\",\n                \"background\": \"#FF0700\"\n            }\n        },\n        {\n            \"name\": \"Modifiers\",\n            \"scope\": [\n                \"storage.modifier.visibility\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#FF0095\"\n            }\n        },\n        {\n            \"name\": \"Strings\",\n            \"scope\": [\n                \"string.quoted.double\",\n                \"string.quoted.single\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#3fd6ff\",\n                \"background\": \"#dafefd\"\n            }\n        },\n        {\n            \"name\": \"Constants\",\n            \"scope\": [\n                \"storage.modifier.const\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#fd6783\"\n            }\n        },\n        {\n            \"name\": \"Keywords\",\n            \"scope\": [\n                \"keyword.other\",\n                \"keyword.other.fn\",\n                \"keyword.other.where\",\n                \"storage.modifier.mut\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#FF0095\"\n            }\n        },\n        {\n            \"name\": \"Parameters\",\n            \"scope\": [\n                \"meta.type_params\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#FF6F6B\"\n            }\n        },\n\n        {\n            \"name\": \"Comments\",\n            \"scope\": [\n                \"comment.block\",\n                \"comment.line.double-slash\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#a39c8e\"\n            }\n        },\n        {\n            \"name\": \"Doc Comments\",\n            \"scope\": [\n                \"comment.line.documentation\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#00b4cf\"\n            }\n        },\n        {\n            \"name\": \"Boolean\",\n            \"scope\": [\n                \"constant.language.boolean\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#CD73FF\"\n            }\n        },\n        {\n            \"name\": \"Numbers\",\n            \"scope\": [\n                \"constant.numeric.float\",\n                \"constant.numeric.integer.decimal\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#35FF00\"\n            }\n        },\n\n        {\n            \"name\": \"Function\",\n            \"scope\": [\n                \"entity.name.function\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#FFDB00\"\n            }\n        },\n\n        {\n            \"name\": \"Data Structures and Impl\",\n            \"scope\": [\n                \"entity.name.type\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#38F6FF\"\n            }\n        },\n        {\n            \"name\": \"Control Statements\",\n            \"scope\": [\n                \"keyword.control\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#99F200\"\n            }\n        },\n        {\n            \"name\": \"Operators\",\n            \"scope\": [\n                \"keyword.operator.arithmetic\",\n                \"keyword.operator.assignment\",\n                \"keyword.operator.comparison\",\n                \"keyword.operator.misc\",\n                \"keyword.operator.sigil\",\n                \"storage.modifier.const\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#FD6783\"\n            }\n        },\n        \n        {\n            \"name\": \"Function Std\",\n            \"scope\": [\n                \"support.function.std\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#FF8500\"\n            }\n        },\n        \n        {\n            \"name\": \"Lifetimes\",\n            \"scope\": [\n                \"storage.modifier.lifetime\",\n                \"entity.name.lifetime\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#FF3C37\"\n            }\n        },\n        {\n            \"name\": \"Struct Enum Keywords\",\n            \"scope\": [\n                \"storage.type\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#35FF00\"\n            }\n        },\n        {\n            \"name\": \"Macro Definition??? Not Sure\",\n            \"scope\": [\n                \"support.function.builtin\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#d08aff\"\n            }\n        },\n        {\n            \"name\": \"Functions\",\n            \"scope\": [\n                \"support.function.core\"\n            ],\n            \"settings\": {\n                \"foreground\": \"#FF6F6B\"\n            }\n        }\n    ]\n}\n\n\n",
			"settings":
			{
				"buffer_size": 5970,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#26292C\n#F8F8F2\n#353535\n#707070\n#222222\n#FF8500\n#000000\n#999999\n#35FF00\n#dafefd\n#006597\n#FFA937\n#FF0700\n#FF0700\n#FF0095\n#3fd6ff\n#dafefd\n#fd6783\n#FF0095\n#FF6F6B\n#a39c8e\n#00b4cf\n#CD73FF\n#35FF00\n#FFDB00\n#38F6FF\n#99F200\n#FD6783\n#FF8500\n#FF3C37\n#35FF00\n#d08aff\n#FF6F6B",
			"settings":
			{
				"buffer_size": 263,
				"line_ending": "Windows",
				"name": "#26292C"
			}
		},
		{
			"file": "src/blog.rs",
			"settings":
			{
				"buffer_size": 40862,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/data.rs",
			"settings":
			{
				"buffer_size": 6256,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/accept.rs",
			"settings":
			{
				"buffer_size": 4997,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/collate.rs",
			"settings":
			{
				"buffer_size": 16123,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/ral_administrator.rs",
			"settings":
			{
				"buffer_size": 13598,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/ral_user.rs",
			"settings":
			{
				"buffer_size": 13674,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/referrer.rs",
			"settings":
			{
				"buffer_size": 614,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/xpress.rs",
			"settings":
			{
				"buffer_size": 11695,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/layout.rs",
			"settings":
			{
				"buffer_size": 9115,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Cargo.toml",
			"settings":
			{
				"buffer_size": 2819,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/private.rs",
			"settings":
			{
				"buffer_size": 215,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/location.rs",
			"settings":
			{
				"buffer_size": 671,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/sanitize.rs",
			"settings":
			{
				"buffer_size": 3339,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Rocket.toml",
			"settings":
			{
				"buffer_size": 635,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Andrew/AppData/Roaming/Sublime Text 3/Packages/User/Custom-Themes/RustCustom-3.tmTheme",
			"settings":
			{
				"buffer_size": 42505,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "// BEFORE SWITCHING FROM RETURNS TO ELSE STATEMENTS\n\nuse rocket::Data;\nuse rocket::data::FromData;\nuse rocket::fairing::{Fairing, Info, Kind};\nuse rocket::http::{Cookie, Cookies, MediaType, ContentType, Method, Status};\nuse rocket::Outcome;\nuse rocket::Outcome::Success;\nuse rocket::request::{FlashMessage, Form, FromForm, FormItems, FromRequest, Request};\nuse rocket::response::{self, Response, content, NamedFile, Redirect, Flash, Responder, Content};\nuse rocket::response::content::Html;\nuse rocket::State;\nuse rocket;\n\nuse std::mem;\nuse std::env;\nuse std::collections::HashMap;\nuse std::ffi::OsStr;\nuse std::io::prelude::*;\nuse std::io::{Cursor, Read, Write};\nuse std::path::{Path, PathBuf};\nuse std::fs::{self, File};\nuse ::serde::{Deserialize, Serialize};\n\nuse std::sync::{Mutex, Arc, RwLock};\nuse std::sync::atomic::{AtomicUsize, Ordering};\nuse std::net::Ipv4Addr;\n\nuse htmlescape::*;\n\nuse super::{HITS_SAVE_INTERVAL, MULTI_SEGMENT_PATHS, UNIQUE_HITS_LOG, TOTAL_HITS_LOG, HIT_COUNTER_LOG};\n// pub const HITS_SAVE_INTERVAL: usize = 5;\nuse xpress::find_ip;\n\npub fn cur_dir_file(name: &str) -> PathBuf {\n    if let Ok(mut dir) = env::current_exe() {\n        dir.pop();\n        // println!(\"Climbing directory tree into: {}\", &dir.display());\n        dir.pop();\n        // println!(\"Loading into directory: {}\", &dir.display());\n        dir.set_file_name(name);\n        // println!(\"Load file is: {}\", &dir.display());\n        dir\n    } else {\n        PathBuf::from(name)\n    }\n}\n\n\n\n#[derive(Debug)]\npub struct TotalHits {\n    pub total: AtomicUsize,\n}\n\n\n#[derive(Debug, Serialize, Deserialize)]\npub struct TotalHitsSerde {\n    pub total: usize,\n}\n\n\n\n#[derive(Debug, Serialize, Deserialize)]\npub struct PageStats {\n    pub map: HashMap<String, usize>,\n}\n\n\n#[derive(Debug, Serialize, Deserialize)]\npub struct Counter {\n    pub stats: Mutex<PageStats>,\n}\n\n// Implements a Request Guard to pull data into a route\n// current page/route, page views, total site hits/views\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct Hits(pub String, pub usize, pub usize);\n\n// Use this for error pages to track errors\n#[derive(Debug, Clone, Serialize)]\npub struct ErrorHits(pub String, pub usize, pub usize);\n\n#[derive(Debug, Serialize, Deserialize)]\npub struct UniqueStats {\n    // For each page track the number of hits from each ip address\n    stats: HashMap<String, HashMap<String, usize>>,\n}\n#[derive(Debug)]\npub struct UStatsWrapper(pub RwLock<UniqueStats>);\n\n// Use in a route's parameter list.  Returns :\n//   page route,\n//   client's ip address, \n//   number of visits for that page from the client, \n//   and unique hits for that page\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct UniqueHits(pub Hits, pub String, pub usize, pub usize);\n// pub struct UniqueHits(hits: Hits, pub string, pub usize, pub usize);\n\n\nimpl UniqueHits {\n    // pub fn new(route: String, ipaddy: String, visits: usize, uhits: usize) -> Self {\n    pub fn new(hits: Hits, ipaddy: String, visits: usize, uhits: usize) -> Self {\n        // println!(\"Route: {}, ip: {}, visits: {}, unique hits: {}\", &route, &ipaddy, &visits, &uhits);\n        println!(\"Route: {}, ip: {}, page hits: {}, total site hits; {}, visits: {}, unique hits: {}\", &hits.0, &ipaddy, &hits.1, &hits.2, &visits, &uhits);\n        UniqueHits(hits, ipaddy, visits, uhits)\n    }\n    // pub fn new(route: String, ipaddy: String) -> Self {\n    //     UniqueHits(route, ipaddy)\n    // }\n}\n\nimpl UniqueStats {\n    pub fn check_save(&self, total: usize) {\n        // let save = |hits: &Hits, ip: &str, visits: usize, uhits: usize| {\n        if total % HITS_SAVE_INTERVAL == 0 {\n            println!(\"Attempting to save unique hits.  Total hits: {}\", total);\n            if self.save() {\n                println!(\"Successfully saved unique hits\");\n            } else {\n                println!(\"Failed to save unique hits\");\n            }\n        }\n    }\n    pub fn ser(&self) -> String {\n        let ser = ::serde_json::to_string_pretty(self)\n            .unwrap_or(String::new());\n        ser\n    }\n    pub fn des(mut buffer: String) -> Self {\n        let des_rst = ::serde_json::from_str(&mut buffer);\n        if let Ok(des) = des_rst {\n            des\n        } else {\n            println!(\"Deserialization failed for UniqueStats.\");\n            UniqueStats::default()\n        }\n    }\n    pub fn load() -> Self {\n        let filename = cur_dir_file(UNIQUE_HITS_LOG);\n        let mut f_rst = File::open(&filename);\n        if let Ok(mut f) = f_rst {\n            let mut buffer: String = String::with_capacity(10000);\n            {\n                f.read_to_string(&mut buffer);\n            }\n            let des: UniqueStats = UniqueStats::des(buffer);\n            des\n        } else {\n            println!(\"Could not find unique hits log file.\\nIf this is the first time the app has been executed this is fine.\");\n            UniqueStats::default()\n        }\n    }\n    pub fn save(&self) -> bool {\n        println!(\"Attempting to serialize unique hits\");\n        let ser = self.ser();\n        println!(\"Serialized unique hits into:\\n{}\", &ser);\n        let filename = cur_dir_file(UNIQUE_HITS_LOG);\n        let mut f_rst = File::create(&filename);\n        if let Ok(mut f) = f_rst {\n            let bytes = f.write( ser.as_bytes() );\n            if let Ok(b) = bytes {\n                if b != 0 {\n                    true\n                } else {\n                    println!(\"Writing to unique hits log file failed\");\n                    false\n                }\n            } else {\n                println!(\"Writing to unique hits log file failed\");\n                false\n            }\n        } else {\n            println!(\"Writing to unique hits log file failed\");\n            false\n        }\n        \n        \n    }\n}\n\n\nimpl Default for UniqueStats {\n    fn default() -> Self {\n        UniqueStats {\n            // stats: RwLock::new(\n            //     HashMap::new()\n            // ),\n            stats: HashMap::new(),\n        }\n    }\n}\n\n// fn new_ip_map(ipaddy: String) -> HashMap<String, usize> {\n//     let mut ips: HashMap<String, usize> = HashMap::new();\n//     ips.insert(ipaddy, 1);\n//     ips\n// }\n\nimpl<'a, 'r> FromRequest<'a, 'r> for UniqueHits {\n    type Error = ();\n    \n    fn from_request(req: &'a Request<'r>) -> ::rocket::request::Outcome<UniqueHits,Self::Error> {\n        // let unique_lock = req.guard::<State<UniqueStats>>()?;\n        let unique_lock: UStatsWrapper = &*(req.guard::<State<UStatsWrapper>>()?);\n        let route = route(req);\n        let ipaddy = if let Some(ip) = find_ip(&req) {\n            ip\n        } else {\n            println!(\"No Ip Address found.\");\n            // return Outcome::Failure( (Status::InternalServerError, () ) );\n            \"127.0.0.1\".to_owned()\n        };\n        \n        let hits: Hits;\n        if let Outcome::Success(h) = req_guard(req, route.clone()) {\n            hits = h;\n        } else {\n            println!(\"Failed to retrieve Hits State from Request Guard\");\n            return Outcome::Failure( ( Status::InternalServerError, () ) );\n        }\n        \n        let visits: usize;\n        let uhits: usize;\n        {\n            // let pages = unique_lock.stats.write()?;\n            // if let Ok(mut pages) = unique_lock.stats.write() {\n            if let Ok(mut ustats) = unique_lock.0.write() {\n                if let Some(mut ips) = ustats.stats.get_mut(&route) {\n                    println!(\"Found entry for route\");\n                    uhits = ips.len();\n                    if let Some(mut v) = ips.get_mut(&ipaddy) {\n                        println!(\"Found entry for ip address for route\");\n                        *v += 1;\n                        visits = *v;\n                        ustats.check_save(hits.2);\n                        // return Outcome::Success( UniqueHits::new(hits, ipaddy, visits, uhits) );\n                    }\n                    println!(\"Could not find entry for ip address for route\");\n                    ips.insert(ipaddy.clone(), 1);\n                    ustats.check_save(hits.2);\n                    uhits += 1;\n                    // return Outcome::Success( UniqueHits::new(hits, ipaddy, 1, uhits+1) );\n                }\n                println!(\"Could not find an entry for the route\");\n                let mut page: HashMap<String, usize> = HashMap::new();\n                page.insert(ipaddy.clone(), 1);\n                ustats.stats.insert(route.clone(), page);\n                ustats.check_save(hits.2);\n                visits = 1;\n                uhits = 1;\n                // return Outcome::Success( UniqueHits::new(hits, ipaddy, 1, 1) );\n            }\n            Outcome::Failure( ( Status::InternalServerError, () ) )\n        }\n        \n    }\n}\n\n\nimpl TotalHits {\n    pub fn new() -> TotalHits {\n        TotalHits { total: AtomicUsize::new(0) }\n    }\n    pub fn save(&self) {\n        let filename = cur_dir_file(TOTAL_HITS_LOG);\n        \n        let mut f = File::create(&filename)\n            .expect(\"Could not create file for TotalHits.\");\n        \n        let serdes = TotalHitsSerde { total: self.total.load(Ordering::Relaxed) };\n        \n        // let ser: String = ::serde_json::to_string_pretty(self)\n        let ser: String = ::serde_json::to_string_pretty( &serdes )\n            .expect(\"Could not serialize TotalHits.\");\n        \n        let bytes = f.write( ser.as_bytes() );\n    }\n    pub fn load() -> Self {\n        let filename = cur_dir_file(TOTAL_HITS_LOG);\n        let mut f_rst = File::open(&filename);\n        if let Ok(mut f) = f_rst {\n            let mut buffer: String = String::with_capacity(100);\n            f.read_to_string(&mut buffer);\n            \n            // let des: Self = ::serde_json::from_str(&mut buffer)\n            let des: TotalHitsSerde = ::serde_json::from_str(&mut buffer)\n                .expect(\"Could not deserialize TotalHits from file.\");\n            \n            let out: TotalHits = TotalHits { total: AtomicUsize::new( des.total ) };\n            \n            out\n            // des\n        } else {\n            let new = TotalHits::new();\n            new.save();\n            new\n        }\n    }\n}\n\n\nimpl Counter {\n    pub fn new() -> Counter {\n        Counter { stats: Mutex::new( PageStats::new() ) }\n    }\n    pub fn save(buffer: &str) {\n        let filename = cur_dir_file(HIT_COUNTER_LOG);\n        \n        let mut f = File::create(&filename)\n            .expect(\"Could not create file for Counter.\");\n        \n        let bytes = f.write( buffer.as_bytes() );\n    }\n    pub fn load() -> Counter {\n        let filename = cur_dir_file(HIT_COUNTER_LOG);\n        let mut f_rst = File::open(&filename);\n        if let Ok(mut f) = f_rst {\n            let mut buffer: String = String::with_capacity(1000);\n            f.read_to_string(&mut buffer);\n            \n            let page_stats = PageStats::des(buffer);\n            \n            Counter {\n                stats: Mutex::new( page_stats ),\n            }\n        } else {\n            let new = PageStats::new();\n            let buffer = new.ser();\n            Counter::save(&buffer);\n            Counter {\n                stats: Mutex::new( new )\n            }\n        }\n    }\n}\n\n\nimpl PageStats {\n    pub fn new() -> PageStats {\n        PageStats { map: HashMap::new() }\n    }\n    pub fn ser(&self) -> String {\n        let ser: String = ::serde_json::to_string_pretty(self)\n            // .expect(\"Could not serialize PageStats\");\n            .unwrap_or(String::new());\n        ser\n    }\n    pub fn des(mut buffer: String) -> Self {\n        let des_rst = ::serde_json::from_str(&mut buffer);\n        if let Ok(des) = des_rst {\n            des\n        } else {\n            println!(\"Deserialization failed for PageStats.\");\n            PageStats::new()\n        }\n    }\n}\n\n\n// fn route<'a>(req: &rocket::Request<'a>) -> String {\nfn route<'a>(req: &Request) -> String {\n    let uri = req.uri();\n    let route = uri.path();\n    \n    // let page = route;\n    // let pagestr = page.to_string();\n    // let mut page: &str = route;\n    \n    let mut page: &str;\n    // let pagestr: String;\n    \n    // This first if statement allows customizable home page name in the tracking\n    if route == \"/\" {\n        page = \"/\";\n        // pagestr = \"/\".to_string();\n    } else if let Some(pos) = route[1..].find(\"/\") {\n        let (p, _) = route[1..].split_at(pos);\n        // println!(\"Found route `{}`, splitting at {} to get `{}`\", route, pos, p);\n        if MULTI_SEGMENT_PATHS.contains(&p) {\n        // if p == \"article\" {\n            page = if &route[0..1]== \"/\" { &route[1..] } else { route };\n            // pagestr = route.to_string();\n        } else {\n            page = p;\n            // pagestr = p.to_string();\n        }\n    } else {\n        // page = route.to_string();\n        // println!(\"Found route: {}\", route);\n        page = if &route[0..1]== \"/\" { &route[1..] } else { route };\n        // pagestr = route.to_string();\n    }\n    if page != \"\" { page.to_string() } else { route.to_string() }\n}\n\nfn req_guard(req: &Request, pagestr: String) -> ::rocket::request::Outcome<Hits,()> {\n        // let pagestr = page.to_string();\n        // let page = route(req);\n        // let page = &pagestr;\n        \n        // let pagestr = route(req);\n        \n        let total_state = req.guard::<State<TotalHits>>()?;\n        let mut total = total_state.total.load(Ordering::Relaxed);\n        // total.wrapping_add(1);\n        if total < usize::max_value() {\n            total += 1;\n        }\n        total_state.total.store( total, Ordering::Relaxed );\n        \n        \n        let page_views: usize;\n        let ser_stats: String;\n        {\n            let counter = req.guard::<State<Counter>>()?;\n            let mut stats = counter.stats.lock().expect(\"Could not unlock Counter stats mutex.\");\n            {\n                // https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html\n                let mut hits = stats.map.entry(pagestr.clone()).or_insert(0);\n                if *hits < usize::max_value() {\n                    *hits += 1;\n                }\n                page_views = *hits;\n            }\n            \n            // ser_stats = if total % 10 == 0 || &pagestr == \"save-hits\" {\n            ser_stats = if total % HITS_SAVE_INTERVAL == 0 || &pagestr == \"save-hits\" {\n                stats.ser()\n            } else {\n                String::new()\n            };\n        }\n        // (*hits).wrapping_add(1);\n        // page_views = (*hits);\n        // if total % 10 == 0 || &pagestr == \"save-hits\" {\n        if total % HITS_SAVE_INTERVAL == 0 || &pagestr == \"save-hits\" {\n            // println!(\"Save interval reached. Saving page stats.\");\n            Counter::save(&ser_stats);\n            // println!(\"Saved page stats, saving total hits.\");\n            total_state.save();\n            // println!(\"Saved total hits.\");\n        }\n        \n        Outcome::Success( Hits(pagestr, page_views, total) )\n    }\n\n\n// https://rocket.rs/guide/state/#within-guards\n// https://api.rocket.rs/rocket/http/uri/struct.URI.html\n// impl<'a, 'r> FromRequest<'a, 'r> for PageCount {\nimpl<'a, 'r> FromRequest<'a, 'r> for Hits {\n    type Error = ();\n    \n    fn from_request(req: &'a Request<'r>) -> ::rocket::request::Outcome<Hits,Self::Error> {\n        req_guard(req, route(req))\n    }\n}\n\n\nimpl ErrorHits {\n    pub fn error404(req: &Request) -> Hits {\n        // unimplemented!()\n        let route = req.uri().path();\n        let prepend = \"error404\";\n        \n        let mut uri: String = String::with_capacity(route.len() + prepend.len() + 8);\n        uri.push_str(prepend);\n        uri.push_str(route);\n        \n        // req.set_uri(uri.as_ref());\n        // let hits = req.guard::<Hits>();\n        \n        let hits = req_guard(req, uri);\n        if let Success(hitcount) = hits {\n            hitcount\n        } else {\n            Hits(String::from(\"uError\"), 0, 0)\n        }\n    }\n    pub fn error500(req: &Request) -> Hits {\n        // unimplemented!()\n                let route = req.uri().path();\n        let prepend = \"error500\";\n        \n        let mut uri: String = String::with_capacity(route.len() + prepend.len() + 8);\n        uri.push_str(prepend);\n        uri.push_str(route);\n        \n        // req.set_uri(uri.as_ref());\n        // let hits = req.guard::<Hits>();\n        \n        let hits = req_guard(req, uri);\n        if let Success(hitcount) = hits {\n            hitcount\n        } else {\n            Hits(String::from(\"uError\"), 0, 0)\n        }\n    }\n    pub fn error(req: &Request) -> Hits {\n        // unimplemented!()\n                let route = req.uri().path();\n        let prepend = \"error\";\n        \n        let mut uri: String = String::with_capacity(route.len() + prepend.len() + 8);\n        uri.push_str(prepend);\n        uri.push_str(route);\n        \n        // req.set_uri(uri.as_ref());\n        // let hits = req.guard::<Hits>();\n        \n        let hits = req_guard(req, uri);\n        if let Success(hitcount) = hits {\n            hitcount\n        } else {\n            Hits(String::from(\"uError\"), 0, 0)\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"settings":
			{
				"buffer_size": 17107,
				"line_ending": "Windows"
			}
		},
		{
			"file": "static/packages/js/before/blog.js",
			"settings":
			{
				"buffer_size": 16059,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "static/assets/after-1.0.3.js",
			"settings":
			{
				"buffer_size": 11086,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "static/assets/before-1.0.6.js",
			"settings":
			{
				"buffer_size": 432857,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "static/assets/before-1.0.6-might-be-old.js",
			"settings":
			{
				"buffer_size": 8445,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "static/packages/css/blog-current.css",
			"settings":
			{
				"buffer_size": 37210,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "static/assets/blog-1.0.8.css",
			"settings":
			{
				"buffer_size": 218817,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/page-template.html.hbs",
			"settings":
			{
				"buffer_size": 9078,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "pages/archive/about.page",
			"settings":
			{
				"buffer_size": 7297,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/article-template.html.hbs",
			"settings":
			{
				"buffer_size": 2428,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/search-template.html.hbs",
			"settings":
			{
				"buffer_size": 1119,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/page-code-template.html.hbs",
			"settings":
			{
				"buffer_size": 9694,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/common/assets-css.html.hbs",
			"settings":
			{
				"buffer_size": 21,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/common/assets-js-before.html.hbs",
			"settings":
			{
				"buffer_size": 22,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/common/assets-js-after.html.hbs",
			"settings":
			{
				"buffer_size": 21,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/page-blank-template.html.hbs",
			"settings":
			{
				"buffer_size": 10,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "{{{body}}}"
			}
		},
		{
			"file": "templates/tags-template.html.hbs",
			"settings":
			{
				"buffer_size": 445,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/common/header.html.hbs",
			"settings":
			{
				"buffer_size": 8104,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/common/footer.html.hbs",
			"settings":
			{
				"buffer_size": 872,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": ".license",
			"settings":
			{
				"buffer_size": 1054,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "Copyright 2018 Andrew Prindle"
			}
		},
		{
			"file": "templates/articles-pagination-template.html.hbs",
			"settings":
			{
				"buffer_size": 1626,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "\nuse std::{thread, time};\nuse std::time::Instant;\nuse std::time::Duration;\nuse std::{env, str, io};\nuse std::io::{Cursor, Read};\nuse std::path::{Path, PathBuf};\n\nuse rocket_contrib::Template;\nuse rocket::response::{content, NamedFile, Redirect, Flash};\nuse rocket::{Request, Data, Outcome};\nuse rocket::request::{FlashMessage, Form, FromForm};\nuse rocket::data::FromData;\nuse rocket::response::content::Html;\nuse rocket::State;\n// use rocket::request::{Form, FlashMessage};\nuse rocket::http::{Cookie, Cookies, RawStr};\n// use auth::userpass::UserPass;\n// use auth::status::{LoginStatus,LoginRedirect};\n// use auth::dummy::DummyAuthenticator;\n// use auth::authenticator::Authenticator;\nuse regex::Regex;\nuse titlecase::titlecase;\n\nuse chrono::prelude::*;\nuse chrono::{NaiveDate, NaiveDateTime};\nuse std::sync::atomic::{AtomicUsize, Ordering};\n\nuse rocket::http::hyper::header::{Headers, ContentDisposition, DispositionType, DispositionParam, Charset};\n\n// use super::{BLOG_URL, ADMIN_LOGIN_URL, USER_LOGIN_URL, CREATE_FORM_URL, TEST_LOGIN_URL};\n\n// use super::RssContent;\n// use cookie_data::*;\n// use cookie_data::CookieId;\n// use admin_auth::*;\n// use user_auth::*;\n// use users::*;\n// use login_form_status::*;\n// use login_form_status::LoginFormRedirect;\n// use templates::*;\n// use authorize::*;\n// use administrator::*;\n// use roles::*;\nuse super::*;\n// use counter::*;\nuse counter::*;\nuse location::*;\nuse referrer::*;\nuse collate::*;\nuse layout::*;\nuse blog::*;\nuse data::*;\nuse sanitize::*;\nuse rocket_auth_login::authorization::*;\nuse rocket_auth_login::sanitization::*;\nuse ral_administrator::*;\nuse ral_user::*;\nuse templates::*;\nuse xpress::*;\nuse accept::*;\n// use ::templates::*;\n\n\nuse comrak::{markdown_to_html, ComrakOptions};\n\n// pub const COMRAK_OPTIONS: ComrakOptions = ComrakOptions {\n//     hardbreaks: true,            // \\n => <br>\\n\n//     width: 120usize,             \n//     github_pre_lang: false,      \n//     ext_strikethrough: true,     // hello ~world~ person.\n//     ext_tagfilter: true,         // filters out certain html tags\n//     ext_table: true,             // | a | b |\\n|---|---|\\n| c | d |\n//     ext_autolink: true,          \n//     ext_tasklist: true,          // * [x] Done\\n* [ ] Not Done\n//     ext_superscript: true,       // e = mc^2^\n//     ext_header_ids: None,        // None / Some(\"some-id-prefix-\".to_string())\n//     ext_footnotes: true,         // Hi[^x]\\n\\n[^x]: A footnote here\\n\n// };\n\n\n// TODO: Collate: make a route that takes a number in the route (not query string)\n//                use this number to determine how many pages to list\n//                on each page say the page number as determined in the Page structure\n\n\n\n\n\n\n\n\n\n\n// output\\.into\\(\\)\\.compress\\(encoding\\)\n// let express: Express = output.into();\n//   express.compress(encoding)\n\n// #[get(\"/login-user\")]\n// fn hbs_login_form_admin(start: GenTimer, conn: DbConn, user: Option<UserCookie>, flash_msg_opt: Option<FlashMessage>, encoding: AcceptCompression, referrer: Referrer) -> Express {\n    \n    // let mut fields: HashMap<String, String> = HashMap::new();\n    \n    // if let Referrer(Some(refer)) = referrer {\n    //     println!(\"Referrer: {}\", &refer);\n    //     fields.insert(\"\");\n    // }\n    \n    \n//     let express: Express = String::new().into();\n//     express.compress(encoding)\n// }\n// #[post(\"/login-user\", data = \"<form>\")]\n// fn hbs_login_process_admin() -> Redirect {\n    \n// }\n\n\n\n\n\n// DOESN'T WORK\n// #[get(\"/init\")]\n// pub fn initialize(admin: Option<AdministratorCookie>) {\n//     ContentCacheLock::cache(rock, STATIC_PAGES_DIR);\n// }\n\nfn destruct_context(ctx: ContentContext) -> (HashMap<String, PageContext>, usize) {\n    let reader = ctx.pages.read().unwrap().clone();\n    let size = ctx.size.load(Ordering::SeqCst);\n    (reader, size)\n}\n\nfn destruct_cache(cache: ContentCacheLock) -> (HashMap<String, ContentCached>, usize) {\n    let reader = cache.pages.read().unwrap().clone();\n    let size = cache.size.load(Ordering::SeqCst);\n    (reader, size)\n}\n\n#[get(\"/refresh_content\")]\npub fn refresh_content(start: GenTimer, admin: AdministratorCookie, user: Option<UserCookie>, encoding: AcceptCompression, uhits: UniqueHits, context_state: State<ContentContext>, cache_state: State<ContentCacheLock>) -> Express {\n    \n    let mut ctx_writer;\n    if let Ok(ctx) = context_state.pages.write() {\n        ctx_writer = ctx;\n    } else {\n        let template = hbs_template(TemplateBody::General(alert_danger(\"An error occurred attempting to access content.\")), None, Some(\"Content not available.\".to_string()), String::from(\"/error404\"), Some(admin), user, None, Some(start.0));\n        let express: Express = template.into();\n        return express.compress(encoding);\n    }\n    \n    let mut cache_writer;\n    if let Ok(cache) = cache_state.pages.write() {\n        cache_writer = cache;\n    } else {\n        let template = hbs_template(TemplateBody::General(alert_danger(\"An error occurred attempting to access content.\")), None, Some(\"Content not available.\".to_string()), String::from(\"/error404\"), Some(admin), user, None, Some(start.0));\n        let express: Express = template.into();\n        return express.compress(encoding);\n    }\n    \n    // let content_context: ContentContext = ContentContext::load(STATIC_PAGES_DIR);\n    // let content_cache: ContentCacheLock = ContentCacheLock::new();\n    \n    let (ctx_pages, ctx_size) = destruct_context(ContentContext::load(STATIC_PAGES_DIR));\n    *ctx_writer = ctx_pages;\n    context_state.size.store(ctx_size, Ordering::SeqCst);\n    \n    // let cache = ContentCacheLock::new();\n    let (cache_pages, cache_size) = destruct_cache(ContentCacheLock::new());\n    *cache_writer = cache_pages;\n    cache_state.size.store(cache_size, Ordering::SeqCst);\n    \n    \n    // // load template contexts for all content files in the pages directory\n    // *ctx_writer = *ctx.pages.read().unwrap();\n    \n    // // ctx_writer = ctx.pages.read();\n    // context_state.size.store(ctx.size.load(Ordering::SeqCst), Ordering::SeqCst);\n    \n    // // reset cache back to nothing\n    // *cache_writer = *cache.pages.read().unwrap();\n    // cache_state.size.store(cache.size.load(Ordering::SeqCst), Ordering::SeqCst);\n    \n    let template = hbs_template(TemplateBody::General(alert_success(\"Content has been refreshed successfully.\")), None, Some(\"Content refreshed.\".to_string()), String::from(\"/error404\"), Some(admin), user, None, Some(start.0));\n    let express: Express = template.into();\n    express.compress(encoding)\n}\n\n\n\n\n//\n#[get(\"/content/<uri..>\")]\npub fn static_pages(start: GenTimer, \n                    uri: PathBuf, \n                    admin: Option<AdministratorCookie>, \n                    user: Option<UserCookie>, \n                    encoding: AcceptCompression, \n                    uhits: UniqueHits, \n                    context: State<ContentContext>, \n                    // cache_lock: State<ContentCacheLock>\n                   ) -> Result<ContentRequest, Express> {\n    // could also prevent hotlinking by checking the referrer\n    //   and sending an error for referring sites other than BASE or blank\n    \n    // look for the uri in the context, if it exists then make a ContextRequest\n    //   which will be passed as the output\n    //   before passing ContextRequest as the output, check for admin/user in the context\n    //     if the context has user or admin set to true then make sure the admin/user var is_some()\n    // if it does not exist then return an Express instance with an error message\n    //   use hbs_template's General template\n    \n    // Could also move context out of the ContentReuqest and in the Responder use\n    // let cache = req.guard::<State<HitCount>>().unwrap();\n    \n    let page = uri.to_string_lossy().into_owned();\n    \n    if let Ok(ctx_reader) = context.pages.read() {\n        // if let Some(ctx) = context.pages.get(&page) {\n        if let Some(ctx) = ctx_reader.get(&page) {\n            // Permissions check\n            if (ctx.admin && admin.is_none()) || (ctx.user && user.is_none()) {\n                let template = hbs_template(TemplateBody::General(alert_danger(\"You do not have sufficient privileges to view this content.\")), None, Some(\"Insufficient Privileges\".to_string()), String::from(\"/error403\"), admin, user, None, Some(start.0));\n                let express: Express = template.into();\n                return Err(express.compress(encoding));\n            }\n            \n            // let test = ctx.clone();\n            // context request\n            // Build a ContentRequest with the requested files\n            let conreq: ContentRequest = ContentRequest {\n                encoding,\n                // cache: cache_lock.inner(),\n                route: page,\n                start,\n                // context: ctx.clone(),\n                // context: &test,\n            };\n            Ok(conreq)\n            \n        } else {\n            // let template = hbs_template(...); // Content does not exist\n            let template = hbs_template(TemplateBody::General(alert_danger(\"The requested content could not be found.\")), None, Some(\"Content not found.\".to_string()), String::from(\"/error404\"), admin, user, None, Some(start.0));\n            let express: Express = template.into();\n            Err(express.compress(encoding))\n        }\n        \n    } else {\n        // let template = hbs_template(...); // Content does not exist\n        let template = hbs_template(TemplateBody::General(alert_danger(\"An error occurred attempting to access content.\")), None, Some(\"Content not available.\".to_string()), String::from(\"/error404\"), admin, user, None, Some(start.0));\n        let express: Express = template.into();\n        Err(express.compress(encoding))\n    }\n        \n    \n    \n}\n\n#[get(\"/download/<uri..>\")]\npub fn code_download(start: GenTimer, \n                    uri: PathBuf, \n                    admin: Option<AdministratorCookie>, \n                    user: Option<UserCookie>, \n                    encoding: AcceptCompression, \n                    uhits: UniqueHits, \n                    context: State<ContentContext>, \n                    // cache_lock: State<ContentCacheLock>\n                   ) -> Express {\n    // If the requested URI cannot be found in the static page cache\n    //   maybe try looking in the uploads folder\n    \n    let page = uri.to_string_lossy().into_owned();\n    \n    if let Ok(ctx_reader) = context.pages.read() {\n            \n        // if let Some(ctx) = context.pages.get(&page) {\n        if let Some(ctx) = ctx_reader.get(&page) {\n            // Permissions check\n            if (ctx.admin && admin.is_none()) || (ctx.user && user.is_none()) {\n                let template = hbs_template(TemplateBody::General(alert_danger(\"You do not have sufficient privileges to view this content.\")), None, Some(\"Insufficient Privileges\".to_string()), String::from(\"/error403\"), admin, user, None, Some(start.0));\n                let express: Express = template.into();\n                return express.compress(encoding);\n            }\n            \n            let express: Express = ctx.body.clone().into();\n            \n            // let mut headers = Headers::new();\n            // headers.set(ContentDisposition {\n            //     disposition: DispositionType::Attachment,\n            //     parameters: vec![DispositionParam::Filename(\n            //       Charset::Iso_8859_1, // The character set for the bytes of the filename\n            //       None, // The optional language tag (see `language-tag` crate)\n            //       b\"\\xa9 Copyright 1989.txt\".to_vec() // the actual bytes of the filename\n            //     )]\n            // });\n            \n            let attachment = ContentDisposition {\n                disposition: DispositionType::Attachment,\n                parameters: vec![DispositionParam::Filename(\n                  Charset::Iso_8859_1, // The character set for the bytes of the filename\n                  None, // The optional language tag (see `language-tag` crate)\n                  ctx.uri.clone().into_bytes()\n                  // b\"\".to_vec() // the actual bytes of the filename\n                )]\n            };\n            express\n            // Disable cache headers; IE breaks if downloading a file over HTTPS with cache-control headers\n            .set_ttl(-2)\n            .add_header(attachment)\n            // express\n        } else {\n            // let template = hbs_template(...); // Content does not exist\n            let template = hbs_template(TemplateBody::General(alert_danger(\"The requested download could not be found.\")), None, Some(\"Content not found.\".to_string()), String::from(\"/error404\"), admin, user, None, Some(start.0));\n            let express: Express = template.into();\n            express.compress(encoding)\n        }\n    } else {\n        // let template = hbs_template(...); // Content does not exist\n        let template = hbs_template(TemplateBody::General(alert_danger(\"An error occurred attempting to access content.\")), None, Some(\"Content not available.\".to_string()), String::from(\"/error404\"), admin, user, None, Some(start.0));\n        let express: Express = template.into();\n        express.compress(encoding)\n    }\n    \n}\n\n\n\n\n\n\n\n\n\n#[get(\"/admin-test\")]\npub fn hbs_admin_test(start: GenTimer, user: Option<UserCookie>, admin: Option<AdministratorCookie>, encoding: AcceptCompression) -> Express {\n    \n    let output: Template;\n    if let Some(a) = admin {\n        output = hbs_template(TemplateBody::General(alert_success(\"You are logged in.\")), None, Some(\"Admin Test\".to_string()), String::from(\"/admin-test\"), Some(a), user, None, Some(start.0));\n    } else {\n        let mut loginmsg = String::with_capacity(300);\n        loginmsg.push_str(\"You are not logged in, please <a href=\\\"\");\n        loginmsg.push_str(BLOG_URL);\n        loginmsg.push_str(\"admin\");\n        loginmsg.push_str(\"\\\">Login</a>\");\n        \n        output = hbs_template(TemplateBody::General(alert_danger(&loginmsg)), None, Some(\"Admin Test\".to_string()), String::from(\"/admin-test\"), admin, user, None, Some(start.0));\n    }\n    \n    let express: Express = output.into();\n    express.compress( encoding )\n    \n}\n// #[get(\"/admin-test\", rank = 2)]\n// pub fn hbs_admin_test_unauthorized(start: GenTimer, user: Option<UserCookie>, encoding: AcceptCompression, location: Location) -> Redirect {\n//     // Redirect::to(\"/admin?referrer=\")\n//     admin_login(location)\n// }\n\n\n\n\n\n\n#[get(\"/admin\", rank = 1)]\npub fn hbs_dashboard_admin_authorized(start: GenTimer, pagination: Page<Pagination>, conn: DbConn, user: Option<UserCookie>, admin: AdministratorCookie, flash_msg_opt: Option<FlashMessage>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n    // let start = Instant::now();\n    // let flash = if let Some(flash) = flash_msg_opt {\n    //     Some( alert_warning(flash.msg()) )\n    // } else {\n    //     None\n    // };\n    \n    // let output: Template = hbs_template(TemplateBody::General(format!(\"Welcome Administrator {user}.  You are viewing the administrator dashboard page.\", user=admin.username), flash), Some(\"Dashboard\".to_string()), String::from(\"/admin\"), Some(admin), user, None, Some(start.0));\n    \n    // let end = start.0.elapsed();\n    // println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    // let express: Express = output.into();\n    // express.compress(encoding)\n    \n    hbs_manage_full(start, \"\".to_string(), \"\".to_string(), pagination, conn, admin, user, flash_msg_opt, encoding, uhits)\n    \n}\n\n// No longer needed - hbs_dashboard_admin_authorized takes care of flash messages\n// #[get(\"/admin\", rank = 2)]\n#[get(\"/admin\", rank = 7)]\npub fn hbs_dashboard_admin_flash(start: GenTimer, conn: DbConn, user: Option<UserCookie>, flash_msg_opt: Option<FlashMessage>, encoding: AcceptCompression, referrer: Referrer) -> Express {\n    // let start = Instant::now();\n    let output: Template;\n    \n    let mut fields: HashMap<String, String> = HashMap::new();\n    \n    if let Referrer(Some(refer)) = referrer {\n        // println!(\"Referrer: {}\", &refer);\n        fields.insert(\"referrer\".to_string(), refer);\n    } else {\n        // println!(\"No referrer\");\n    }\n    \n    if let Some(flash_msg) = flash_msg_opt {\n        let flash = Some( alert_danger(flash_msg.msg()) );\n        output = hbs_template(TemplateBody::LoginData(ADMIN_LOGIN_URL.to_string(), None, fields), flash, Some(\"Administrator Login\".to_string()), String::from(\"/admin\"), None, user, Some(\"set_login_focus();\".to_string()), Some(start.0));\n    } else {\n        output = hbs_template(TemplateBody::LoginData(ADMIN_LOGIN_URL.to_string(), None, fields), None, Some(\"Administrator Login\".to_string()), String::from(\"/admin\"), None, user, Some(\"set_login_focus();\".to_string()), Some(start.0));\n    }\n    \n    let end = start.0.elapsed();\n    // println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    let express: Express = output.into();\n    express.compress(encoding)\n}\n\n// No longer needed.  Was getting errors because the dashboard_admin_retry_user() route\n// named the qrystr parameter user which already has a variable binding, renamed and fixed it\n\n// #[get(\"/admin/<userqry>\")]\n// pub fn dashboard_admin_retry_route(conn: DbConn, user: Option<UserCookie>, mut userqry: String, flash_msg_opt: Option<FlashMessage>, encoding: AcceptCompression) -> Express {\n//     unimplemented!()\n// }\n\n\n// #[get(\"/admin?<userqry>\", rank=3)]\n#[get(\"/admin?<userqry>\", rank=4)]\npub fn hbs_dashboard_admin_retry_user(start: GenTimer, conn: DbConn, user: Option<UserCookie>, mut userqry: QueryUser, flash_opt: Option<FlashMessage>, encoding: AcceptCompression) -> Express {\n    // let start = Instant::now();\n    // let userqry: QueryUser = userqry_form.get();\n    \n    let flash = process_flash(flash_opt);\n    \n    // let mut fields: HashMap<String, String> = HashMap::new();\n    \n    // if let Referrer(Some(refer)) = referrer {\n    //     println!(\"Referrer: {}\", &refer);\n    //     fields.insert(\"referrer\".to_string(), refer);\n    // }\n    // // user = login::sanitization::sanitize(&user);\n    \n    let username = if &userqry.user != \"\" { Some(userqry.user.clone() ) } else { None };\n    // let flash = if let Some(f) = flash_msg_opt { Some(alert_danger(f.msg())) } else { None };\n    // let output = hbs_template(TemplateBody::LoginData(ADMIN_LOGIN_URL.to_string(), username, fields), flash, Some(\"Administrator Login\".to_string()), String::from(\"/admin\"), None, user, Some(\"set_login_focus();\".to_string()), Some(start.0));\n    let output = hbs_template(TemplateBody::Login(ADMIN_LOGIN_URL.to_string(), username), flash, Some(\"Administrator Login\".to_string()), String::from(\"/admin\"), None, user, Some(\"set_login_focus();\".to_string()), Some(start.0));\n    \n    let end = start.0.elapsed();\n    // println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    let express: Express = output.into();\n    express.compress(encoding)\n}\n\n// #[get(\"/admin?<rediruser>\")]\n#[get(\"/admin?<rediruser>\", rank = 2)]\npub fn hbs_dashboard_admin_retry_redir(start: GenTimer, conn: DbConn, user: Option<UserCookie>, mut rediruser: QueryUserRedir, flash_opt: Option<FlashMessage>, encoding: AcceptCompression) -> Express {\n    // let start = Instant::now();\n    // let userqry: QueryUser = userqry_form.get();\n    \n    let flash = process_flash(flash_opt);\n    \n    let mut fields: HashMap<String, String> = HashMap::new();\n    \n    if &rediruser.referrer != \"\" && &rediruser.referrer != \"noredirect\" {\n        // println!(\"Adding referrer {}\", &rediruser.referrer);\n        fields.insert(\"referrer\".to_string(), rediruser.referrer.clone());\n    } else {\n        // println!(\"No referring page\\n{:?}\", rediruser);\n    }\n    // if let Referrer(Some(refer)) = referrer {\n    //     println!(\"Referrer: {}\", &refer);\n    //     fields.insert(\"referrer\".to_string(), refer);\n    // }\n    // // user = login::sanitization::sanitize(&user);\n    \n    let username = if &rediruser.user != \"\" { Some(rediruser.user.clone() ) } else { None };\n    // let flash = if let Some(f) = flash_msg_opt { Some(alert_danger(f.msg())) } else { None };\n    let output = hbs_template(TemplateBody::LoginData(ADMIN_LOGIN_URL.to_string(), username, fields), flash, Some(\"Administrator Login\".to_string()), String::from(\"/admin\"), None, user, Some(\"set_login_focus();\".to_string()), Some(start.0));\n    \n    let end = start.0.elapsed();\n    // println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    let express: Express = output.into();\n    express.compress(encoding)\n}\n\n// #[get(\"/admin?<rediruser>\")]\n#[get(\"/admin?<rediruser>\", rank = 3)]\npub fn hbs_dashboard_admin_retry_redir_only(start: GenTimer, conn: DbConn, user: Option<UserCookie>, mut rediruser: QueryRedir, flash_opt: Option<FlashMessage>, encoding: AcceptCompression) -> Express {\n    // let start = Instant::now();\n    // let userqry: QueryUser = userqry_form.get();\n    \n    let flash = process_flash(flash_opt);\n    \n    let mut fields: HashMap<String, String> = HashMap::new();\n    \n    if &rediruser.referrer != \"\" && &rediruser.referrer != \"noredirect\" {\n        // println!(\"Adding referrer {}\", &rediruser.referrer);\n        fields.insert(\"referrer\".to_string(), rediruser.referrer.clone());\n    } else {\n        // println!(\"No referring page\\n{:?}\", rediruser);\n    }\n    // if let Referrer(Some(refer)) = referrer {\n    //     println!(\"Referrer: {}\", &refer);\n    //     fields.insert(\"referrer\".to_string(), refer);\n    // }\n    // // user = login::sanitization::sanitize(&user);\n    \n    // let username = if &rediruser.user != \"\" { Some(rediruser.user.clone() ) } else { None };\n    let username = None;\n    // let flash = if let Some(f) = flash_msg_opt { Some(alert_danger(f.msg())) } else { None };\n    let output = hbs_template(TemplateBody::LoginData(ADMIN_LOGIN_URL.to_string(), username, fields), flash, Some(\"Administrator Login\".to_string()), String::from(\"/admin\"), None, user, Some(\"set_login_focus();\".to_string()), Some(start.0));\n    \n    let end = start.0.elapsed();\n    // println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    let express: Express = output.into();\n    express.compress(encoding)\n}\n\n#[allow(unused_mut)]\n// #[post(\"/admin\", data = \"<form>\")]\n#[post(\"/admin\", data = \"<form>\")]\n// pub fn hbs_process_admin_login(start: GenTimer, form: Form<LoginCont<AdministratorForm>>, user: Option<UserCookie>, mut cookies: Cookies) -> Result<Redirect, Flash<Redirect>> {\npub fn hbs_process_admin_login(start: GenTimer, form: Form<LoginCont<AdministratorForm>>, user: Option<UserCookie>, mut cookies: Cookies) -> Result<Redirect, Flash<Redirect>> {\n    // let start = Instant::now();\n    \n    let login: AdministratorForm = form.get().form();\n    // let login: AdministratorForm = form.into_inner().form;\n    \n    let mut err_temp: String;\n    let ok_addy: &str;\n    let err_addy: &str;\n    if &login.referrer != \"\" && &login.referrer != \"noredierct\" {\n        // println!(\"Processing referrer: {}\", &login.referrer);\n        let referring = if login.referrer.starts_with(BLOG_URL) {\n            &login.referrer[BLOG_URL.len()-1..]\n        } else {\n            &login.referrer\n        };\n        ok_addy = &referring;\n        err_addy = {\n            err_temp = String::with_capacity(referring.len() + 20);\n            err_temp.push_str(\"/admin?redir=\");\n            err_temp.push_str(referring);\n            &err_temp\n        };\n    } else {\n        ok_addy = \"/admin\";\n        err_addy = \"/admin\";\n    }\n    // let ok_addy: &str = if &login.referrer != \"\" {\n    //     &login.referrer\n    // } else {\n    //     \"/admin\"\n    // };\n    // println!(\"Forwaring to {} or {}\", ok_addy, err_addy);\n    \n    // let mut output = login.flash_redirect(\"/admin\", \"/admin\", &mut cookies);\n    let mut output = login.flash_redirect(ok_addy, err_addy, &mut cookies);\n    \n    if output.is_ok() {\n        // println!(\"Login success, forwarding to {}\", ok_addy);\n        if let Some(user_cookie) = user {\n            if &user_cookie.username != &login.username {\n                if let Ok(redir) = output {\n                    let flash_message: Flash<Redirect> = Flash::error( \n                        redir, \n                        &format!(\"The regular user {} has been logged out.  You cannot log in with two separate user accounts at once.\", \n                            &user_cookie.username\n                        )\n                    );\n                    // Log the regular user out\n                    // would use UserCookie::delete_cookie(cookies) but cookies already gets sent elsewhere\n                    cookies.remove_private( Cookie::named( UserCookie::cookie_id() ) );\n                    \n                    // the Err will still allow the cookies to get set to log the user in but will allow a message to be passed\n                    output = Err( flash_message );\n                }\n            }\n        }\n    }\n    \n    let end = start.0.elapsed();\n    // println!(\"Processed in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    output\n}\n\n// #[get(\"/admin_logout\")]\n#[get(\"/admin_logout\")]\npub fn hbs_logout_admin(admin: Option<AdministratorCookie>, mut cookies: Cookies) -> Result<Flash<Redirect>, Redirect> {\n    if let Some(_) = admin {\n        // cookies.remove_private(Cookie::named(AdministratorCookie::cookie_id()));\n        AdministratorCookie::delete_cookie(&mut cookies);\n        Ok(Flash::success(Redirect::to(\"/\"), \"Successfully logged out.\"))\n    } else {\n        Err(Redirect::to(\"/admin\"))\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n#[get(\"/user\", rank = 1)]\npub fn hbs_dashboard_user_authorized(start: GenTimer, conn: DbConn, admin: Option<AdministratorCookie>, user: UserCookie, flash_msg_opt: Option<FlashMessage>, encoding: AcceptCompression) -> Express {\n    // let start = Instant::now();\n    let flash = if let Some(flash) = flash_msg_opt {\n        Some( alert_warning(flash.msg()) )\n    } else {\n        None\n    };\n    \n    let output: Template = hbs_template(TemplateBody::General(format!(\"Welcome User {user}.  You are viewing the User dashboard page.\", user=user.username)), flash, Some(\"User Dashboard\".to_string()), String::from(\"/user\"), admin, Some(user), None, Some(start.0));\n    \n    let end = start.0.elapsed();\n    // println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    let express: Express = output.into();\n    express.compress(encoding)\n}\n\n// No longer needed - hbs_dhasboard_user_authorized handles flash messages\n#[get(\"/user\", rank = 2)]\npub fn hbs_dashboard_user_flash(start: GenTimer, conn: DbConn, admin: Option<AdministratorCookie>, flash_msg_opt: Option<FlashMessage>, encoding: AcceptCompression) -> Express {\n    // let start = Instant::now();\n    let output: Template;\n    \n    if let Some(flash_msg) = flash_msg_opt {\n        let flash = Some( alert_danger(flash_msg.msg()) );\n        output = hbs_template(TemplateBody::Login(USER_LOGIN_URL.to_string(), None), flash, Some(\"User Login\".to_string()), String::from(\"/user\"), admin, None, Some(\"set_login_focus();\".to_string()), Some(start.0));\n    } else {\n        output = hbs_template(TemplateBody::Login(USER_LOGIN_URL.to_string(), None), None, Some(\"User Login\".to_string()), String::from(\"/user\"), admin, None, Some(\"set_login_focus();\".to_string()), Some(start.0));\n    }\n    \n    let end = start.0.elapsed();\n    // println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    let express: Express = output.into();\n    express.compress(encoding)\n}\n\n\n// #[get(\"/user\", rank = 3)]\n// pub fn dashboard_user_login(conn: DbConn, admin: Option<AdministratorCookie>, encoding: AcceptCompression) -> Express {\n//     hbs_template(TemplateBody::Login(URL_LOGIN_USER.to_string(), None, None), Some(\"User Login\".to_string()), String::from(\"/user\"), admin, None, None, None)\n// }\n\n#[get(\"/user?<user>\")]\npub fn hbs_dashboard_user_retry_user(start: GenTimer, conn: DbConn, admin: Option<AdministratorCookie>, mut user: QueryUser, flash_msg_opt: Option<FlashMessage>, encoding: AcceptCompression) -> Express {\n    // let start = Instant::now();\n    // user = login::sanitization::sanitize(&user);\n    let username = if &user.user != \"\" { Some(user.user.clone() ) } else { None };\n    let flash = if let Some(f) = flash_msg_opt { Some(alert_danger(f.msg())) } else { None };\n    let output = hbs_template(TemplateBody::Login(USER_LOGIN_URL.to_string(), username), flash, Some(\"User Login\".to_string()), String::from(\"/user\"), admin, None, Some(\"set_login_focus();\".to_string()), Some(start.0));\n    \n    let end = start.0.elapsed();\n    println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    let express: Express = output.into();\n    express.compress(encoding)\n}\n\n#[allow(unused_mut)]\n#[post(\"/user\", data = \"<form>\")]\npub fn hbs_process_user_login(start: GenTimer, form: Form<LoginCont<UserForm>>, admin: Option<AdministratorCookie>, mut cookies: Cookies) -> Result<Redirect, Flash<Redirect>> {\n    // let start = Instant::now();\n    \n    let login: UserForm = form.get().form();\n    // let login: AdministratorForm = form.into_inner().form;\n    let mut output = login.flash_redirect(\"/user\", \"/user\", &mut cookies);\n    \n    if output.is_ok() {\n        if let Some(admin_cookie) = admin {\n            if &admin_cookie.username != &login.username {\n                if let Ok(redir) = output {\n                    let flash_message: Flash<Redirect> = Flash::error( \n                        redir, \n                        &format!(\"The administrator user {} has been logged out.  You cannot log in with two separate user accounts at once.\", \n                            &admin_cookie.username\n                        )\n                    );\n                    // Log the regular user out\n                    // would use UserCookie::delete_cookie(cookies) but cookies already gets sent elsewhere\n                    cookies.remove_private( Cookie::named( AdministratorCookie::cookie_id() ) );\n                    \n                    // the Err will still allow the cookies to get set to log the user in but will allow a message to be passed\n                    output = Err( flash_message );\n                }\n            }\n        }\n    }\n    \n    let end = start.0.elapsed();\n    println!(\"Processed in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    output\n}\n\n#[get(\"/user_logout\")]\npub fn hbs_logout_user(admin: Option<UserCookie>, mut cookies: Cookies) -> Result<Flash<Redirect>, Redirect> {\n    if let Some(_) = admin {\n        // cookies.remove_private(Cookie::named(UserCookie::cookie_id()));\n        UserCookie::delete_cookie(&mut cookies);\n        Ok(Flash::success(Redirect::to(\"/\"), \"Successfully logged out.\"))\n    } else {\n        Err(Redirect::to(\"/user\"))\n    }\n}\n\n\n\n\n\n\n\n\n\n\n// #[get(\"/view\")]\n// pub fn hbs_all_articles(start: GenTimer, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression) -> Express {\n//     // let start = Instant::now();\n//     let output: Template;\n//     let results = Article::retrieve_all(conn, 0, Some(300), None, None, None, None);\n    \n//     if results.len() != 0 {\n//         output = hbs_template(TemplateBody::Articles(results, None), Some(\"Viewing All Articles\".to_string()), String::from(\"/\"), admin, user, None, Some(start.0));\n//     } else {\n//         if admin.is_some() {\n//             output = hbs_template(TemplateBody::General(\"There are no articles<br>\\n<a href =\\\"/insert\\\">Create Article</a>\".to_string(), None), Some(\"Viewing All Articles\".to_string()), String::from(\"/\"), admin, user, None, Some(start.0));\n//         } else {\n//             output = hbs_template(TemplateBody::General(\"There are no articles.\".to_string(), None), Some(\"Viewing All Articles\".to_string()), String::from(\"/\"), admin, user, None, Some(start.0));\n//         }\n//     }\n    \n//     let end = start.0.elapsed();\n//     println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n//     let express: Express = output.into();\n//     express.compress(encoding)\n// }\n\n// #[get(\"/view?<page>\")]\n// pub fn hbs_articles_page(start: GenTimer, page: ViewPage, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression) -> Express {\n//     // let start = Instant::now();\n//     let results = Article::retrieve_all(conn, 0, Some(300), None, None, None, None);\n    \n//     // Todo: Change title to: Viewing Article Page x/z\n//     let output: Template = hbs_template(TemplateBody::General(\"You are viewing paginated articles.\".to_string(), None), Some(\"Viewing Articles\".to_string()), String::from(\"/\"), admin, user, None, Some(start.0));\n    \n//     let end = start.0.elapsed();\n//     println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n//     let express: Express = output.into();\n//     express.compress(encoding)\n// }\n\n\n#[get(\"/all_tags\")]\npub fn hbs_tags_all(start: GenTimer, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n    // let start = Instant::now();\n    \n    let qrystr = \"SELECT COUNT(*) as cnt, unnest(tag) as untag FROM articles GROUP BY untag ORDER BY cnt DESC;\";\n    let qry = conn.query(qrystr, &[]);\n    let mut tags: Vec<TagCount> = Vec::new();\n    if let Ok(result) = qry {\n        // let mut sizes: Vec<u16> = Vec::new();\n        for row in &result {\n            let c: i64 = row.get(0);\n            let c2: u32 = c as u32;\n            // sizes.push(c2 as u16);\n            let t: String = row.get(1);\n            let t2: String = t.trim_matches('\\'').to_string();\n            let tagcount = TagCount { \n                // tag: titlecase(t.trim_matches('\\'')), \n                url: t2.clone(), \n                tag: titlecase(&t2), \n                count: c2,\n                size: 0,\n            };\n            tags.push(tagcount);\n        }\n        if tags.len() > 4 {\n            if tags.len() > 7 {\n                let mut i = 0u16;\n                for mut v in &mut tags[0..6] {\n                    v.size = 6-i;\n                    i += 1;\n                }\n                \n            } else {\n                let mut i = 0u16;\n                for mut v in &mut tags[0..3] {\n                    v.size = (3-i)*2;\n                }\n            }\n            tags.sort_by(|a, b| a.tag.cmp(&b.tag));\n        }\n        \n    }\n    \n    let output: Template = hbs_template(TemplateBody::Tags(tags), None, Some(\"Viewing All Tags\".to_string()), String::from(\"/all_tags\"), admin, user, None, Some(start.0));\n    \n    let end = start.0.elapsed();\n    println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    let express: Express = output.into();\n    express.compress(encoding)\n}\n\n// // NOT USED ANYMORE?\n// // View paginated articles - pretty much just a test route\n// #[get(\"/view_articles\")]\n// pub fn hbs_view_articles(start: GenTimer, pagination: Page<Pagination>, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n//     \n//     let total_query = \"SELECT COUNT(*) as count FROM articles\";\n//     let output: Template;\n//     if let Ok(rst) = conn.query(total_query, &[]) {\n//         if !rst.is_empty() && rst.len() == 1 {\n//             let row = rst.get(0);\n//             let count: i64 = row.get(0);\n//             let total_items: u32 = count as u32;\n//             let (ipp, cur, num_pages) = pagination.page_data(total_items);\n//             // let sql = pagination.sql(\"SELECT a.aid, a.title, a.posted, a.body, a.tag, a.description, u.userid, u.display, u.username FROM articles a JOIN users u ON (a.author = u.userid)\", Some(\"posted DESC\"));\n//             let sql = pagination.sql(&format!(\"SELECT a.aid, a.title, a.posted, description({}, a.body, a.description) as body, a.tag, a.description, u.userid, u.display, u.username FROM articles a JOIN users u ON (a.author = u.userid)\", DESC_LIMIT), Some(\"posted DESC\"));\n//             println!(\"Prepared paginated query:\\n{}\", sql);\n//             if let Some(results) = conn.articles(&sql) {\n//                 // let results: Vec<Article> = conn.articles(&sql);\n//                 if results.len() != 0 {\n//                     let page_information = pagination.page_info(total_items);\n//                     output = hbs_template(TemplateBody::ArticlesPages(results, pagination, total_items, Some(page_information), None), Some(format!(\"Viewing All Articles - Page {} of {}\", cur, num_pages)), String::from(\"/view_articles\"), admin, user, None, Some(start.0));\n//                     let express: Express = output.into();\n//                     return express.compress( encoding );\n//                 }\n//             }\n//             // if let Ok(qry) = conn.query(sql, &[]) {\n//             //     if !qry.is_empty() && rst.len() != 0 {\n//                       \n//             //     }\n//             // }\n//         }\n//     }\n//    \n//     output = hbs_template(TemplateBody::General(alert_danger(\"Database query failed.\"), None), Some(\"Viewing All Articles\".to_string()), String::from(\"/view_articles\"), admin, user, None, Some(start.0));\n//     let express: Express = output.into();\n//     express.compress( encoding )\n// }\n\n#[get(\"/tag?<tag>\")]\npub fn hbs_articles_tag_redirect(tag: Tag) -> Redirect {\n    Redirect::to(&format!(\"/tag/{}\", tag.tag))\n}\n\n#[get(\"/tag/<tag>\")]\npub fn hbs_articles_tag(start: GenTimer, tag: String, pagination: Page<Pagination>, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n    \n    let output: Template;\n    \n    // let tag = \n    \n    // vtags - Vector of Tags - Vector<Tags>\n    let vtags = split_tags(tag.clone());\n    if vtags.len() == 0 {\n            output = hbs_template(TemplateBody::General(alert_danger(\"No tag specified.\")), None, Some(\"No Tag Specified\".to_string()), String::from(\"/tag\"), admin, user, None, Some(start.0));\n    } else {\n        let sql: String = if vtags.len() == 1 {\n            format!(\" WHERE '{}' = ANY(a.tag)\", sanitize_tag(&vtags[0]))\n        } else {\n            let mut tmp = String::with_capacity((vtags.len()*35) + 50);\n            // tmp.push_str(\" WHERE \");\n            tmp.push_str(\" WHERE '\");\n            tmp.push_str(&sanitize_tag(&vtags[0]));\n            tmp.push_str(\"' = ANY(a.tag)\");\n            // tmp.push_str(\"\");\n            \n            for t in &vtags[1..] {\n                tmp.push_str(\" AND '\");\n                tmp.push_str(&sanitize_tag(t));\n                tmp.push_str(\"' = ANY(a.tag)\");\n                // tmp.push_str(\"\");\n            }\n            tmp\n        };\n        \n        let mut countqrystr = String::with_capacity(sql.len() + 60);\n        countqrystr.push_str(\"SELECT COUNT(*) as count FROM articles a\");\n        countqrystr.push_str(&sql);\n        \n        let mut qrystr = String::with_capacity(sql.len() + 60);\n        qrystr.push_str(&format!(\"SELECT a.aid, a.title, a.posted, description({}, a.body, a.description) as body, a.tag, a.description, u.userid, u.display, u.username FROM articles a JOIN users u ON (a.author = u.userid)\", DESC_LIMIT));\n        qrystr.push_str(&sql);\n        \n        println!(\"\\nTag count query: {}\\nTag articles query: {}\\n\", countqrystr, qrystr);\n        \n        if let Ok(rst) = conn.query(&countqrystr, &[]) {\n            if !rst.is_empty() && rst.len() == 1 {\n                let countrow = rst.get(0);\n                let count: i64 = countrow.get(0);\n                let total_items: u32 = count as u32;\n                let (ipp, cur, num_pages) = pagination.page_data(total_items);\n                let pagesql = pagination.sql(&qrystr, Some(\"posted DESC\"));\n                println!(\"Tag pagination query:\\n{}\", pagesql);\n                if let Some(results) = conn.articles(&pagesql) {\n                    if results.len() != 0 {\n                        let page_information = pagination.page_info(total_items);\n                        output = hbs_template(TemplateBody::ArticlesPages(results, pagination, total_items, Some(page_information)), None, Some(format!(\"Viewing Tag {} - Page {} of {}\", tag, cur, num_pages)), String::from(\"/tag\"), admin, user, None, Some(start.0));\n                    } else {\n                        output = hbs_template(TemplateBody::General(alert_danger(\"No articles found with the specified tag.\")), None, Some(\"Tag\".to_string()), String::from(\"/tag\"), admin, user, None, Some(start.0));\n                    }\n                } else {\n                        output = hbs_template(TemplateBody::General(alert_danger(\"No articles found with the specified tag.\")), None, Some(\"Tag\".to_string()), String::from(\"/tag\"), admin, user, None, Some(start.0));\n                }\n            } else {\n                output = hbs_template(TemplateBody::General(alert_danger(\"No articles found with the specified tag.\")), None, Some(\"Tag\".to_string()), String::from(\"/tag\"), admin, user, None, Some(start.0));\n            }\n        } else {\n                output = hbs_template(TemplateBody::General(alert_danger(\"No articles found with the specified tag.\")), None, Some(\"Tag\".to_string()), String::from(\"/tag\"), admin, user, None, Some(start.0));\n        }\n    }\n    let express: Express = output.into();\n    express.compress( encoding )\n    \n    \n    \n    \n    \n    // let total_query = \"SELECT COUNT(*) as count FROM articles\";\n    // let output: Template;\n    // if let Ok(rst) = conn.query(total_query, &[]) {\n    //     if !rst.is_empty() && rst.len() == 1 {\n    //         let row = rst.get(0);\n    //         let count: i64 = row.get(0);\n    //         let total_items: u32 = count as u32;\n    //         let (ipp, cur, num_pages) = pagination.page_data(total_items);\n    //         // let sql = pagination.sql(\"SELECT a.aid, a.title, a.posted, a.body, a.tag, a.description, u.userid, u.display, u.username FROM articles a JOIN users u ON (a.author = u.userid)\", Some(\"posted DESC\"));\n    //         let sql = pagination.sql(&format!(\"SELECT a.aid, a.title, a.posted, description({}, a.body, a.description) as body, a.tag, a.description, u.userid, u.display, u.username FROM articles a JOIN users u ON (a.author = u.userid)\", DESC_LIMIT), Some(\"posted DESC\"));\n    //         println!(\"Prepared paginated query:\\n{}\", sql);\n    //         if let Some(results) = conn.articles(&sql) {\n    //             // let results: Vec<Article> = conn.articles(&sql);\n    //             if results.len() != 0 {\n    //                 let page_information = pagination.page_info(total_items);\n    //                 output = hbs_template(TemplateBody::ArticlesPages(results, pagination, total_items, Some(page_information), None), Some(format!(\"Viewing All Articles - Page {} of {}\", cur, num_pages)), String::from(\"/view_articles\"), admin, user, None, Some(start.0));\n    //                 let express: Express = output.into();\n    //                 return express.compress( encoding );\n    //             }\n    //         }\n    //         // if let Ok(qry) = conn.query(sql, &[]) {\n    //         //     if !qry.is_empty() && rst.len() != 0 {\n                    \n    //         //     }\n    //         // }\n    //     }\n    // }\n    \n    // output = hbs_template(TemplateBody::General(alert_danger(\"Database query failed.\"), None), Some(\"Viewing All Articles\".to_string()), String::from(\"/view_articles\"), admin, user, None, Some(start.0));\n    // let express: Express = output.into();\n    // express.compress( encoding )\n    \n    \n    // let output: Template;\n    // let tags = Some(split_tags(medium_sanitize(tag.tag.clone())));\n    // // limit, # body chars, min date, max date, tags, strings\n    // let results = Article::retrieve_all(conn, 0, Some(-1), None, None, tags, None);\n    // if results.len() != 0 {\n    //     output = hbs_template(TemplateBody::Articles(results, None), Some(format!(\"Viewing Articles with Tags: {}\", tag.tag)), String::from(\"/all_tags\"), admin, user, None, Some(start.0));\n    // } else {\n    //     output = hbs_template(TemplateBody::General(alert_danger(\"Could not find any articles with the specified tag.\"), None), Some(format!(\"Could not find any articles with the tag(s): {}\", medium_sanitize(tag.tag) )), String::from(\"/tag\"), admin, user, None, Some(start.0));\n    // }\n    \n    // let end = start.0.elapsed();\n    // println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    // let express: Express = output.into();\n    // express.compress(encoding)\n}\n\n#[get(\"/article/<aid>/<title>\")]\n\npub fn hbs_article_title(start: GenTimer, aid: ArticleId, title: Option<&RawStr>, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n    hbs_article_view(start, aid, conn, admin, user, encoding, uhits)\n}\n\n#[get(\"/article/<aid>\")]\npub fn hbs_article_id(start: GenTimer, aid: ArticleId, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n    hbs_article_view(start, aid, conn, admin, user, encoding, uhits)\n}\n\n#[get(\"/article?<aid>\")]\npub fn hbs_article_view(start: GenTimer, aid: ArticleId, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n    // let start = Instant::now();\n    let rst = aid.retrieve_with_conn(conn); // retrieve result\n    let mut output: Template; \n    if let Some(article) = rst {\n        let title = article.title.clone();\n        output = hbs_template(TemplateBody::Article(article), None, Some(title), String::from(\"/article\"), admin, user, Some(\"enable_toc(true);\".to_owned()), Some(start.0));\n    } else {\n        output = hbs_template(TemplateBody::General(alert_danger(&format!(\"Article {} not found.\", aid.aid))), None, Some(\"Article Not Found\".to_string()), String::from(\"/article\"), admin, user, None, Some(start.0));\n    }\n    let end = start.0.elapsed();\n    println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    let express: Express = output.into();\n    express.compress(encoding)\n}\n\n#[get(\"/article\")]\npub fn hbs_article_not_found(start: GenTimer, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n    // let start = Instant::now();\n    let output: Template = hbs_template(TemplateBody::General(alert_danger(\"Article not found\")), None, Some(\"Article not found\".to_string()), String::from(\"/article\"), admin, user, None, Some(start.0));\n    let end = start.0.elapsed();\n    println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    let express: Express = output.into();\n    express.compress(encoding)\n}\n\n#[post(\"/create\", data = \"<form>\")]\npub fn hbs_article_process(start: GenTimer, form: Form<ArticleForm>, conn: DbConn, admin: AdministratorCookie, user: Option<UserCookie>, encoding: AcceptCompression) -> Express {\n    // let start = Instant::now();\n    \n    let output: Template;\n    \n    let username = if let Some(ref display) = admin.display { display.clone() } else { titlecase(&admin.username) };\n    \n    let cr_options = ComrakOptions { ext_header_ids: Some(\"section-\".to_string()), .. COMRAK_OPTIONS };\n    \n    let mut article: ArticleForm = form.into_inner();\n    \n    if &article.body == \"\" && &article.markdown != \"\" {\n        let html: String = markdown_to_html(&article.markdown, &cr_options);\n        article.body = html;\n    }\n    \n    \n    let result = article.save(&conn, admin.userid, &username);\n    match result {\n        Ok(article) => {\n            // let article = articlesrc.to_article();\n            let title = article.title.clone();\n            output = hbs_template(TemplateBody::Article(article), None, Some(title), String::from(\"/create\"), Some(admin), user, None, Some(start.0));\n        },\n        Err(why) => {\n            output = hbs_template(TemplateBody::General(alert_danger(&format!(\"Could not post the submitted article.  Reason: {}\", why))), None, Some(\"Could not post article\".to_string()), String::from(\"/create\"), Some(admin), user, None, Some(start.0));\n        },\n    }\n    \n    let end = start.0.elapsed();\n    println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    let express: Express = output.into();\n    express.compress(encoding)\n}\n#[post(\"/create\", rank=2)]\npub fn hbs_create_unauthorized(start: GenTimer, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression) -> Express {\n    // let start = Instant::now();\n    // let output: Template = hbs_template(TemplateBody::General(alert_danger(UNAUTHORIZED_POST_MESSAGE)), None, Some(\"Not Authorized\".to_string()), String::from(\"/create\"), admin, user, None, Some(start.0));\n    \n    let mut loginmsg = String::with_capacity(300);\n        loginmsg.push_str(\"You are not logged in, please <a href=\\\"\");\n        loginmsg.push_str(BLOG_URL);\n        loginmsg.push_str(\"admin\");\n        loginmsg.push_str(\"\\\">Login</a>\");\n    \n    let output = hbs_template(TemplateBody::General(alert_danger(&loginmsg)), None, Some(\"Create\".to_string()), String::from(\"/create\"), None, user, None, Some(start.0));\n    \n    let end = start.0.elapsed();\n    println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    let express: Express = output.into();\n    express.compress(encoding)\n}\n\n#[get(\"/create\")]\npub fn hbs_create_form(start: GenTimer, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n    // let start = Instant::now();\n    \n    let output: Template;\n    if admin.is_some() {\n        output = hbs_template(TemplateBody::Create(CREATE_FORM_URL.to_string()), None, Some(\"Create New Article\".to_string()), String::from(\"/create\"), admin, user, None, Some(start.0));\n    } else {\n        output = hbs_template(TemplateBody::General(alert_danger(UNAUTHORIZED_POST_MESSAGE)), None, Some(\"Not Authorized\".to_string()), String::from(\"/create\"), admin, user, None, Some(start.0));\n    }\n    \n    let end = start.0.elapsed();\n    println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    let express: Express = output.into();\n    express.compress(encoding)\n}\n\n// #[get(\"/logout\")]\n// pub fn hbs_logout(admin: Option<AdministratorCookie>, user: Option<UserCookie>, mut cookies: Cookies) -> Result<Flash<Redirect>, Redirect> {\n//     use cookie_data::CookieId;\n//     if admin.is_some() || user.is_some() {\n//         if let Some(a) = admin {\n//             cookies.remove_private(Cookie::named(AdministratorCookie::get_cid()));\n//             // cookies.remove_private(Cookie::named(\"user_id\"));\n//         }\n//         if let Some(u) = user {\n//             cookies.remove_private(Cookie::named(UserCookie::get_cid()));\n//         }\n//         Ok(Flash::success(Redirect::to(\"/\"), \"Successfully logged out.\"))\n//     } else {\n//         Err(Redirect::to(\"/admin\"))\n//     }\n// }\n\n\n// Do a full-text search on the body and title fields\n//   on the tag field match each word against a tag,\n//   this will only match complete word matches\n//     research using array_to_tsvector() in the future\n// https://www.postgresql.org/docs/current/static/functions-textsearch.html\n\n// // NOT IMPLEMENTED YET\n// #[get(\"/search\")]\n// pub fn hbs_search_page(start: GenTimer, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n//     //show an advanced search form\n    \n//     let output: Template = hbs_template(TemplateBody::General(\"Search page not implemented yet.  Please use the search form in the top right corner of the page.\".to_string(), None), Some(\"Search\".to_string()), String::from(\"/search\"), admin, user, None, Some(start.0));\n//     let express: Express = output.into();\n//     express.compress(encoding)\n// }\n\n#[get(\"/search?<search>\")]\npub fn hbs_search_redirect(start: GenTimer, pagination: Page<Pagination>, search: Search, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression) -> Redirect {\n    // Add min/max date later, its not implemented in the search page anyways\n    // let min = if let Some(mi) = search.min {\n    //     format!(\"{}\", mi.0.format(\"%Y-%m-%d %H:%M:%S\"))\n    // } else {\n    //     String::new()\n    // };\n    // let max = if let Some(mi) = search.min {\n    //     format!(\"{}\", mi.0.format(\"%Y-%m-%d %H:%M:%S\"))\n    // } else {\n    //     String::new()\n    // };\n    if let Some(q) = search.q {\n        Redirect::to( &format!( \"/search/{}\", q ) )\n    } else {\n        Redirect::to( \"/search\" )\n    }\n}\n\n#[get(\"/search/<searchstr>\")]\npub fn hbs_search_results(start: GenTimer, pagination: Page<Pagination>, searchstr: String, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n    \n    let search = Search {\n        limit: None,\n        o: None,\n        p: None,\n        q: Some(searchstr),\n        min: None,\n        max: None,\n    };\n    \n    /*\n        SELECT  \n            a.aid, \n            a.title, \n            a.posted,\n            a.tag, \n            ts_rank(a.fulltxt, fqry, 32) AS rank, \n            ts_headline('pg_catalog.english', a.body, fqry, 'StartSel = \"<mark>\", StopSel = \"</mark>\"') AS body\n        FROM \n            articles a, \n            plainto_tsquery('pg_catalog.english', 'handlebars or hello') fqry\n        WHERE \n            fqry @@ a.fulltxt\n                OR\n            'cool' = ANY(a.tag)\n                AND\n            a.posted > '2017-01-01'\n                AND\n            a.posted < '2018-01-01'\n        ORDER BY \n            rank DESC\n        LIMIT 20\n    */\n    \n    // full-text search: title, description, body\n    // entirety match 'each word' = ANY(tag)\n    \n    println!(\"Search parameters:\\n{:?}\", search);\n    \n    let mut countqry = String::with_capacity(750);\n    let mut qrystr = String::with_capacity(750);\n    // aid title posted body tag description userid display\n    \n    // New Query:\n    qrystr.push_str(r#\"\nSELECT a.aid, a.title, a.posted, \n    ts_headline('pg_catalog.english', a.body, fqry, 'StartSel = \"<mark>\", StopSel = \"</mark>\"') AS body, \n    a.tag, a.description, u.userid, u.display, u.username, \n    ts_rank(a.fulltxt, fqry, 32) AS rank\nFROM articles a JOIN users u ON (a.author = u.userid),\n    plainto_tsquery('pg_catalog.english', '\"#);\n    \n// Old Query\n//     qrystr.push_str(r#\"\n// SELECT a.aid, a.title, a.posted, a.tag, ts_rank(a.fulltxt, fqry, 32) AS rank, ts_headline('pg_catalog.english', a.body, fqry, 'StartSel = \"<mark>\", StopSel = \"</mark>\"') AS body,\n//     u.userid, u.display, u.username\n// FROM articles a JOIN users u ON (a.author = u.userid),\n// plainto_tsquery('pg_catalog.english', '\"#);\n    \n    countqry.push_str(r##\"SELECT COUNT(*) FROM articles a, plainto_tsquery('pg_catalog.english', '\"##);\n    // ts_headline([ config regconfig, ] document text, query tsquery [, options text ]) returns text\n    // qrystr.push_str(r#\"SELECT ts_headline('english', body) FROM articles\"#);\n    \n    let mut wherestr = String::new();\n    let original = search.clone();\n    \n    let mut tags: Option<String> = None;\n    if let Some(mut q) = search.q {\n        if &q != \"\" {\n            // prevent attacks based on length and complexity of the sql query for full-text searches\n            if q.len() > 200 {\n                q = q[..200].to_string();\n            }\n            // WHERE to_tsvector('english', body) @@ to_tsquery('english', 'friend');\n            let sanitized = &sanitize_sql(q);\n            qrystr.push_str(sanitized);\n            countqry.push_str(sanitized);\n            // do a full-text search on title, description, and body fields\n            // for each word add: 'word' = ANY(tag)\n            let ts = sanitized.split(\" \").map(|s| format!(\"'{}' = ANY(a.tag)\", s)).collect::<Vec<_>>().join(\" OR \");\n            tags = if &ts != \"\" { Some(ts) } else { None };\n            // wherestr.push_str(&tags);\n        }\n    }\n    qrystr.push_str(\"') fqry WHERE fqry @@ a.fulltxt\");\n    countqry.push_str(\"') fqry WHERE fqry @@ a.fulltxt\");\n    \n    if let Some(t) = tags {\n        qrystr.push_str(\" OR \");\n        qrystr.push_str(&t);\n        countqry.push_str(\" OR \");\n        countqry.push_str(&t);\n    }\n    if let Some(min) = search.min {\n        // after min\n        qrystr.push_str(\" AND a.posted > '\");\n        qrystr.push_str(&format!(\"{}\", min.0.format(\"%Y-%m-%d %H:%M:%S\")));\n        qrystr.push_str(\"'\");\n        \n        countqry.push_str(\" AND a.posted > '\");\n        countqry.push_str(&format!(\"{}\", min.0.format(\"%Y-%m-%d %H:%M:%S\")));\n        countqry.push_str(\"'\");\n    }\n    if let Some(max) = search.max {\n        // before max\n        qrystr.push_str(\" AND a.posted < '\");\n        qrystr.push_str(&format!(\"{}\", max.0.format(\"%Y-%m-%d %H:%M:%S\")));\n        qrystr.push_str(\"'\");\n        \n        countqry.push_str(\" AND a.posted < '\");\n        countqry.push_str(&format!(\"{}\", max.0.format(\"%Y-%m-%d %H:%M:%S\")));\n        countqry.push_str(\"'\");\n    }\n    \n    // qrystr.push_str(\" ORDER BY rank DESC\");\n    // if let Some(limit) = search.limit {\n    //     // if str_is_numeric(limit) {\n    //     if limit <= 50 {\n    //         qrystr.push_str(&format!(\" LIMIT {}\", limit));\n    //         countqry.push_str(&format!(\" LIMIT {}\", limit));\n    //     } else {\n    //         qrystr.push_str(\" LIMIT 50\");\n    //         countqry.push_str(\" LIMIT 50\");\n    //     }\n    // } else {\n    //     qrystr.push_str(\" LIMIT 40\");\n    //     countqry.push_str(\" LIMIT 40\");\n    // }\n    \n    println!(\"Generated the following SQL Query:\\nCount:\\n{}\\n\\nSearch Query:\\n{}\", countqry, qrystr);\n    // println!(\"Generated the following SQL Query:\\n{}\", qrystr);\n    \n    let total_query = countqry;\n    let output: Template;\n    if let Ok(rst) = conn.query(&total_query, &[]) {\n        if !rst.is_empty() && rst.len() == 1 {\n            let row = rst.get(0);\n            let count: i64 = row.get(0);\n            let total_items: u32 = count as u32;\n            let (ipp, cur, num_pages) = pagination.page_data(total_items);\n            // let sql = pagination.sql(&format!(\"SELECT a.aid, a.title, a.posted, description({}, a.body, a.description) as body, a.tag, a.description, u.userid, u.display, u.username FROM articles a JOIN users u ON (a.author = u.userid)\", DESC_LIMIT), Some(\"posted DESC\"));\n            let sql = pagination.sql(&qrystr, Some(\"rank DESC\"));\n            println!(\"Prepared paginated query:\\n{}\", sql);\n            if let Some(results) = conn.articles(&sql) {\n                if results.len() != 0 {\n                    // let page_information = pagination.page_info(total_items);\n                    let pinfo = pagination.page_info(total_items);\n                    let welcome = r##\"<h1>Search Results</h1>\"##;\n                    \n                    let mut page_information = String::with_capacity(pinfo.len() + welcome.len() + 50);\n                    page_information.push_str(welcome);\n                    page_information.push_str(&pinfo);\n                    \n                    output = hbs_template(TemplateBody::ArticlesPages(results, pagination, total_items, Some(page_information)), None, Some(\"Search Results\".to_string()), String::from(\"/search\"), admin, user, None, Some(start.0));\n                    let express: Express = output.into();\n                    \n                    let end = start.0.elapsed();\n                    println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n                    \n                    return express.compress( encoding );\n                }\n            }\n        }\n    }\n    \n    output = hbs_template(TemplateBody::General(alert_danger(\"No articles to show.\")), None, Some(\"Search Results\".to_string()), String::from(\"/search\"), admin, user, None, Some(start.0));\n    let express: Express = output.into();\n    \n    let end = start.0.elapsed();\n    println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    \n    express.compress( encoding )\n    \n    // let mut articles: Vec<Article> = Vec::new();\n    // let qry = conn.query(&qrystr, &[]);\n    // let output: Template;\n    // if let Ok(result) = qry {\n    //     for row in &result {\n            \n    //         let display: Option<String> = row.get(7);\n    //         let username: String = if let Some(disp) = display { disp } else { row.get(8) };\n            \n    //         let a = Article {\n    //             aid: row.get(0),\n    //             title: row.get(1),\n    //             posted: row.get(2),\n    //             tags: row.get_opt(3).unwrap_or(Ok(Vec::<String>::new())).unwrap_or(Vec::<String>::new()),\n    //             body: row.get(5),\n    //             description: String::new(),\n    //             userid: row.get(6),\n    //             username: titlecase( &username ),\n    //         };\n    //         articles.push(a);\n    //     }\n    //     output = hbs_template(TemplateBody::Search(articles, Some(original), None), Some(\"Search Results\".to_string()), String::from(\"/search\"), admin, user, None, Some(start.0));\n    // } else {\n    //     println!(\"Query failed. Query: {}\", qrystr);\n    //     output = hbs_template(TemplateBody::General(alert_danger(\"No results were found.\"), None), Some(\"Search Results\".to_string()), String::from(\"/search\"), admin, user, None, Some(start.0));\n    // }\n    // let end = start.0.elapsed();\n    // println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    // let express: Express = output.into();\n    // express.compress(encoding)\n}\n\n// application/rss+xml\n#[get(\"/rss.xml\")]\n// EXPRESS X - pub fn rss_page(conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>) -> String {\npub fn rss_page(start: GenTimer, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n    use rss::{Channel, ChannelBuilder, Guid, GuidBuilder, Item, ItemBuilder, Category, CategoryBuilder, TextInput, TextInputBuilder, extension};\n    use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};\n    use urlencoding::encode;\n    \n    let rss: Express;\n    \n    let result = conn.articles(\"\");\n    if let Some(articles) = result {\n        let mut article_items: Vec<Item> = Vec::new();\n        for article in &articles {\n            let mut link = String::with_capacity(BLOG_URL.len()+20);\n            link.push_str(BLOG_URL);\n            // link.push_str(\"article?aid=\");\n            link.push_str(\"article/\");\n            link.push_str(&article.aid.to_string());\n            link.push_str(\"/\");\n            // let encoded = encode(\"This string will be URL encoded.\");\n            link.push_str( &encode(&article.title) );\n            \n            let desc: &str = if &article.description != \"\" {\n                &article.description\n            } else {\n                if article.body.len() > DESC_LIMIT {\n                    &article.body[..200]\n                } else {\n                    &article.body[..]\n                }\n            };\n            \n            let guid = GuidBuilder::default()\n                .value(link.clone())\n                .build()\n                .expect(\"Could not create article guid.\");\n            \n            let date_posted = DateTime::<Utc>::from_utc(article.posted, Utc).to_rfc2822();\n            \n            let item =ItemBuilder::default()\n                .title(article.title.clone())\n                .link(link)\n                .description(desc.to_string())\n                // .author(\"Andrew Prindle\".to_string())\n                .author(article.username.clone())\n                // .categories()\n                .guid(guid)\n                .pub_date(date_posted)\n                .build();\n                \n            match item {\n                Ok(i) => article_items.push(i),\n                Err(e) => println!(\"Could not create rss article {}.  Error: {}\", article.aid, e),\n            }\n        }\n        // Items:\n        // title    link    description author  categories  guid    pub_date\n        // Channels:\n        // title    link    description categories  language    copyright   rating  ttl\n        let mut search_link = String::with_capacity(BLOG_URL.len()+10);\n        search_link.push_str(BLOG_URL);\n        search_link.push_str(\"search\");\n        \n        let searchbox = TextInputBuilder::default()\n            .title(\"Search\")\n            .name(\"q\")\n            .description(\"Search articles\")\n            .link(search_link)\n            .build()\n            .expect(\"Could not create text input item in RSS channel.\");\n        \n        let channel = ChannelBuilder::default()\n            .title(\"Vishus Blog\")\n            .link(BLOG_URL)\n            .description(\"A programming and development blog about Rust, Javascript, and Web Development.\")\n            .language(\"en-us\".to_string())\n            .copyright(\"2017 Andrew Prindle\".to_string())\n            .ttl(720.to_string()) // half a day, 1440 minutes in a day\n            .items(article_items)\n            .text_input(searchbox)\n            .build()\n            .expect(\"Could not create RSS channel.\");\n        \n        let rss_output = channel.to_string();\n        let mut output = String::with_capacity(rss_output.len() + 30);\n        output.push_str(r#\"<?xml version=\"1.0\"?>\"#);\n        output.push_str(&rss_output);\n        \n        let express: Express = output.into();\n        rss = express.set_content_type(ContentType::XML).compress(encoding);\n            // set_ttl(-1)\n            // .add_extra(\"Content-Type\".to_string(), \"application/rss+xml\".to_string())\n    } else {\n        let output = String::from(\"Could not create RSS feed.\");\n        let express: Express = output.into();\n        // Do not need to compress output with such a small string.\n        // express.compress(encoding).set_content_type(ContentType::XML\n        rss = express;\n    }\n    \n    let end = start.0.elapsed();\n    println!(\"RSS Generated in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    rss\n}\n\n// #[get(\"/author/<authorid>/<authorname>\")]\n// pub fn hbs_author_display(start: GenTimer, authorid: u32, authorname: Option<String>, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression) -> Express {\n//     unimplemented!()\n    \n// }\n\n#[get(\"/author/<authorid>/<authorname>\")]\npub fn hbs_author_display(start: GenTimer, authorid: u32, pagination: Page<Pagination>, authorname: Option<&RawStr>, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n    hbs_author(start, authorid, pagination, conn, admin, user, encoding, uhits)\n}\n\n#[get(\"/author/<authorid>\")]\npub fn hbs_author(start: GenTimer, authorid: u32, pagination: Page<Pagination>, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n    // unimplemented!()\n    let output: Template;\n    \n    // let results = conn.articles( &format!(\"SELECT a.aid, a.title, a.posted, description({}, a.body, a.description), a.tag, a.description, u.userid, u.display, u.username FROM articles a JOIN users u ON (a.author = u.userid) WHERE userid = {}\", DESC_LIMIT, authorid) );\n    \n    // if let Some(articles) = results {\n    //     output = hbs_template(TemplateBody::Articles(articles, None), Some(\"Articles by Author\".to_string()), String::from(\"/author\"), admin, user, None, Some(start.0));\n    // } else {\n    //     output = hbs_template(TemplateBody::General(\"There are no articles by the specified user.\".to_string(), None), Some(\"Articles by Author\".to_string()), String::from(\"/author\"), admin, user, None, Some(start.0));\n    // }\n    \n    let total_query = format!(\"SELECT COUNT(*) AS count FROM articles WHERE author = {}\", authorid);\n    if let Ok(rst) = conn.query(&total_query, &[]) {\n        if !rst.is_empty() && rst.len() == 1 {\n            let row = rst.get(0);\n            let count: i64 = row.get(0);\n            let total_items: u32 = count as u32;\n            let (ipp, cur, num_pages) = pagination.page_data(total_items);\n            let sql = pagination.sql(&format!(\"SELECT a.aid, a.title, a.posted, description({}, a.body, a.description) as body, a.tag, a.description, u.userid, u.display, u.username FROM articles a JOIN users u ON (a.author = u.userid) WHERE a.author = {}\", DESC_LIMIT, authorid), Some(\"posted DESC\"));\n            println!(\"Prepared paginated query:\\n{}\", sql);\n            if let Some(results) = conn.articles(&sql) {\n                if results.len() != 0 {\n                    let page_information = pagination.page_info(total_items);\n                    \n                    output = hbs_template(TemplateBody::ArticlesPages(results, pagination, total_items, Some(page_information)), None, Some(\"Articles by Author\".to_string()), String::from(\"/author\"), admin, user, None, Some(start.0));\n                } else {\n                    output = hbs_template(TemplateBody::General(\"There are no articles by the specified user.\".to_string()), None, Some(\"Articles by Author\".to_string()), String::from(\"/author\"), admin, user, None, Some(start.0));\n                }\n            } else {\n                    output = hbs_template(TemplateBody::General(\"There are no articles by the specified user.\".to_string()), None, Some(\"Articles by Author\".to_string()), String::from(\"/author\"), admin, user, None, Some(start.0));\n            }\n        } else {\n            output = hbs_template(TemplateBody::General(\"There are no articles by the specified user.\".to_string()), None, Some(\"Articles by Author\".to_string()), String::from(\"/author\"), admin, user, None, Some(start.0));\n        }\n    } else {\n        output = hbs_template(TemplateBody::General(\"There are no articles by the specified user.\".to_string()), None, Some(\"Articles by Author\".to_string()), String::from(\"/author\"), admin, user, None, Some(start.0));\n    }\n    \n    let end = start.0.elapsed();\n    println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    let express: Express = output.into();\n    express.compress(encoding)\n}\n\n#[get(\"/about\")]\npub fn hbs_about(start: GenTimer, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n    // don't forget to put the start Instant in the hbs_template() function\n    let output = hbs_template(TemplateBody::General(\"This page is not implemented yet.  Soon it will tell a little about me.\".to_string()), None, Some(\"About Me\".to_string()), String::from(\"/about\"), admin, user, None, Some(start.0));\n    let express: Express = output.into();\n    express.compress(encoding)\n}\n\n\n#[get(\"/edit\", rank=2)]\npub fn hbs_edit_unauthorized(start: GenTimer, user: Option<UserCookie>, encoding: AcceptCompression) -> Express {\n    let mut loginmsg = String::with_capacity(300);\n        loginmsg.push_str(\"You are not logged in, please <a href=\\\"\");\n        loginmsg.push_str(BLOG_URL);\n        loginmsg.push_str(\"admin\");\n        loginmsg.push_str(\"\\\">Login</a>\");\n    \n    let output = hbs_template(TemplateBody::General(alert_danger(&loginmsg)), None, Some(\"Unauthorized\".to_string()), String::from(\"/edit\"), None, user, None, Some(start.0));\n    let express: Express = output.into();\n    express.compress( encoding )\n}\n\n#[get(\"/edit/<aid>\")]\npub fn hbs_edit(start: GenTimer, aid: u32, conn: DbConn, admin: AdministratorCookie, user: Option<UserCookie>, flash_opt: Option<FlashMessage>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n\n    // let options = ComrakOptions {\n    //     hardbreaks: true,            // \\n => <br>\\n\n    //     width: 120usize,             \n    //     github_pre_lang: false,      \n    //     ext_strikethrough: true,     // hello ~world~ person.\n    //     ext_tagfilter: true,         // filters out certain html tags\n    //     ext_table: true,             // | a | b |\\n|---|---|\\n| c | d |\n    //     ext_autolink: true,          \n    //     ext_tasklist: true,          // * [x] Done\\n* [ ] Not Done\n    //     ext_superscript: true,       // e = mc^2^\n    //     ext_header_ids: Some(\"section-\".to_string()),        // None / Some(\"some-id-prefix-\".to_string())\n    //     ext_footnotes: true,         // Hi[^x]\\n\\n[^x]: A footnote here\\n\n    // };\n    \n    // let html: String = markdown_to_html(text, &ComrakOptions::default());\n    // let html: String = markdown_to_html(text, &COMRAK_OPTIONS);\n    // html\n    \n    let flash = process_flash(flash_opt);\n    \n    let cr_options = ComrakOptions { ext_header_ids: Some(\"section-\".to_string()), .. COMRAK_OPTIONS };\n    \n    let output: Template;\n    let id = ArticleId::new(aid);\n    if let Some(mut article) = id.retrieve_with_conn(conn) {\n        // println!(\"Retrieved article info: {}\", article.info());\n        //\n        let title = article.title.clone();\n        \n        // If the body is empty that means the javascript did not process the Markdown into HTML\n        // so convert the Markdown into HTML using Rust and the Comrak crate \n        //      The Comrak crate is slower than the pulldown-cmark but more options\n        if &article.body == \"\" && &article.markdown != \"\" {\n            let html: String = markdown_to_html(&article.markdown, &cr_options);\n            article.body = html;\n        }\n        \n        output = hbs_template(TemplateBody::Edit(EDIT_FORM_URL.to_string(), article), flash, Some(format!(\"Editing '{}'\", title)), String::from(\"/edit\"), Some(admin), user, None, Some(start.0));\n        let express: Express = output.into();\n        return express.compress(encoding);\n    }\n    \n    // let qrystr = format!(\"a.aid, a.title, a.posted, a.body, a.tag, a.description, u.userid, u.display, u.username FROM articles a JOIN users u ON (a.author = u.userid) WHERE a.aid = {}\", aid);\n    // if let Some(articles) = conn.articles(&qrystr) {\n    //     if articles.len() == 1 {\n    //         let article = &articles[0];\n    //         output = hbs_template(TemplateBody::Edit(EDIT_FORM_URL.to_string(), *article, None), Some(format!(\"Editing '{}'\", &article.title)), String::from(\"/edit\"), admin, user, None, Some(start.0));\n    //         let express: Express = output.into();\n    //         return express.compress(encoding);\n    //     }\n    // }\n    output = hbs_template(TemplateBody::General(\"The reuqested article could not be found.\".to_string()), flash, Some(\"Edit\".to_string()), String::from(\"/edit\"), Some(admin), user, None, Some(start.0));\n    \n    let express: Express = output.into();\n    express.compress(encoding)\n}\n\n\n#[post(\"/edit\", data = \"<form>\")]\n// pub fn hbs_edit_process(start: GenTimer, form: Form<Article>, conn: DbConn, admin: AdministratorCookie, user: Option<UserCookie>, encoding: AcceptCompression) -> Flash<Redirect> {\npub fn hbs_edit_process(start: GenTimer, form: Form<ArticleWrapper>, conn: DbConn, admin: AdministratorCookie, encoding: AcceptCompression) -> Flash<Redirect> {\n    \n    let cr_options = ComrakOptions { ext_header_ids: Some(\"section-\".to_string()), .. COMRAK_OPTIONS };\n    \n    let wrapper: ArticleWrapper = form.into_inner();\n    let mut article: Article = wrapper.to_article();\n    \n    if &article.body == \"\" && &article.markdown != \"\" {\n        let html: String = markdown_to_html(&article.markdown, &cr_options);\n        article.body = html;\n    }\n    \n    // println!(\"Processing Article info: {}\", article.info());\n    let result = article.save(conn);\n    match result {\n        Ok(k) => {\n            Flash::success(Redirect::to(&format!(\"/edit/{}\", &article.aid)), &k)\n        },\n        Err(ref e) if e == \"\" => {\n            Flash::success(Redirect::to(&format!(\"/edit/{}\", &article.aid)), &e)\n            // Flash::error(Redirect::to(\"\"), \"\")\n        },\n        Err(e) => {\n            Flash::success(Redirect::to(&format!(\"/edit/{}\", &article.aid)), &e)\n            // Flash::error(Redirect::to(\"\"), \"\")\n        }\n    }\n    \n}\n\n#[get(\"/manage\", rank=2)]\npub fn hbs_manage_unauthorized(start: GenTimer, user: Option<UserCookie>, encoding: AcceptCompression) -> Express {\n    let mut loginmsg = String::with_capacity(300);\n        loginmsg.push_str(\"You are not logged in, please <a href=\\\"\");\n        loginmsg.push_str(BLOG_URL);\n        loginmsg.push_str(\"admin\");\n        loginmsg.push_str(\"\\\">Login</a>\");\n    \n    let output = hbs_template(TemplateBody::General(alert_danger(&loginmsg)), None, Some(\"Unauthorized\".to_string()), String::from(\"/manage\"), None, user, None, Some(start.0));\n    let express: Express = output.into();\n    express.compress( encoding )\n}\n\n\n#[get(\"/manage\")]\npub fn hbs_manage_basic(start: GenTimer, pagination: Page<Pagination>, conn: DbConn, admin: AdministratorCookie, user: Option<UserCookie>, flash: Option<FlashMessage>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n    hbs_manage_full(start, \"\".to_string(), \"\".to_string(), pagination, conn, admin, user, flash, encoding, uhits)\n}\n\n#[get(\"/manage/<sortstr>/<orderstr>\")]\npub fn hbs_manage_full(start: GenTimer, sortstr: String, orderstr: String, pagination: Page<Pagination>, conn: DbConn, admin: AdministratorCookie, user: Option<UserCookie>, flash: Option<FlashMessage>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n    \n    let output: Template;\n    \n    let fmsg: Option<String>;\n    if let Some(flashmsg) = flash {\n        if flashmsg.name() == \"error\" {\n            fmsg = Some(alert_danger( flashmsg.msg() ));\n        } else if flashmsg.name() == \"warning\" {\n            fmsg = Some(alert_warning( flashmsg.msg() ));\n        } else if flashmsg.name() == \"success\" {\n            fmsg = Some(alert_success( flashmsg.msg() ));\n        } else {\n            fmsg = Some(alert_info( flashmsg.msg() ));\n        }\n    }  else {\n        fmsg = None;\n    }\n    \n    let mut total_query = \"SELECT COUNT(*) AS count FROM articles\";\n    \n    // let mut querystr: String = \"SELECT a.aid, a.title, a.posted, description({}, a.body, a.description), a.tag, a.description, u.userid, u.display, u.username FROM articles a JOIN users u ON (a.author = u.userid)\".to_string();\n    let mut page_query = \"SELECT a.aid, a.title, a.posted, '' as body, a.tag, a.description, u.userid, u.display, u.username FROM articles a JOIN users u ON (a.author = u.userid)\";\n    \n    // let order_str = sortstr.to_lowercase();\n    let order = match sortstr.to_lowercase().as_ref() {\n        \"date\" if &orderstr == \"desc\" => \"posted DESC\",\n        \"date\" if &orderstr == \"asc\" => \"posted\",\n        \"date\" => \"posted DESC\",\n        \"title\" if &orderstr == \"desc\" => \"title DESC\",\n        \"title\" if &orderstr == \"asc\" => \"title\",\n        \"title\" => \"title\",\n        _ if &orderstr == \"desc\" => \"posted DESC\",\n        _ if &orderstr == \"asc\" => \"posted\",\n        _ => \"posted DESC\",\n    };\n    \n    let sort_options: Sort = match order {\n        \"posted DESC\" => Sort::Date(true),\n        \"posted\" => Sort::Date(false),\n        \"title\" => Sort::Title(false),\n        \"title DESC\" => Sort::Title(true),\n        _ => Sort::Date(true),\n    };\n    \n    if let Ok(rst) = conn.query(total_query, &[]) {\n        if !rst.is_empty() && rst.len() == 1 {\n            let countrow = rst.get(0);\n            let count: i64 = countrow.get(0);\n            let total_items: u32 = count as u32;\n            let (ipp, cur, num_pages) = pagination.page_data(total_items);\n            let pagesql = pagination.sql(page_query, Some(order));\n            println!(\"Manage paginated query: {}\", pagesql);\n            if let Some(results) = conn.articles(&pagesql) {\n                if results.len() != 0 {\n                    // let page_info = pagination.page_info(total_items);\n                    \n                    output = hbs_template(TemplateBody::Manage(results, pagination, total_items, sort_options), fmsg, Some(format!(\"Manage Articles - Page {} of {}\", cur, num_pages)), String::from(\"/manage\"), Some(admin), user, None, Some(start.0));\n                    \n                    let express: Express = output.into();\n                    return express.compress(encoding);\n                    \n                }\n            }\n            \n            \n        }\n    }\n    \n    output = hbs_template(TemplateBody::General(alert_danger(\"No articles found.\")), fmsg, Some(\"Manage Articles\".to_string()), String::from(\"/manage\"), Some(admin), user, None, Some(start.0));\n    \n    let express: Express = output.into();\n    express.compress(encoding)\n    \n}\n\n// #[get(\"/hit\")]\n// pub fn hit_count(uhits: UniqueHits) -> String {\n//     // let (page, count) = hits;\n//     let page = hits.0;\n//     let count = hits.1;\n//     let views = hits.2;\n//     format!(\"The page `{}` has {} page views.\\nTotal views: {}\", page, count, views)\n// }\n\n\n// #[get(\"/hit2\")]\n// pub fn hit_count2(uhits: UniqueHits) -> String {\n//     // let (page, count) = hits;\n//     let page = hits.0;\n//     let count = hits.1;\n//     let views = hits.2;\n//     format!(\"The page `{}` has {} page views.\\nTotal views: {}\", page, count, views)\n// }\n\n\n// #[get(\"/hit3\")]\n// pub fn hit_count3(uhits: UniqueHits) -> String {\n//     // let (page, count) = hits;\n//     let page = hits.0;\n//     let count = hits.1;\n//     let views = hits.2;\n//     format!(\"The page `{}` has {} page views.\\nTotal views: {}\", page, count, views)\n// }\n\n\n#[get(\"/delete\", rank=2)]\npub fn hbs_delete_unauthorized(start: GenTimer, user: Option<UserCookie>, encoding: AcceptCompression) -> Express {\n    let mut loginmsg = String::with_capacity(300);\n        loginmsg.push_str(\"You are not logged in, please <a href=\\\"\");\n        loginmsg.push_str(BLOG_URL);\n        loginmsg.push_str(\"admin\");\n        loginmsg.push_str(\"\\\">Login</a>\");\n    \n    let output = hbs_template(TemplateBody::General(alert_danger(&loginmsg)), None, Some(\"Unauthorized\".to_string()), String::from(\"/delete\"), None, user, None, Some(start.0));\n    let express: Express = output.into();\n    express.compress( encoding )\n}\n\n#[get(\"/delete/<aid>\")]\npub fn hbs_delete_confirm(start: GenTimer, aid: u32, conn: DbConn, admin: AdministratorCookie, user: Option<UserCookie>, encoding: AcceptCompression) -> Express {\n    \n    let confirm = alert_warning(&format!(r#\"\n        You are attempting to permanently delete an article, are you sure you want to continue?  \n        This action cannot be undone.\n        <form action=\"{}process_delete/{}\" method=\"post\" id=\"delete-form\">\n            <input type=\"hidden\" value=\"{}\" id=\"manage-page\">\n            <div class=\"v-centered-text\">\n                <button type=\"submit\" id=\"delete-button\" class=\"v-del-confirm btn btn-danger\">Delete</button>\n                <span class=\"v-spacer-del\"></span>\n                <button type=\"button\" id=\"delete-cancel\" class=\"v-del-cancel btn btn-warning\">Cancel</button>\n            </div>\n        </form>\n        \"#, BLOG_URL, aid, MANAGE_URL));\n    \n    let output = hbs_template(TemplateBody::General(confirm), None, Some(\"Delete Article\".to_string()), String::from(\"/delete\"), Some(admin), user, None, Some(start.0));\n    \n    let express: Express = output.into();\n    express.compress( encoding )\n}\n\n#[post(\"/process_delete/<aid>\")]\npub fn hbs_process_delete(aid: u32, conn: DbConn, admin: AdministratorCookie, user: Option<UserCookie>) -> Result<Flash<Redirect>, Redirect> {\n    let qrystr = format!(\"DELETE FROM articles WHERE aid = {}\", aid);\n    \n    println!(\"Delete query:\\n{}\\n\", &qrystr);\n    \n    if let Ok(num) = conn.execute(&qrystr, &[]) {\n        if num == 1 {\n            println!(\"Delete succeeded\");\n            Ok( Flash::success(Redirect::to(\"/manage\"), &format!(\"Article {} successfully deleted.\", aid)) )\n        } else if num == 0 {\n            println!(\"Delete failed - no articles deleted.\");\n            Ok( Flash::error(Redirect::to(\"/manage\"), &format!(\"Article {} was not deleted.\", aid)) )\n        } else {\n            println!(\"Delete failed - multiple articles deleted!\");\n            Ok( Flash::error(Redirect::to(\"/manage\"), &format!(\"A mistake occurred. Multiple articles ({} articles) appear to have been deleted.\", num)) )\n        }\n    } else {\n        println!(\"Delete failed.\");\n        Err( Redirect::to(\"/manage\") )\n    }\n}\n\n#[get(\"/backup\", rank=2)]\npub fn hbs_backup_unauthorized(start: GenTimer, user: Option<UserCookie>, encoding: AcceptCompression) -> Express {\n    let mut loginmsg = String::with_capacity(300);\n        loginmsg.push_str(\"You are not logged in, please <a href=\\\"\");\n        loginmsg.push_str(BLOG_URL);\n        loginmsg.push_str(\"admin\");\n        loginmsg.push_str(\"\\\">Login</a>\");\n    \n    let output = hbs_template(TemplateBody::General(alert_danger(&loginmsg)), None, Some(\"Unauthorized\".to_string()), String::from(\"/backup\"), None, user, None, Some(start.0));\n    let express: Express = output.into();\n    express.compress( encoding )\n}\n\n#[get(\"/backup\")]\npub fn backup(start: GenTimer, admin: AdministratorCookie, user: Option<UserCookie>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n    use std::process::Command;\n    use rocket::http::hyper::header::{Headers, ContentDisposition, DispositionType, DispositionParam, Charset};\n    \n    // \"C:\\Program Files\\PostgreSQL\\10\\bin\\pg_dump.exe\"\n    /*\n    pg_dump --file \"db_backup-2.sql\" --format=p --no-owner --create \n        --no-privileges --inserts --column-inserts \n        --dbname=\"postgres://vishus:Mutex7892@localhost/blog\"\n    */ /*\n     \"C:\\Program Files\\PostgreSQL\\10\\bin\\pg_dump.exe\" \n         --file \"db_backup-testy.sql\" --format=p --no-owner \n         --create --no-privileges --inserts --column-inserts \n         --dbname=\"postgres://postgres:andrew@localhost/blog\"\n    */ /*\n        Content-Disposition: attachment; filename=\"MyFileName.ext\"\n        Content-Transfer-Encoding: binary\n        Content-Length: \n    */\n    \n    let constr = format!(\"--dbname=\\\"{}\\\"\", DATABASE_URL);\n    \n    #[cfg(not(production))]\n    let output_rst = Command::new(DB_BACKUP_SCRIPT).output();\n    #[cfg(production)]\n    let output_rst = Command::new(DB_BACKUP_SCRIPT)\n        .arg(DB_BACKUP_ARG)\n        .output();\n    \n    if let Ok(output) = output_rst {\n        let now = Local::now().naive_local();\n        let today = now.date();\n        \n        let dl_name = now.format(\"db_blog_%Y-%m-%d.sql\").to_string();\n        \n        let disposition = ContentDisposition {\n            disposition: DispositionType::Attachment,\n            parameters: vec![DispositionParam::Filename(\n              Charset::Iso_8859_1, // The character set for the bytes of the filename\n              None, // The optional language tag (see `language-tag` crate)\n                dl_name.into_bytes() // b\"db_blog-\".to_vec() // the actual bytes of the filename\n            )]\n        };\n        \n        let backup = String::from_utf8_lossy(&output.stdout).into_owned();\n        let length = backup.len();\n        println!(\"Backup succeeded with a length of {} bytes\", length);\n        let express: Express = backup.into();\n        express.set_content_type(ContentType::Binary)\n                .add_header(disposition)\n    } else {\n        let output = hbs_template(TemplateBody::General(alert_danger(\"Backup failed.\")), None, Some(\"Backup Failed\".to_string()), String::from(\"/backup\"), Some(admin), user, None, Some(start.0));\n        \n        let express: Express = output.into();\n        express.compress(encoding)\n    }\n}\n\n#[get(\"/pageviews\", rank=2)]\npub fn hbs_pageviews_unauthorized(start: GenTimer, user: Option<UserCookie>, encoding: AcceptCompression) -> Express {\n    let mut loginmsg = String::with_capacity(300);\n        loginmsg.push_str(\"You are not logged in, please <a href=\\\"\");\n        loginmsg.push_str(BLOG_URL);\n        loginmsg.push_str(\"admin\");\n        loginmsg.push_str(\"\\\">Login</a>\");\n    \n    let output = hbs_template(TemplateBody::General(alert_danger(&loginmsg)), None, Some(\"Unauthorized\".to_string()), String::from(\"/pageviews\"), None, user, None, Some(start.0));\n    let express: Express = output.into();\n    express.compress( encoding )\n}\n\n#[get(\"/pageviews\")]\npub fn hbs_pageviews(start: GenTimer, admin: AdministratorCookie, user: Option<UserCookie>, encoding: AcceptCompression, uhits: UniqueHits, stats: State<Counter>) -> Express {\n    use urlencoding::decode;\n    use htmlescape::*;\n    \n    let output: Template;\n    let lockstats = stats.stats.lock();\n    // if let \n    if let Ok(counter) = lockstats {\n        \n        let statistics: Vec<String> = counter.map.iter()\n            .map(|(n, v)| \n                format!(r#\"<div class=\"v-stats row\"><div class=\"v-stats-page col\">{}</div><div class=\"v-stats-hits col-auto\">{}</div></div>\"#, \n                    encode_minimal(&decode(n).unwrap_or(String::new())), v))\n            .collect();\n        \n        \n        let pages = statistics.join(\"\\n\");\n        let mut page: String = String::with_capacity(pages.len() + 250);\n        page.push_str(r#\"<div class=\"v-stats-container-totals container\"><div class=\"v-stats v-stats-total row\"><div class=\"v-stats-page col\"><i class=\"fa fa-bar-chart\" aria-hidden=\"true\"></i> Total Hits</div><div class=\"v-stats-hits col-auto\">\"#);\n        // page.push_str(&hits.2.to_string());\n        page.push_str(&((&uhits.0).2.to_string()));\n        page.push_str(r#\"</div></div></div><div class=\"v-stats-container container\">\"#);\n        page.push_str(&pages);\n        page.push_str(r#\"</div>\"#);\n        \n        output = hbs_template(TemplateBody::General(page), None, Some(\"Page Views\".to_string()), String::from(\"/pageviews\"), Some(admin), user, None, Some(start.0));\n    } else {\n        output = hbs_template(TemplateBody::General(alert_danger(\"Could not retrieve page statistics.<br>Failed to acquire mutex lock.\")), None, Some(\"Page Views\".to_string()), String::from(\"/pageviews\"), Some(admin), user, None, Some(start.0));\n    }\n    \n    let express: Express = output.into();\n    express.compress(encoding)\n    \n}\n\n\n\n#[get(\"/\")]\npub fn hbs_index(start: GenTimer, pagination: Page<Pagination>, conn: DbConn, admin: Option<AdministratorCookie>, user: Option<UserCookie>, flash: Option<FlashMessage>, encoding: AcceptCompression, uhits: UniqueHits) -> Express {\n    \n    // println!(\"Unique hits:\\n\\tRoute: {}\\n\\tIP Address: {}\\n\\tVisits: {}\\n\\tUnique Visitors: {}\\n\", &uhits.0, &uhits.1, &uhits.2, &uhits.3);\n    \n    let fmsg: Option<String>;\n    if let Some(flashmsg) = flash {\n        fmsg = Some(alert_info( flashmsg.msg() ));\n    } else {\n        fmsg = None;\n    }\n    \n    \n    \n    let total_query = \"SELECT COUNT(*) AS count FROM articles\";\n    let output: Template;\n    if let Ok(rst) = conn.query(total_query, &[]) {\n        if !rst.is_empty() && rst.len() == 1 {\n            let row = rst.get(0);\n            let count: i64 = row.get(0);\n            let total_items: u32 = count as u32;\n            let (ipp, cur, num_pages) = pagination.page_data(total_items);\n            let sql = pagination.sql(&format!(\"SELECT a.aid, a.title, a.posted, description({}, a.body, a.description) as body, a.tag, a.description, u.userid, u.display, u.username FROM articles a JOIN users u ON (a.author = u.userid)\", DESC_LIMIT), Some(\"posted DESC\"));\n            println!(\"Prepared paginated query:\\n{}\", sql);\n            if let Some(results) = conn.articles(&sql) {\n                if results.len() != 0 {\n                    // let page_information = pagination.page_info(total_items);\n                    let mut page_information: String;\n                    let pinfo = pagination.page_info(total_items);\n                    if cur == 1 {\n                        // r##\"background: rgba(0, 0, 0, 0) url(\"http://localhost:8000/assets/welcome.png\") no-repeat scroll center center;\"##\n                        /*let welcome = format!(r##\"<h1 style=\"text-align: center; background: #212529 url('{}assets/welcome.png') no-repeat scroll center center;\">Welcome</h1>\n                            <p>This is the personal blog of Andrew Prindle.  My recent topics of interest include:\n                             the Rust programming language, web development, javascript, databases, cryptology, security, and compression.  \n                             Feel free to contact me at the email address at the bottom of the page.</p>\n                             <hr>\n                             \"##, BLOG_URL);*/\n                        let welcome = r##\"<h1 style=\"text-align: center;\">Welcome</h1>\n                            <p>This is the personal blog of Andrew Prindle.  My recent topics of interest include:\n                             the Rust programming language, web development, javascript, databases, cryptology, security, and compression.  \n                             Feel free to contact me at the email address at the bottom of the page.</p>\n                             <hr>\n                             \"##;\n                             // <h3>All Articles By Date</h3>\n                             // </div></div><div class=\"v-content\"><div class=\"v-pageinfo\">\n                        page_information = String::with_capacity(pinfo.len() + welcome.len() + 50);\n                        page_information.push_str( welcome );\n                        page_information.push_str( &pinfo );\n                    } else {\n                        // page_information = pagination.page_info(total_items);\n                        // page_information = String::with_capacity(pinfo.len() + 50);\n                        let welcome = r##\"<h1 style=\"text-align: center;\">Articles By Date</h1>\n                        \"##;\n                        /*let welcome = format!(r##\"</*h1*/ style=\"text-align: center; background: #212529 url('{}assets/welcome.png') no-repeat scroll center center;\">Articles By Date</h1>\n                        \"##, BLOG_URL);*/\n                        page_information = String::with_capacity(pinfo.len() + welcome.len() + 50);\n                        page_information.push_str( welcome );\n                        page_information.push_str( &pinfo );\n                    }\n                    \n                    output = hbs_template(TemplateBody::ArticlesPages(results, pagination, total_items, Some(page_information)), fmsg, None, String::from(\"/\"), admin, user, None, Some(start.0));\n                    let express: Express = output.into();\n                    \n                    let end = start.0.elapsed();\n                    println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n                    \n                    return express.compress( encoding );\n                }\n            }\n        }\n    }\n    \n    output = hbs_template(TemplateBody::General(alert_danger(\"No articles to show.\")), fmsg, None, String::from(\"/\"), admin, user, None, Some(start.0));\n    let express: Express = output.into();\n    \n    let end = start.0.elapsed();\n    println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    \n    express.compress( encoding )\n    \n    // let output: Template;\n    // let fmsg: Option<String>;\n    // if let Some(flashmsg) = flash {\n    //     fmsg = Some(alert_info( flashmsg.msg() ));\n    // } else {\n    //     fmsg = None;\n    // }\n    // let results = Article::retrieve_all(conn, 0, Some(300), None, None, None, None);\n    // if results.len() != 0 {\n    //     output = hbs_template(TemplateBody::Articles(results, fmsg), None, String::from(\"/\"), admin, user, None, Some(start.0));\n    // } else if admin.is_some() {\n    //     output = hbs_template(TemplateBody::General(\"There are no articles.<br>\\n<a href =\\\"/insert\\\">Create Article</a>\".to_string(), None), None, String::from(\"/\"), admin, user, None, Some(start.0));\n    // } else {\n    //     output = hbs_template(TemplateBody::General(\"There are no articles.\".to_string(), None), None, String::from(\"/\"), admin, user, None, Some(start.0));\n    // }\n    \n    // // let end = start.0.elapsed();\n    // let end = start.0.elapsed();\n    // println!(\"Served in {}.{:09} seconds\", end.as_secs(), end.subsec_nanos());\n    // let express: Express = output.into();\n    // express.compress(encoding)\n}\n\n\n",
			"settings":
			{
				"buffer_size": 96152,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/docs/vs code theme in progress - colors.txt",
			"settings":
			{
				"buffer_size": 2250,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/pages-before-comment-out-prints.rs",
			"settings":
			{
				"buffer_size": 96104,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/create-template.html.hbs",
			"settings":
			{
				"buffer_size": 12610,
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/edit-article-template.html.hbs",
			"settings":
			{
				"buffer_size": 13790,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/general-template.html.hbs",
			"settings":
			{
				"buffer_size": 147,
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/manage-pagination-template.html.hbs",
			"settings":
			{
				"buffer_size": 5585,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/lang/Rust/proj/rocket-auth-login/examples/database_example/src/layout.rs",
			"settings":
			{
				"buffer_size": 11695,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/lang/Rust/code/Snippets/Snippet Collection.rs",
			"settings":
			{
				"buffer_size": 34688,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"font",
				"Set Syntax: Font"
			],
			[
				"package",
				"Package Control: List Packages"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"snippet",
				"Snippet: Import"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"package ",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Enable Package"
			]
		],
		"width": 444.0
	},
	"console":
	{
		"height": 162.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/laragon/bin/laragon/utils/hosts.js",
		"/C/Users/Andrew/AppData/Roaming/Sublime Text 3/Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
		"/C/code/lang/Rust/proj/blogr/src/pages.rs",
		"/C/Users/Andrew/.vscode/extensions/vishus-vivid-0-21/themes/Vishus Vivid 0.21.tmTheme",
		"/C/Users/Andrew/.vscode/extensions/vishus-vivid-0-21/themes/Vishus vivid 9.21-color-theme.json",
		"/d/docs/vs code theme example.json",
		"/C/Users/Andrew/AppData/Roaming/Sublime Text 3/Packages/User/Custom-Themes/RustCustom-3.tmTheme",
		"/C/Users/Andrew/AppData/Roaming/Sublime Text 3/Packages/User/Custom-Themes/gooey.tmTheme",
		"/d/docs/vs code vishus theme colors.txt",
		"/D/downloads-http/page_stats(4).json",
		"/D/downloads-http/unique_stats(2).json",
		"/D/downloads-http/page_stats.json",
		"/D/downloads-http/unique_stats.json",
		"/C/code/lang/Rust/proj/blogr/logs/total_views.json",
		"/C/code/lang/Rust/proj/blogr/templates/pagestats.html.hbs",
		"/C/code/lang/Rust/proj/blogr/static/packages/js/after/blog_after.js",
		"/C/code/lang/Rust/proj/blogr/logs/unique_stats.json",
		"/C/code/lang/Rust/proj/blogr/templates/page-template.html.hbs",
		"/C/code/lang/Rust/proj/blogr/.git/config",
		"/C/code/lang/Rust/proj/rocket-auth-login/src/authorization.rs",
		"/D/Backups/blogr-backups/blog-server-before-xfering-working-static-pages/build.sh",
		"/D/Backups/blogr-backups/blog-server-before-xfering-working-static-pages/production.sh",
		"/D/Backups/blogr-backups/blog-server-before-xfering-working-static-pages/run.sh",
		"/C/code/lang/Rust/proj/mdtest/src/main.rs",
		"/C/code/lang/Rust/proj/blogr/static/packages/css/packages-css.bat",
		"/C/code/lang/Rust/proj/blogr/static/assets/blog-1.0.2.css",
		"/C/code/lang/Rust/proj/blogr/static/packages/js/before/blog.js",
		"/C/code/lang/Rust/proj/blogr/static/assets/before-1.0.5.js",
		"/C/code/lang/Rust/proj/blogr/static/packages/js/before/blog.min.js",
		"/C/code/lang/Rust/proj/blogr/static/packages/js/before/packages-before.bat",
		"/C/code/lang/Rust/proj/blogr/static/assets/blog-1.0.5.css",
		"/C/code/lang/Rust/proj/blogr/static/packages/css/blog-current.css",
		"/C/code/lang/Rust/proj/blogr/static/assets/blog-1.0.7.css",
		"/C/code/lang/Rust/proj/blogr/static/packages/css/blogr-input.min.css",
		"/C/code/lang/Rust/proj/blogr/static/assets/blog-1.0.3.css",
		"/C/code/lang/Rust/proj/blogr/static/css/blogr.css",
		"/C/code/articles/Articles/Rust Web Apps Using Rocket/counter.rs",
		"/C/code/articles/Articles/Rust Web Apps Using Rocket/accept.rs",
		"/C/code/articles/Articles/Rust Web Apps Using Rocket/xpress.rs",
		"/C/code/articles/Articles/Rust Web Apps Using Rocket/templates.rs",
		"/C/code/articles/Articles/VPS for Rust/Cargo.toml",
		"/C/code/articles/Articles/Rust Web Apps Using Rocket/collate.rs",
		"/C/code/lang/Rust/proj/entropy2/src/main.rs",
		"/C/code/lang/Rust/proj/blogr/.gitignore",
		"/d/docs/settings.rs",
		"/C/code/lang/Rust/proj/blogr/pages/counter.rs",
		"/C/code/lang/Rust/proj/blogr/.git/index",
		"/C/code/lang/Rust/proj/blogr/.git/HEAD",
		"/C/code/lang/Rust/proj/blogr/.git/hooks/README.sample",
		"/C/code/lang/Rust/proj/blogr/.git/COMMIT_EDITMSG",
		"/C/code/lang/Rust/proj/blogr/.git/aurees.settings",
		"/C/code/lang/Rust/proj/blogr/.git/description",
		"/C/code/lang/Rust/proj/blogr/src/settings.rs",
		"/C/code/lang/Rust/proj/blogr/pages/about.page",
		"/C/code/lang/Rust/proj/blogr/static/packages/js/before/highlight.pack.js",
		"/C/code/lang/Rust/proj/blogr/static/packages/css/blogr-2018-02-25.css",
		"/C/code/lang/Rust/proj/blogr/static/packages/css/blogr-2018-03-04.css",
		"/C/code/lang/Rust/proj/blogr/static/packages/js/after/blog_after-2018-03-04.js",
		"/C/code/lang/Rust/proj/blogr/static/packages/js/after/blog_after-2018-03-04.min.js",
		"/C/code/lang/Rust/proj/blogr/static/packages/js/before/toc.jquery.min.js",
		"/D/Backups/blogr-backups/blog-server-before-xfering-working-static-pages/pre-src/Cargo.toml",
		"/C/code/lang/Rust/proj/blogr/static/packages/js/before/toc.min.js",
		"/C/code/lang/Rust/proj/blogr/static/packages/css/toast.min.css",
		"/C/code/lang/Rust/proj/blogr/static/packages/js/before/toast.min.js",
		"/C/code/lang/Rust/proj/blogr/static/assets/after-1.0.3.js",
		"/C/code/lang/Rust/proj/blogr/static/packages/js/after/blog_after-2018-03-02.js",
		"/C/code/lang/Rust/proj/blogr/static/assets/before-1.0.2.js",
		"/C/code/articles/Articles/Rust Web Apps Using Rocket/rocket-dbconn-example.rs",
		"/C/code/lang/Rust/proj/blogr/templates/login-template.html.hbs",
		"/C/code/lang/Rust/proj/blogr/templates/common/footer-http2.html.hbs",
		"/C/code/articles/Articles/Rust Web Apps Using Rocket/database.rs",
		"/C/code/articles/Articles/Rust Web Apps Using Rocket/login.rs",
		"/C/code/lang/Rust/proj/blogr/templates/common/header-http2.html.hbs",
		"/C/code/lang/Rust/proj/blogr/static/packages/js/after/blog_after-2018-01-12.js",
		"/C/code/lang/Rust/proj/blogr/static/assets/after-1.0.2.js",
		"/C/code/lang/Rust/proj/blogr/static/packages/css/blogr.min.js",
		"/C/code/lang/Rust/proj/blogr/static/css/blogr-2018-02-25.css",
		"/C/code/lang/Rust/proj/blogr/static/packages/css/toc-scroll.mins.css",
		"/C/code/lang/Rust/proj/blogr/static/packages/css/toc.min.css",
		"/C/code/lang/Rust/proj/blogr/static/packages/js/before/jgrowl.min.js",
		"/C/code/lang/Rust/proj/blogr/static/packages/css/jgrowl.min.css",
		"/C/code/lang/Rust/proj/blogr/src/toc.rs",
		"/C/code/lang/Rust/proj/blogr/target/debug/deps/aho_corasick-e1c21f724cd3120d.d",
		"/D/Backups/blogr-backups/blog-after-static-pages-with-menus/Cargo.toml",
		"/C/code/lang/Rust/proj/blogr/static/assets/before-1.0.1.js",
		"/C/code/lang/Rust/proj/blogr/static/assets/blog-1.0.1.css",
		"/C/code/lang/Rust/proj/blogr/static/packages/js/after/blog_after-2018-03-02.min..js",
		"/C/code/lang/Rust/proj/blogr/static/packages/css/blogr.min.css",
		"/C/code/lang/Rust/proj/blogr/static/packages/css/blog-css.min.css",
		"/D/downloads-http/accept(1).rs",
		"/C/code/lang/Rust/proj/blogr/templates/common/header.html.hbs",
		"/D/downloads-http/accept.rs",
		"/D/Backups/blogr-backups/blog-after-static-pages-with-menus/Rocket.toml",
		"/C/code/lang/Rust/proj/blogr/src/static_pages.rs",
		"/C/code/lang/Rust/proj/blogr/static/assets/css/blogr.min.css",
		"/C/code/lang/Rust/proj/blogr/static/blog_after-2018-01-12.js",
		"/C/code/lang/Rust/proj/blogr/static/css/blogr-2018-01-12.css",
		"/C/Users/Andrew/AppData/Local/Temp/7zE0253BF6D/main.rs",
		"/C/code/lang/Rust/proj/blogr/templates/common/page-template.html.hbs",
		"/C/code/lang/Rust/proj/blogr/static/assets/css/blogr.css",
		"/C/code/lang/Rust/proj/blogr/static/assets/js/blog_after.js",
		"/C/code/lang/Rust/proj/blogr/static/assets/js/blog-after.1.0.0.min.js",
		"/C/code/lang/Rust/proj/blogr/static/assets/js/blog.js",
		"/C/code/lang/Rust/proj/blogr/static/assets/js/blog-before.1.0.0.min.js",
		"/C/code/lang/Rust/proj/blogr/static/assets/css/blogr.1.0.0.css",
		"/D/Backups/Project Backups/blogr-post-article-images/src/main.rs",
		"/D/Backups/Project Backups/blogr-mid-late-handlebars-conversion/src/main.rs",
		"/C/code/lang/Rust/proj/blogr/src/xpress.rs",
		"/C/code/lang/Rust/proj/blogr/src/content",
		"/C/code/lang/Rust/proj/blogr/src/static.rs",
		"/C/code/lang/Rust/proj/blogr/src/settings - Copy.rs",
		"/C/code/lang/Rust/proj/yamltest/src/main.rs",
		"/C/code/lang/Rust/proj/blogr/templates/common/basic-template.html.hbs",
		"/C/code/lang/Rust/proj/blogr/templates/common/header-basic.html.hbs",
		"/C/code/lang/Rust/proj/blogr/static/uploads/RustCustom-3.tmTheme",
		"/C/code/lang/Rust/proj/blogr/src/ral_administrator.rs",
		"/C/code/lang/Rust/proj/blogr/src/hbs_templates.rs",
		"/C/code/lang/Rust/proj/blogr/static/assets/after-1.0.0.js",
		"/C/code/lang/Rust/proj/blogr/templates/common/footer.html.hbs",
		"/d/docs/lets encrypt  backup opt.txt",
		"/C/code/lang/Rust/proj/blogr/static/css/blogr-2018-01-11.css",
		"/C/code/lang/Rust/proj/blogr/static/css/blogr-2018-01-10.css",
		"/C/code/lang/Rust/proj/blogr/static/css/blogr-2018-01-08.css",
		"/C/code/lang/Rust/proj/blogr/static/css/blogr-2018-01-07.css",
		"/C/code/lang/Rust/proj/blogr/static/blog-2018-01-07.js",
		"/C/code/lang/Rust/proj/blogr/static/blog_after-2018-01-11.js",
		"/C/code/lang/Rust/proj/blogr/static/blog_after-2018-01-07.js",
		"/C/code/lang/Rust/proj/blogr/static/blogr_after-2018-01-12.js"
	],
	"find":
	{
		"height": 44.0
	},
	"find_in_files":
	{
		"height": 143.0,
		"where_history":
		[
			"C:\\code\\lang\\Rust\\proj\\blogr"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"#[a-fA-F0-9]{3,6}",
			"cmp",
			"markdown",
			"articlespages",
			"FF0095",
			">#",
			"38F6FF",
			"#FFA937",
			"FF3C37",
			"self",
			"space",
			"whitespace",
			"26292C",
			"35FF00",
			"38F6FF",
			"9b9b9b",
			"FF0095",
			"FF3C37",
			"99F200",
			"CD73FF",
			"3fd6ff",
			"D4B06A",
			"FF8500",
			"00E6AC",
			"00354a",
			"dafefd",
			"3FCAFF",
			"be0036",
			"FF0700",
			"FF0095",
			"FFA100",
			"FFDB00",
			"19f1c4",
			"fd6783",
			"FF0095",
			"99F200",
			"35FF00",
			"FF6F6B",
			"FF3C37",
			"FFA937",
			"/pagestats",
			"pagination",
			"to_display",
			"articlewrapper",
			"11",
			"ArticleWrapper",
			"ArticleForm",
			"\\n\\n",
			"logs",
			"\n#[",
			"stats",
			"print(?:ln)?",
			"capacity",
			"print(?:ln)?",
			"print(?:ln)?!",
			"ustats",
			"unique_lock",
			"pages",
			"unique hits",
			"save_return",
			"encoding, hits",
			"hits: Hits",
			"hits",
			", uhits: UniqueHits",
			"1",
			"3b3b90",
			"FF3C37",
			"3b3b90",
			"\"logs/page_stats.json\"",
			"\"logs/total_views.json\"",
			"HITS_SAVE_INTERVAL",
			"about",
			"reader",
			"unique",
			"new",
			"route",
			"console\\.log",
			"sizes",
			"create",
			"ContentCacheLock",
			"ntCacheLock",
			"ContentCacheLock",
			"850",
			"context_state",
			"ready",
			"fancybox",
			"argument",
			"arguments",
			"width",
			"center",
			"min-width",
			"hr",
			"ffffff10",
			"BASE_URL",
			"welcome",
			"nav",
			"navbar-dark",
			"nav-link",
			"navlink",
			"rgba",
			"navbar-nav",
			"v-am-item-posted",
			"pencil",
			"v-am-item-tag-divider",
			"justify",
			"\\.v-content",
			"pagination-ipp",
			"h1,h2,h3",
			"h1",
			"None",
			"        ",
			"post-toc",
			"None",
			"DEFAULT_PAGE_MENU",
			"None",
			"DEFAULT_PAGE_MENU",
			"v-content h1",
			"article-single",
			"h1",
			"v-article-content",
			"v-article-single",
			"853c01",
			"nothing",
			"code",
			"v-article-content",
			"arev.ttf",
			"asset",
			"assets/fonts"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"\\n",
			"check_save",
			"encoding, uhits",
			"uhits: UniqueHits",
			"",
			"HIT_COUNTER_LOG",
			"TOTAL_HITS_LOG",
			"\"TOTAL_HITS_LOG\"",
			"\\t",
			"<backup_name>",
			"\\t",
			"AdminForm",
			"AdminCookie",
			"&gt;",
			"&lt;",
			"to_owned"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/main.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8056,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1521615011.68
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 879.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/settings.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12097,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1521615011.68
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3719.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "pages/setup-vps.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11801,
						"regions":
						{
						},
						"selection":
						[
							[
								6488,
								6488
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 23,
							"color_helper.color_scheme": "Packages/Theme - Dark Material/schemes/Dark-Material-Markdown.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"hex",
									"webcolors",
									"rgba",
									"hsla",
									"hsl",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".md",
								"current_syntax": "Markdown/Markdown",
								"enabled": true,
								"last_updated": 1519614412.17,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2881.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/counter.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14203,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 19,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1521615011.68
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/content.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 43952,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1521615011.68
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 38.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Users/Andrew/.vscode/extensions/vishuscode/themes/vishuscode.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5970,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete": true,
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".json",
								"current_syntax": "JavaScript/JSON",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": false,
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 485.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/templates.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18365,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 22,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1529189577.02
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5199.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6235,
						"regions":
						{
						},
						"selection":
						[
							[
								635,
								635
							]
						],
						"settings":
						{
							"auto_indent": false,
							"color_helper.box_height": 22,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": null,
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1529189577.02
							},
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_width": 2,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1326,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								1326
							]
						],
						"settings":
						{
							"color_helper.box_height": 22,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": null,
								"current_syntax": "XML/XML",
								"enabled": false,
								"last_updated": 1529189577.02
							},
							"git_gutter_is_enabled": false,
							"syntax": "Packages/XML/XML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 9,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1303,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								1303
							]
						],
						"settings":
						{
							"auto_name": "#000000",
							"color_helper.box_height": 22,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": null,
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1529189577.02
							},
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1022.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 10,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5970,
						"regions":
						{
						},
						"selection":
						[
							[
								96,
								103
							],
							[
								136,
								143
							],
							[
								189,
								196
							],
							[
								239,
								246
							],
							[
								290,
								297
							],
							[
								348,
								355
							],
							[
								406,
								413
							],
							[
								456,
								463
							],
							[
								782,
								789
							],
							[
								999,
								1006
							],
							[
								1040,
								1047
							],
							[
								1248,
								1255
							],
							[
								1459,
								1466
							],
							[
								1500,
								1507
							],
							[
								1718,
								1725
							],
							[
								1967,
								1974
							],
							[
								2008,
								2015
							],
							[
								2221,
								2228
							],
							[
								2539,
								2546
							],
							[
								2747,
								2754
							],
							[
								2996,
								3003
							],
							[
								3216,
								3223
							],
							[
								3430,
								3437
							],
							[
								3693,
								3700
							],
							[
								3904,
								3911
							],
							[
								4127,
								4134
							],
							[
								4342,
								4349
							],
							[
								4779,
								4786
							],
							[
								5002,
								5009
							],
							[
								5267,
								5274
							],
							[
								5481,
								5488
							],
							[
								5715,
								5722
							],
							[
								5927,
								5934
							]
						],
						"settings":
						{
							"auto_name": "",
							"color_helper.box_height": 22,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": null,
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1529189577.02
							},
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 11,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 263,
						"regions":
						{
						},
						"selection":
						[
							[
								191,
								191
							]
						],
						"settings":
						{
							"auto_name": "#26292C",
							"color_helper.box_height": 22,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": null,
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1529189577.02
							},
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/blog.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40862,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1521615011.68
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/data.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6256,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1521615011.68
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 442.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/accept.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4997,
						"regions":
						{
						},
						"selection":
						[
							[
								3868,
								3875
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1832.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/collate.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16123,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1521615011.68
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 228.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "src/ral_administrator.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13598,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "src/ral_user.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13674,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7384.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "src/referrer.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 614,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "src/xpress.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11695,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3377.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "src/layout.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9115,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "Cargo.toml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2819,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".toml",
								"current_syntax": "Seti_UI/icons/Langs/font",
								"enabled": false,
								"last_updated": 1521615011.68
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Seti_UI/icons/Langs/font.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1188.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "src/private.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 215,
						"regions":
						{
						},
						"selection":
						[
							[
								215,
								1
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "src/location.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 671,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "src/sanitize.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3339,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 725.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "Rocket.toml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 635,
						"regions":
						{
						},
						"selection":
						[
							[
								517,
								517
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".toml",
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				}
			]
		},
		{
			"selected": 16,
			"sheets":
			[
				{
					"buffer": 26,
					"file": "/C/Users/Andrew/AppData/Roaming/Sublime Text 3/Packages/User/Custom-Themes/RustCustom-3.tmTheme",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42505,
						"regions":
						{
						},
						"selection":
						[
							[
								468,
								475
							],
							[
								542,
								549
							],
							[
								621,
								628
							],
							[
								700,
								707
							],
							[
								782,
								789
							],
							[
								860,
								867
							],
							[
								942,
								949
							],
							[
								1034,
								1041
							],
							[
								1118,
								1125
							],
							[
								1198,
								1205
							],
							[
								1287,
								1294
							],
							[
								1469,
								1476
							],
							[
								1985,
								1989
							],
							[
								2352,
								2359
							],
							[
								2737,
								2744
							],
							[
								3070,
								3077
							],
							[
								3424,
								3431
							],
							[
								3769,
								3776
							],
							[
								4098,
								4105
							],
							[
								4446,
								4453
							],
							[
								5128,
								5135
							],
							[
								5174,
								5181
							],
							[
								5526,
								5533
							],
							[
								5582,
								5589
							],
							[
								5929,
								5936
							],
							[
								6284,
								6291
							],
							[
								6742,
								6749
							],
							[
								7139,
								7143
							],
							[
								7215,
								7222
							],
							[
								7608,
								7612
							],
							[
								7684,
								7691
							],
							[
								8171,
								8178
							],
							[
								8514,
								8521
							],
							[
								8850,
								8857
							],
							[
								9179,
								9186
							],
							[
								9258,
								9265
							],
							[
								9585,
								9592
							],
							[
								9642,
								9649
							],
							[
								9695,
								9702
							],
							[
								10060,
								10067
							],
							[
								10404,
								10411
							],
							[
								10766,
								10773
							],
							[
								10811,
								10818
							],
							[
								11131,
								11138
							],
							[
								11463,
								11470
							],
							[
								11803,
								11810
							],
							[
								11860,
								11867
							],
							[
								12213,
								12220
							],
							[
								12558,
								12565
							],
							[
								12679,
								12686
							],
							[
								13130,
								13134
							],
							[
								13207,
								13214
							],
							[
								13256,
								13263
							],
							[
								13601,
								13605
							],
							[
								13677,
								13684
							],
							[
								13723,
								13730
							],
							[
								14080,
								14084
							],
							[
								14156,
								14163
							],
							[
								14202,
								14209
							],
							[
								14535,
								14542
							],
							[
								14580,
								14587
							],
							[
								14939,
								14946
							],
							[
								15261,
								15268
							],
							[
								15307,
								15314
							],
							[
								15368,
								15375
							],
							[
								15421,
								15428
							],
							[
								15770,
								15777
							],
							[
								15827,
								15834
							],
							[
								15880,
								15887
							],
							[
								16202,
								16209
							],
							[
								16619,
								16623
							],
							[
								16674,
								16681
							],
							[
								16757,
								16764
							],
							[
								16815,
								16822
							],
							[
								17183,
								17190
							],
							[
								17534,
								17541
							],
							[
								17904,
								17911
							],
							[
								18273,
								18277
							],
							[
								18349,
								18356
							],
							[
								18672,
								18679
							],
							[
								19021,
								19028
							],
							[
								19338,
								19345
							],
							[
								19665,
								19672
							],
							[
								19719,
								19726
							],
							[
								19785,
								19792
							],
							[
								19868,
								19875
							],
							[
								20210,
								20217
							],
							[
								20264,
								20271
							],
							[
								20330,
								20337
							],
							[
								20413,
								20420
							],
							[
								20781,
								20785
							],
							[
								20857,
								20864
							],
							[
								21200,
								21207
							],
							[
								21708,
								21715
							],
							[
								22093,
								22100
							],
							[
								22568,
								22575
							],
							[
								22647,
								22654
							],
							[
								22993,
								22997
							],
							[
								23331,
								23335
							],
							[
								23683,
								23690
							],
							[
								24029,
								24036
							],
							[
								24091,
								24098
							],
							[
								24156,
								24163
							],
							[
								24514,
								24521
							],
							[
								24837,
								24844
							],
							[
								25171,
								25178
							],
							[
								25514,
								25521
							],
							[
								25838,
								25845
							],
							[
								26182,
								26189
							],
							[
								26518,
								26525
							],
							[
								26871,
								26878
							],
							[
								27211,
								27218
							],
							[
								27531,
								27538
							],
							[
								27854,
								27861
							],
							[
								28528,
								28535
							],
							[
								28876,
								28883
							],
							[
								29205,
								29212
							],
							[
								29622,
								29626
							],
							[
								29677,
								29684
							],
							[
								29760,
								29767
							],
							[
								30133,
								30140
							],
							[
								30191,
								30198
							],
							[
								30632,
								30639
							],
							[
								30690,
								30697
							],
							[
								31117,
								31121
							],
							[
								31241,
								31248
							],
							[
								31628,
								31632
							],
							[
								31752,
								31759
							],
							[
								32138,
								32142
							],
							[
								32214,
								32221
							],
							[
								32289,
								32296
							],
							[
								32351,
								32358
							],
							[
								32408,
								32415
							],
							[
								32466,
								32473
							],
							[
								32848,
								32852
							],
							[
								32924,
								32931
							],
							[
								32999,
								33006
							],
							[
								33061,
								33068
							],
							[
								33118,
								33125
							],
							[
								33176,
								33183
							],
							[
								33683,
								33687
							],
							[
								33827,
								33834
							],
							[
								33889,
								33896
							],
							[
								33946,
								33953
							],
							[
								34004,
								34011
							],
							[
								34668,
								34675
							],
							[
								34724,
								34731
							],
							[
								34782,
								34789
							],
							[
								35163,
								35170
							],
							[
								35527,
								35534
							],
							[
								35908,
								35915
							],
							[
								36244,
								36251
							],
							[
								36578,
								36585
							],
							[
								36920,
								36927
							],
							[
								37256,
								37263
							],
							[
								37609,
								37616
							],
							[
								37933,
								37940
							],
							[
								38275,
								38282
							],
							[
								38331,
								38338
							],
							[
								38389,
								38396
							],
							[
								38840,
								38844
							],
							[
								38916,
								38923
							],
							[
								39364,
								39371
							],
							[
								39443,
								39450
							],
							[
								39884,
								39891
							],
							[
								39963,
								39970
							],
							[
								40295,
								40302
							],
							[
								40653,
								40660
							],
							[
								40984,
								40991
							],
							[
								41295,
								41302
							],
							[
								41630,
								41637
							],
							[
								41950,
								41954
							],
							[
								42026,
								42033
							]
						],
						"settings":
						{
							"color_helper.box_height": 22,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/gooey.tmTheme",
							"color_helper.file_palette":
							[
								"#000000ff",
								"#00354aff",
								"#00e5b8ff",
								"#00e6acff",
								"#01f4ffff",
								"#14b9dcff",
								"#14d100ff",
								"#18ff00ff",
								"#19f1c4ff",
								"#202325ff",
								"#222218ff",
								"#26292cff",
								"#35ff00ff",
								"#38f6ffff",
								"#3b3a32ff",
								"#3b3b90ff",
								"#3fcaffff",
								"#3fd6ffff",
								"#444444ff",
								"#49483eff",
								"#65c3faff",
								"#660000ff",
								"#666666ff",
								"#777777ff",
								"#880000ff",
								"#99f200ff",
								"#9b9b9bff",
								"#9d550fB0@2",
								"#b7f200ff",
								"#be0036ff",
								"#be8cfeff",
								"#c38913ff",
								"#ccccccff",
								"#cd73ffff",
								"#cfff6bff",
								"#d4b06aff",
								"#dafefdff",
								"#e50055ff",
								"#e900ccff",
								"#eeeeeeff",
								"#f165faff",
								"#f8f8f0ff",
								"#f8f8f2A5@3",
								"#f8f8f2ff",
								"#fd6783ff",
								"#fd9dafff",
								"#ff0000ff",
								"#ff0095ff",
								"#ff0700ff",
								"#ff3c37ff",
								"#ff6f6bff",
								"#ff8500ff",
								"#ff9200ff",
								"#ffa100ff",
								"#ffa937ff",
								"#ffdb00ff",
								"#ffe792ff",
								"#ffea6bff",
								"#ffffffff"
							],
							"color_helper.popup_active": false,
							"color_helper.popup_auto": true,
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hexa",
									"hex_compressed",
									"hex"
								],
								"compress_hex_output": false,
								"current_ext": ".tmtheme",
								"current_syntax": "XML/XML",
								"enabled": true,
								"last_updated": 1529189577.02,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"text.xml -meta.tag.xml -comment -string, string.unquoted.cdata.xml"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": false,
							"syntax": "Packages/XML/XML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 863.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/data.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6256,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1529189577.02
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2009.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/blog.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40862,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3040.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/counter.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14203,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9088.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 27,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17107,
						"regions":
						{
						},
						"selection":
						[
							[
								533,
								533
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": null,
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/content.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 43952,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "src/xpress.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11695,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 23,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/templates.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18365,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7190.0,
						"zoom_level": 1.0
					},
					"stack_index": 62,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "static/packages/js/before/blog.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16059,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/Flatland_Monokai.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".js",
								"current_syntax": "JavaScript/JavaScript",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8573.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "static/assets/after-1.0.3.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11086,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/Flatland_Monokai.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".js",
								"current_syntax": "JavaScript/JavaScript",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6725.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "static/assets/before-1.0.6.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 432857,
						"regions":
						{
						},
						"selection":
						[
							[
								432612,
								432612
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/Flatland_Monokai.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".js",
								"current_syntax": "JavaScript/JavaScript",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1448.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "static/assets/before-1.0.6-might-be-old.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8445,
						"regions":
						{
						},
						"selection":
						[
							[
								8445,
								8445
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/Flatland_Monokai.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".js",
								"current_syntax": "JavaScript/JavaScript",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "static/packages/css/blog-current.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37210,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 23,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/deep_blue_see.tmTheme",
							"color_helper.file_palette":
							[
								"#000000ff",
								"#15191bff",
								"#19777fff",
								"#1a1e21ff",
								"#1c2024ff",
								"#212529ff",
								"#222222ff",
								"#22aaffff",
								"#32383eff",
								"#333333ff",
								"#343a40ff",
								"#363636ff",
								"#38dcefff",
								"#424649ff",
								"#444444ff",
								"#5bc0deff",
								"#5bff5bff",
								"#666666ff",
								"#777777ff",
								"#853c01ff",
								"#880000ff",
								"#888888ff",
								"#8ceaf6ff",
								"#944300ff",
								"#96969626@2",
								"#999999ff",
								"#9ae4fcff",
								"#aa0000ff",
								"#aaaaaaff",
								"#bbbbbbff",
								"#bd67fdff",
								"#c65900ff",
								"#c8c8c80D@2",
								"#ccccccff",
								"#ccf9ffff",
								"#dc3545ff",
								"#dd0000ff",
								"#ddddddff",
								"#de6d1133@1",
								"#de6d1180@1",
								"#de6d11FF",
								"#de6d11ff",
								"#e06500ff",
								"#e06601ff",
								"#e0e0e0ff",
								"#e0e442ff",
								"#eeeeeeff",
								"#f0ad4eff",
								"#ff0000ff",
								"#ff4801ff",
								"#ff6d7bff",
								"#ff8000ff",
								"#ff8f31ff",
								"#ffc600ff",
								"#ffdd00ff",
								"#ffffffCC@1",
								"#ffffffff"
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"hex",
									"webcolors",
									"rgba",
									"hsla",
									"hsl",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".css",
								"current_syntax": "CSS/CSS",
								"enabled": true,
								"last_updated": 1519614412.17,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/CSS/CSS.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "static/assets/blog-1.0.8.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 218817,
						"regions":
						{
						},
						"selection":
						[
							[
								218816,
								218669
							]
						],
						"settings":
						{
							"color_helper.box_height": 23,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/deep_blue_see.tmTheme",
							"color_helper.file_palette":
							[
								"#31708fff",
								"#333333ff",
								"#3c763dff",
								"#428bcaff",
								"#444444ff",
								"#8a6d3bff",
								"#a94442ff",
								"#bce8f1ff",
								"#d6e9c6ff",
								"#d9edf7ff",
								"#ddddddff",
								"#dff0d8ff",
								"#ebccd1ff",
								"#eeeeeeff",
								"#f2dedeff",
								"#f5f5f5ff",
								"#faebccff",
								"#fcf8e3ff",
								"#ff0000ff",
								"#ffffffff"
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"hex",
									"webcolors",
									"rgba",
									"hsla",
									"hsl",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".css",
								"current_syntax": "CSS/CSS",
								"enabled": true,
								"last_updated": 1519614412.17,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/CSS/CSS.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 74.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "templates/page-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9078,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
								"#282c30ff",
								"#343a40ff"
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"hex",
									"webcolors",
									"rgba",
									"hsla",
									"hsl",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1519614412.17,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1265.0,
						"zoom_level": 1.0
					},
					"stack_index": 57,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "pages/archive/about.page",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7297,
						"regions":
						{
						},
						"selection":
						[
							[
								1150,
								1150
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".page",
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 58,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "templates/article-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2428,
						"regions":
						{
						},
						"selection":
						[
							[
								874,
								874
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 22,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
								"#212529ff"
							],
							"color_helper.popup_active": false,
							"color_helper.popup_auto": true,
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hsl",
									"rgb",
									"rgba",
									"hex",
									"hsla",
									"webcolors",
									"hex_compressed"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1532115967.67,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "templates/search-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1119,
						"regions":
						{
						},
						"selection":
						[
							[
								785,
								785
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 22,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"rgb",
									"webcolors",
									"hex",
									"hsl",
									"hex_compressed",
									"hsla",
									"rgba"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1529189577.02,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "templates/page-code-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9694,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
								"#282c30ff",
								"#343a40ff"
							],
							"color_helper.no_auto": false,
							"color_helper.popup_active": false,
							"color_helper.popup_auto": true,
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"hex",
									"webcolors",
									"rgba",
									"hsla",
									"hsl",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1519614412.17,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "templates/common/assets-css.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21,
						"regions":
						{
						},
						"selection":
						[
							[
								17,
								17
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 23,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"hex",
									"webcolors",
									"rgba",
									"hsla",
									"hsl",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1519614412.17,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "templates/common/assets-js-before.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22,
						"regions":
						{
						},
						"selection":
						[
							[
								19,
								19
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"hex",
									"webcolors",
									"rgba",
									"hsla",
									"hsl",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1519614412.17,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "templates/common/assets-js-after.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21,
						"regions":
						{
						},
						"selection":
						[
							[
								21,
								21
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"hex",
									"webcolors",
									"rgba",
									"hsla",
									"hsl",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1519614412.17,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "templates/page-blank-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10,
						"regions":
						{
						},
						"selection":
						[
							[
								7,
								7
							]
						],
						"settings":
						{
							"auto_name": "{{{body}}}",
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".hbs",
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "templates/tags-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 445,
						"regions":
						{
						},
						"selection":
						[
							[
								215,
								215
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".hbs",
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "templates/common/header.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8104,
						"regions":
						{
						},
						"selection":
						[
							[
								211,
								211
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
								"#343a40ff"
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"hex",
									"webcolors",
									"rgba",
									"hsla",
									"hsl",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1519614412.17,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"history_list_is_closing": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 60,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "templates/common/footer.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 872,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"hex",
									"webcolors",
									"rgba",
									"hsla",
									"hsl",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1519614412.17,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 59,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": ".license",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1054,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "Copyright 2018 Andrew Prindle",
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": "",
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 61,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "templates/articles-pagination-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1626,
						"regions":
						{
						},
						"selection":
						[
							[
								1170,
								1170
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
								"#212529ff"
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"hex",
									"webcolors",
									"rgba",
									"hsla",
									"hsl",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1519614412.17,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 48,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 96152,
						"regions":
						{
						},
						"selection":
						[
							[
								448,
								448
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": null,
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "/D/docs/vs code theme in progress - colors.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2250,
						"regions":
						{
						},
						"selection":
						[
							[
								29,
								22
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".txt",
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1521615011.68
							},
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "src/pages-before-comment-out-prints.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 96104,
						"regions":
						{
						},
						"selection":
						[
							[
								96104,
								96104
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 41695.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "templates/create-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12610,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
								"#212529ff"
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"hex",
									"webcolors",
									"rgba",
									"hsla",
									"hsl",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1519614412.17,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1577.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"type": "text"
				},
				{
					"buffer": 52,
					"file": "templates/edit-article-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13790,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
								"#212529ff"
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"hex",
									"webcolors",
									"rgba",
									"hsla",
									"hsl",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1519614412.17,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4884.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "templates/general-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 147,
						"regions":
						{
						},
						"selection":
						[
							[
								147,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 23,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".hbs",
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 54,
					"file": "templates/manage-pagination-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5585,
						"regions":
						{
						},
						"selection":
						[
							[
								4941,
								4941
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 23,
							"color_helper.color_scheme": "Packages/Theme - Monokai Pro/Monokai Pro.tmTheme",
							"color_helper.file_palette":
							[
								"#5bff5bff",
								"#ff0000ff"
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"hex",
									"webcolors",
									"rgba",
									"hsla",
									"hsl",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1519614412.17,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1449.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 55,
					"file": "/C/code/lang/Rust/proj/rocket-auth-login/examples/database_example/src/layout.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11695,
						"regions":
						{
						},
						"selection":
						[
							[
								432,
								396
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1519614412.17
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4016.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"type": "text"
				},
				{
					"buffer": 56,
					"file": "/C/code/lang/Rust/code/Snippets/Snippet Collection.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34688,
						"regions":
						{
						},
						"selection":
						[
							[
								12359,
								12257
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1521615011.68
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10842.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 49.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				2
			],
			[
				1,
				0,
				2,
				1
			],
			[
				1,
				1,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			0.848813209494,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 49.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 28.0
	},
	"pinned_build_system": "",
	"project": "blogr-proj-post-fractal-frontpage.sublime-project",
	"replace":
	{
		"height": 60.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				2
			],
			[
				1,
				0,
				2,
				1
			],
			[
				1,
				1,
				2,
				2
			]
		]
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 208.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 2
	}
}
