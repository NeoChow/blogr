{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Guid",
				"GuidBuilder"
			],
			[
				"MAX",
				"MAX_CREATE_DESCRIPTION"
			],
			[
				"MAX_CREATE_",
				"MAX_CREATE_TITLE"
			],
			[
				"GENERIC_PAGE",
				"GENERIC_PAGE_START"
			],
			[
				"Postgres",
				"PostgresConnectionManager"
			],
			[
				"sani",
				"sanitize_tags"
			],
			[
				"sanitize",
				"sanitize_tags"
			],
			[
				"SAN",
				"SANITIZE_PASSWORD"
			],
			[
				"list",
				"listcmds"
			],
			[
				"cm",
				"partial_cmp"
			],
			[
				"str",
				"str"
			],
			[
				"Des",
				"Deserialize"
			],
			[
				"Recipe",
				"Recipe"
			],
			[
				"cou",
				"count_lines"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/main.rs",
			"settings":
			{
				"buffer_size": 19609,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/pages.rs",
			"settings":
			{
				"buffer_size": 34160,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/admin_auth.rs",
			"settings":
			{
				"buffer_size": 3987,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/user_auth.rs",
			"settings":
			{
				"buffer_size": 3443,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/blog.rs",
			"settings":
			{
				"buffer_size": 24029,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/cookie_data.rs",
			"settings":
			{
				"buffer_size": 3423,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/login_form_status.rs",
			"settings":
			{
				"buffer_size": 5818,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/data.rs",
			"settings":
			{
				"buffer_size": 5057,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/templates.rs",
			"settings":
			{
				"buffer_size": 12412,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "contrib/src/templates/handlebars_templates.rs",
			"settings":
			{
				"buffer_size": 6933,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/sanitize.rs",
			"settings":
			{
				"buffer_size": 2572,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/layout.rs",
			"settings":
			{
				"buffer_size": 14558,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/lang/Rust/proj/projman/src/configuration/mod.rs",
			"settings":
			{
				"buffer_size": 2460,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/lang/Rust/proj/projman/src/run.rs",
			"settings":
			{
				"buffer_size": 7806,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/lang/Rust/proj/projman/src/configuration/storage.rs",
			"settings":
			{
				"buffer_size": 32844,
				"line_ending": "Windows"
			}
		},
		{
			"file": ".env",
			"settings":
			{
				"buffer_size": 54,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/users.rs",
			"settings":
			{
				"buffer_size": 535,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Cargo.toml",
			"settings":
			{
				"buffer_size": 1016,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "contrib/Cargo.toml",
			"settings":
			{
				"buffer_size": 1247,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/Cargo.toml",
			"settings":
			{
				"buffer_size": 1278,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Rocket.toml",
			"settings":
			{
				"buffer_size": 667,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "address = \"localhost\""
			}
		},
		{
			"contents": "\nuse std::{env, str, io};\nuse std::io::{Cursor, Read};\nuse std::path::{Path, PathBuf};\nuse std::sync::Mutex;\nuse std::marker::PhantomData;\n\nuse rocket;\nuse rocket::{Request, Data, Outcome, Response};\nuse ::rocket::config::{Config, Environment};\nuse rocket::data::FromData;\nuse rocket::http::{Cookie, Cookies, MediaType, ContentType, Status, RawStr};\n// use ::rocket::outcome::Outcome;\nuse rocket::request::{FlashMessage, Form, FromRequest,FromForm, FormItems, FromFormValue, FromParam};\nuse rocket::response::{content, NamedFile, Redirect, Flash, Responder, Content};\nuse rocket::response::content::Html;\n\nuse regex::Regex;\nuse titlecase::titlecase;\nuse ::serde::{Deserialize, Serialize};\nuse ::rmps::{Deserializer, Serializer};\n\nuse auth::userpass::UserPass;\nuse auth::status::{LoginStatus,LoginRedirect};\nuse auth::dummy::DummyAuthenticator;\nuse auth::authenticator::Authenticator;\n\nuse sanitize::*;\n\n// use auth::userpass::UserPass;\n// use auth::status::{LoginStatus,LoginRedirect};\n// use auth::dummy::DummyAuthenticator;\n// use auth::authenticator::Authenticator;\n\n\n// FromRequest - retrieve cookie data\n// FromForm - retrieve login data and authenticate and create cookie if authenticated\n\n#[derive(Debug, Clone, FromForm)]\npub struct UserQuery {\n    pub user: String,\n}\n\n\n/// When using it for checking if a user is an administrator\n/// use: AuthContainer::CookieData<Administrator> where Administrator is a\n/// data structure that contains the administrator cookie data\n\n#[derive(Debug, Clone)]\npub struct AuthContainer<'de, T: AuthorizeCookie + Serialize + Deserialize<'de> + 'de> {\n    pub cookie: T,\n    _marker: PhantomData<&'de T>,\n}\n\n#[derive(Debug, Clone)]\npub struct LoginContainer<'de, T: AuthorizeForm + Serialize + Deserialize<'de> + 'de> {\n    pub form: T,\n    _marker: PhantomData<&'de T>,\n}\n\n// #[derive(Debug, Clone, Serialize, Deserialize)]\n// pub enum AuthContainer<T: AuthorizeCookie+CookieId, U: CookieId> {\n//     CookieData(T),\n//     FormData(U),\n// }\n\n\n// pub trait StringConversion {\n//     fn string_decode(s: String) -> Self;\n//     fn string_encode(&self) -> String;\n// }\n\npub trait CookieId {\n    fn identifier(&self) -> &str {\n        Self::cookie_id()\n    }\n    fn cookie_id<'a>() -> &'a str {\n        \"sid\" // default identifier\n    }\n}\n\npub trait AuthorizeCookie : CookieId {\n    // type FormType;\n    // type CookieType;\n    \n    /// Convert a data structure to a string\n    ///\n    /// The default implementation uses Serde to serialize/deserialize the structure using MsgPack\n    fn store(&self) -> String \n        where Self: ::serde::Serialize \n    {\n        let mut buffer = Vec::new();\n        self.serialize(&mut Serializer::new(&mut buffer)).expect(\"Could not store authorization data.\");\n        // str::from_utf8(&sparkle_heart).expect(\"Invalid UTF characters found in authorization data.\")\n        str::from_utf8(&buffer).expect(\"Invalid UTF characters found in authorization data.\")\n    }\n    \n    /// Takes a string and converts it to a useful data structure\n    fn retrieve(data: String) -> Self\n        where for <'de> Self: ::serde::Deserialize<'de> + ::serde::Serialize + ::std::marker::Sized\n    {\n        let buffer: Vec<u8> = data.as_bytes();\n        let mut de = Deserializer::new(&buffer[..]);\n        let output: Self = Deserialize::deserialize(&mut de).expect(\"Could not decode authorization data.\");\n        output\n    }\n    \n}\npub trait AuthorizeForm : CookieId {\n    \n    /// The data structure to store as a cookie\n    type CookieType;\n    \n    /// Authenticate user the trait method that authenticates a login form.  \n    /// It determines whether the username and password field are valid credentials\n    /// If so it returns a Ok<CookieType> otherwise it returns Err<String,String>\n    /// \n    /// The Ok result is the cookie, so if your method queries a database and is successful \n    ///     it may return a data structure containing the user data like username email etc.\n    /// \n    /// Otherwise Err<String,String> is returned; the first string is the Username the user entered\n    ///     this is so that the login form may display the username that was submitted, \n    ///     this is to prevent the user from having to enter the username again\n    /// The second string returned is the error message returned, or the reason why the\n    ///     authentication failed.  An example could be that the username was not found\n    ///     or perhaps invalid password for the specified user.\n    /// \n    fn authenticate(&self) -> Result<Self::CookieType, (String, String)>;\n    \n    \n    fn new_form(user: &str, pass: &str) -> Self;\n    \n    \n    /// Creates a url that the user should be directed to when the login fails\n    /// The authenticate method will return an error message, this is passed to fail_url()\n    /// This only creates the \"?some=thing\" part, the \"/page?\" part is created by caller function\n    // fn fail_url(&self, &str) -> String;\n    \n    // fn fail_url(&str, &str) -> String;\n    // Make fail_url a default implementation\n    fn fail_url(user: &str, msg: &str) -> String {\n        let mut output = String::from(msg);\n        output.push_str(\"?user=\");\n        // output.push_str(&self.username);\n        output.push_str(user);\n        output\n    }\n    \n    \n    fn flash_redirect(&self, ok_redir: &str, err_redir: &str) -> Result<Redirect, Flash<Redirect>> {\n        match self.authenticate() {\n            Ok(cooky) => Ok(Redirect::to(ok_redir)),\n            Err(ename, emsg) => {\n                let mut furl = String::from(err_redir);\n                if &ename != \"\" {\n                    let furl_qrystr = Self::fail_url(ename, emsg);\n                    furl.push_str(&furl_qrystr);\n                }\n                Err( Flash::error(Redirect::to(&furl), &emsg) )\n            },\n        }\n    }\n}\n\n\nimpl<'de, 'a, 'r, T: AuthorizeCookie> FromRequest<'a, 'r> for AuthContainer<'de, T> where T: ::serde::Serialize + ::serde::Deserialize<'de> {\n    type Error = ();\n\n    fn from_request(request: &'a Request<'r>) -> rocket::request::Outcome<AuthContainer<'de, T>,Self::Error>{\n        // let cookie_id = config::get_cookie_identifier();\n        \n        // let cid = AuthContainer.cookie::cookie_id();\n        let cid = T::cookie_id();\n        let mut cookies = request.cookies();\n\n        match cookies.get_private(cid) {\n            Some(cookie) => Outcome::Success(\n                AuthContainer {\n                    // Data: T::from_string( cookie.value().string_decode() )\n                    // cookie: T::retrieve(cookie.value().string_decode()),\n                    cookie: T::retrieve(cookie.value()),\n                }\n            ),\n            None => Outcome::Forward(())\n        }\n    }\n}\n\n\n\n\n// pub enum AuthStatus<T> {\n    \n// }\n\n// impl<A: AuthorizeCookie> AuthStatus<A> {\n    \n// }\n\nimpl<'de, A: AuthorizeForm+CookieId> LoginContainer<'de, A>  where A: ::serde::Serialize + ::serde::Deserialize<'de> {\n    /// Redirect to different locations based on whether the LoginContainer data\n    /// is valid credentials (as determined by authenticate() method)\n    /// \n    /// If valid goes to first parameter\n    /// Otherwise redirects to second parameter with the error message as a flash message\n    pub fn redirect(&self, succeed_url: &str, fail_url: &str, mut cookies: Cookies) -> Result<Redirect, Flash<Redirect>> {\n        let auth = self.form.authenticate();\n        // First Err String is username, second is error message\n        match auth {\n            Ok(cooky) => {\n                // add cookie here\n                cookies.add_private(A::cookie_id(), cooky.store());\n                \n                Ok(Redirect::to(succeed_url))\n            },\n            Err(user, err) => {\n                let mut fail = fail_url.to_string();\n                fail.push_str(A::fail_url(err));\n                Err(Flash::success(Redirect::to(), \"Login Success\"))\n            },\n        }\n        \n    }\n}\n\nimpl<'de, 'f, A: AuthorizeForm> FromForm<'f> for LoginContainer<'de, A>  where A: ::serde::Serialize + ::serde::Deserialize<'de>{\n    type Error = &'static str;\n    \n    fn from_form(form_items: &mut FormItems<'f>, _strict: bool) -> Result<Self, Self::Error> {\n        // let mut user_pass = HashMap::new();\n        let mut user: String = String::new();\n        let mut pass: String = String::new();\n        for (key,value) in form_items {\n            match key.as_str(){\n                // \"username\" => user_pass.insert(\"username\", value).map_or((), |_v| ()),\n                // \"password\" => user_pass.insert(\"password\", value).map_or((), |_v| ()),\n                \"username\" => sanitize(value.url_decode().unwrap_or(String::new())),\n                \"password\" => sanitize_password(value.url_decode().unwrap_or(String::new())),\n                _ => ()\n            }\n        }\n        // if user_pass.get(\"username\").is_none() || user_pass.get(\"password\").is_none() {\n        \n        \n        // if &user == \"\" || &pass == \"\" {\n        //     Err(\"Invalid form: not all fields are specified.\")\n        // } else {\n            \n        Ok(\n            LoginContainer {\n                form: A::new_form(user, pass),\n            }\n        )\n            \n            \n            // let result = A::check_credentials(\n            //     user_pass.get(\"username\").unwrap().to_string(), \n            //     user_pass.get(\"password\").unwrap().to_string()\n            // );\n            // Ok(match result{\n                // Ok(authenticator) => LoginStatus::Succeed(authenticator),\n                // Err(authenticator) => LoginStatus::Failed(authenticator)\n            // })\n        // }\n    }\n}\n// impl<'r> Responder<'r> for LoginRedirect{\n//     fn respond_to(self, request: &Request) -> Result<Response<'r>, Status>{\n//         self.0.respond_to(request)\n//     }\n// }\n\n\n\n// impl AuthorizeCookie for AdminAuthCookie {\n//     type FormType = AdminAuthForm;\n    \n// }\n\n// pub trait Login {\n//     type CookieType;\n//     fn authenticate(&self) -> Result<Self, String>;\n//     fn cookie_id() -> String;\n    \n// }\n\n\n// impl Login for AdminAuthForm {\n//     type CookieType = AdminAuthCookie;\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"file": "src/authorize.rs",
			"file_size": 10455,
			"file_write_time": 131548461749270369,
			"settings":
			{
				"buffer_size": 10141,
				"line_ending": "Windows"
			}
		},
		{
			"file": "static/blog.js",
			"settings":
			{
				"buffer_size": 2529,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "static/blog_after.js",
			"settings":
			{
				"buffer_size": 422,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/lang/Rust/proj/projman/src/configuration/storable.rs",
			"settings":
			{
				"buffer_size": 9321,
				"line_ending": "Windows"
			}
		},
		{
			"file": "auth-rs/src/authenticator.rs",
			"settings":
			{
				"buffer_size": 983,
				"line_ending": "Unix"
			}
		},
		{
			"file": "auth-rs/src/status.rs",
			"settings":
			{
				"buffer_size": 3186,
				"line_ending": "Unix"
			}
		},
		{
			"file": "auth-rs/src/config.rs",
			"settings":
			{
				"buffer_size": 424,
				"line_ending": "Unix"
			}
		},
		{
			"file": "auth-rs/src/lib.rs",
			"settings":
			{
				"buffer_size": 181,
				"line_ending": "Unix"
			}
		},
		{
			"file": "auth-rs/src/userpass.rs",
			"settings":
			{
				"buffer_size": 1062,
				"line_ending": "Unix"
			}
		},
		{
			"file": "auth-rs/src/dummy/mod.rs",
			"settings":
			{
				"buffer_size": 343,
				"line_ending": "Unix"
			}
		},
		{
			"file": "auth-rs/example/src/main.rs",
			"settings":
			{
				"buffer_size": 1421,
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/login-template.html.hbs",
			"settings":
			{
				"buffer_size": 8175,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/create-template.html.hbs",
			"settings":
			{
				"buffer_size": 8361,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/search-template.html.hbs",
			"settings":
			{
				"buffer_size": 7253,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/general-template.html.hbs",
			"settings":
			{
				"buffer_size": 6294,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/article-template.html.hbs",
			"settings":
			{
				"buffer_size": 7145,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/articles-template.html.hbs",
			"settings":
			{
				"buffer_size": 7209,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "static/index.html",
			"settings":
			{
				"buffer_size": 24494,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "static/css/blogr.css",
			"settings":
			{
				"buffer_size": 10080,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "<!doctype html>\n<html lang=\"en\">\n    <head>\n        {{#if info.title}}\n        <title>{{info.title}}</title>\n        {{else}}\n        <title>Vishus Blog</title>\n        {{/if}}\n        \n        <!-- Required meta tags -->\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n        \n        <!-- Font Awesome -->\n        <!-- <link rel=\"stylesheet\" href=\"css/font-awesome.min.css\"> -->\n        \n        <!-- Bootstrap CSS -->\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css\" integrity=\"sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M\" crossorigin=\"anonymous\">\n        \n        <!-- Custom CSS -->\n        <!-- <link id=\"pageStyleSheet\" type=\"text/css\" href=\"css/blog.css\" rel=\"stylesheet\" /> -->\n        <link id=\"pageStyleSheet\" type=\"text/css\" href=\"css/blogr.css\" rel=\"stylesheet\" />\n        \n        <!-- JavaScript -->\n        <!-- <script src=\"js-head.js\"></script>  -->\n        <script src=\"sha256.js\"></script>\n        <script src=\"blog.js\"></script>\n        \n        <style>\n        \n        </style>\n    </head>\n    <body>\n        <div id=\"mainWrapper\" class=\"main-wrapper\">\n            \n            <nav class=\"v-nav-bar sticky-top navbar navbar-expand-lg navbar-dark bg-dark\">\n                <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span class=\"navbar-toggler-icon\"></span>\n                </button>\n                <a class=\"blog-logo navbar-brand\" href=\"#\">Vishus Blog</a>\n\n                <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul class=\"v-nav navbar-nav mr-auto\">\n                        <!-- <li class=\"v-nav-item nav-item active\"><a class=\"nav-link\" href=\"\">Home <span class=\"sr-only\">(current)</span></a></li> -->\n                        {{#each info.pages}}\n                          {{#is-current-page ../info.page this.url}}\n                            <li class=\"v-nav-item nav-item active\"><a class=\"nav-link\" href=\"{{this.url}}\">{{this.name}}</a></li>\n                          {{else}}\n                            <li class=\"v-nav-item nav-item\"><a class=\"nav-link\" href=\"{{this.url}}\">{{this.name}}</a></li>\n                          {{/is-current-page}}\n                        {{/each}}\n                        {{#if info.is_admin}}\n                        <li class=\"v-nav-item nav-item dropdown\">\n                            <a class=\"v-nav-login nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                {{info.username}}\n                            </a>\n                            <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                            {{#each info.admin_pages}}\n                              {{#if this.separator}}\n                                  <div class=\"dropdown-divider\"></div>\n                              {{else}}\n                                {{#is-current-page ../info.page this.url}}\n                                  <a class=\"dropdown-item active\" href=\"{{this.url}}\">{{this.name}}</a>\n                                {{else}}\n                                  <a class=\"dropdown-item\" href=\"{{this.url}}\">{{this.name}}</a>\n                                {{/is-current-page}}\n                              {{/if}}\n                            {{/each}}\n                                <!-- <a class=\"dropdown-item\" href=\"#\">Something else here</a> -->\n                            </div>\n                        </li>\n                        {{/if}}\n                        <!-- <li class=\"v-nav-item nav-item\"><a class=\"nav-link disabled\" href=\"#\">Disabled</a></li> -->\n                    </ul>\n                    <form id=\"search-form\" action=\"/search\" method=\"get\" class=\"form-inline my-2 my-lg-0\">\n                        <input name=\"q\" class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\">\n                        <button class=\"btn btn-outline-primary my-2 my-sm-0\" type=\"submit\">Search</button>\n                    </form>\n                </div>\n            </nav>\n                <div id=\"v-body\">\n                    \n<!-- ---------- -->\n                    \n                    {{#if msg}}\n                    {{{msg}}}\n                    {{/if}}\n                    {{#each body}}\n                    <article class=\"v-article\">\n                        <header class=\"v-article-header\">\n                            <h2 class=\"v-article-title\"><a href=\"/article?aid={{this.aid}}\">{{this.title}}</a></h2>\n                            <div class=\"row\">\n                                <date class=\"v-article-date\" datetime=\"{{this.posted_machine}}\">{{this.posted_human}}</date>\n                                <!-- YYYY-MM-DDThh:mm:ssTZD OR PTDHMS -->\n                            </div>\n                        </header>\n                        <p>\n                            {{{this.body}}}\n                        </p>\n                        <div class=\"v-article-tags\">\n                            {{#each this.tags}}\n                            <a href=\"/tag?tag={{this}}\">{{this}}</a>\n                            {{/each}}\n                        </div>\n                    </article>\n                    {{/each}}\n                    \n<!-- ---------- -->\n\n                    <footer id=\"v-footer\">\n                        <div class=\"v-copyright\">&copy; 2017 Andrew Prindle</div>\n                        {{#if info.gentime}}\n                        <div class=\"v-generation-time\">Generated in {{info.gentime}} seconds</div>\n                        {{/if}}\n                    </footer>\n                </div>\n            </div>\n            \n            \n        </div>\n        <!-- jQuery first, then Popper.js, then Bootstrap JS -->\n        <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js\" integrity=\"sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4\" crossorigin=\"anonymous\"></script>\n        <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.js\" integrity=\"sha384-h0AbiXch4ZDo7tp9hKZ4TsHbi047NrKGLO3SEJAg45jXxnGIfYzk4Si90RDIqNm1\" crossorigin=\"anonymous\"></script>\n        \n        <!-- Custom JavaScript -->\n        <!-- <script src=\"sha256.js\"></script> -->\n        <!-- <script src=\"blog.js\"></script> -->\n        <script src=\"blog_after.js\"></script>\n        <script>\n            {{#if info.js}}\n            {{{info.js}}}\n            {{/if}}\n        </script>\n        \n    </body>\n</html>",
			"settings":
			{
				"buffer_size": 7015,
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/tags-template.html.hbs",
			"settings":
			{
				"buffer_size": 6529,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "old/static/old-blog.js",
			"settings":
			{
				"buffer_size": 7586,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/lang/Rust/proj/traitstr/src/main.rs",
			"settings":
			{
				"buffer_size": 12948,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"package",
				"Package Control: Disable Package"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"snippet",
				"Snippet: Import"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"package ",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Enable Package"
			]
		],
		"width": 540.0
	},
	"console":
	{
		"height": 162.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/code/lang/Rust/proj/blogr/src/usertype.rs",
		"/C/code/lang/Rust/proj/blogr/src/authorize.rs",
		"/C/code/lang/Rust/proj/blogr/src/administrator.rs",
		"/C/code/lang/Rust/proj/rocket-auth-login/examples/Cargo.toml",
		"/C/code/lang/Rust/proj/rocket-auth-login/examples/login/Cargo.toml",
		"/C/code/lang/Rust/proj/rocket-login-auth/Cargo.toml",
		"/C/code/lang/Rust/proj/rauth - Copy/Cargo.toml",
		"/C/code/lang/Rust/proj/blogr/src/main.rs",
		"/C/code/lang/Rust/proj/strtest/src/main.rs",
		"/C/code/lang/Rust/proj/blogr/src/pages.rs",
		"/C/code/lang/Rust/proj/blogr/notes/blogr_db_post_tag2_and_all-tags.sql",
		"/C/code/lang/Rust/proj/blogr/templates/general-template.html.hbs",
		"/C/code/lang/Rust/proj/blogr/contrib/src/templates/handlebars_templates.rs",
		"/C/Users/Andrew/AppData/Roaming/Sublime Text 3/Packages/User/Custom-Themes/RustCustom-3.tmTheme",
		"/C/code/lang/Rust/proj/blogr/src/templates.rs",
		"/C/code/lang/Rust/proj/blogr/src/blog.rs",
		"/C/code/lang/Rust/proj/blogr/static/template_footer.html",
		"/C/code/lang/Rust/proj/blogr/static/template_body.html",
		"/C/code/lang/Rust/proj/blogr/static/template_header.html",
		"/C/code/lang/Rust/code/convert collection of values into incrementing hashmap.rs",
		"/C/code/lang/Rust/code/MsgPack Serialization Deserialization.rs",
		"/C/code/lang/Rust/proj/blogr/handlebars_templates.rs",
		"/C/code/lang/Rust/proj/blogr/contrib/src/templates/context.rs",
		"/C/code/lang/Rust/proj/blogr/contrib/src/templates/mod.rs",
		"/C/code/lang/Rust/proj/blogr/contrib/src/templates/engine.rs",
		"/C/code/lang/Rust/proj/blogr/static/blog_after.js",
		"/C/code/lang/Rust/proj/blogr/static/hbs-template.html",
		"/C/code/lang/Rust/proj/blogr/templates/basic-template.html.hbs",
		"/C/code/lang/Rust/proj/blogr/static/template_form.html",
		"/C/code/lang/Rust/proj/blogr/static/article-template.hbs",
		"/C/code/lang/Rust/proj/blogr/static/general-template.hbs",
		"/C/code/lang/Rust/proj/recipes/src/recipe_structs.rs",
		"/C/code/lang/Rust/proj/blogr/static/sha256.js",
		"/C/code/lang/Rust/proj/blogr/src/user_auth.rs",
		"/C/code/lang/Rust/proj/blogr/src/cookie_data.rs",
		"/C/code/lang/Rust/proj/apps/auth-rs/example/src/main.rs",
		"/C/code/lang/Rust/proj/apps/auth-rs/example/Cargo.toml",
		"/C/code/lang/Rust/proj/apps/auth-rs/src/status.rs",
		"/C/code/lang/Rust/proj/apps/auth-rs/src/userpass.rs",
		"/C/code/lang/Rust/proj/apps/auth-rs/src/authenticator.rs",
		"/C/code/lang/Rust/proj/apps/auth-rs/src/config.rs",
		"/C/code/lang/Rust/proj/apps/auth-rs/src/lib.rs",
		"/C/code/lang/Rust/proj/apps/auth-rs/src/dummy/mod.rs",
		"/C/code/lang/Rust/proj/apps/auth-rs/Cargo.toml",
		"/C/code/lang/Rust/proj/apps/auth-rs/README.md",
		"/C/code/lang/Rust/proj/blog/src/main.rs",
		"/C/code/lang/Rust/proj/blog/src/article.rs",
		"/C/code/lang/Rust/proj/blog_old/src/main.rs",
		"/C/code/lang/Rust/proj/blog/Cargo.toml",
		"/C/code/lang/Rust/proj/blog/src/user_form_data.rs",
		"/C/code/lang/Rust/proj/blog/src/user_data.rs",
		"/C/code/lang/Rust/proj/blog/src/permissions.rs",
		"/C/code/lang/Rust/proj/blog/src/layout.rs",
		"/C/code/lang/Rust/proj/blog/src/login.rs",
		"/C/code/lang/Rust/proj/blog/src/cookies.rs",
		"/C/code/lang/Rust/proj/blog/src/cookie_data.rs",
		"/C/code/lang/Rust/proj/blog_old/src/layout.rs",
		"/C/code/lang/Rust/proj/blog_old/src/blog.rs",
		"/C/code/lang/Rust/proj/blog_old/src/authentication.rs",
		"/C/code/lang/Rust/proj/projman/src/run.rs",
		"/C/code/lang/Rust/proj/refs/src/main.rs",
		"/C/code/lang/Rust/proj/splitter/src/main.rs",
		"/C/code/lang/Rust/proj/splitter/Named Split String.txt",
		"/C/code/lang/Rust/proj/recipes/src/autoinc.rs",
		"/C/code/lang/Rust/proj/recipes/src/entries.rs",
		"/C/code/lang/Rust/proj/recipes/src/helpers.rs",
		"/C/code/lang/Rust/proj/recipes/src/people.rs",
		"/C/code/lang/Rust/proj/randproj/src/genproj.rs",
		"/C/code/lang/Rust/proj/passgen/src/dict_helpers.rs",
		"/C/code/lang/Rust/proj/projman/src/configuration/mod.rs",
		"/C/code/lang/Rust/proj/projman/src/behavior/mod.rs",
		"/C/code/lang/Rust/proj/projman/src/manager/mod.rs",
		"/C/code/lang/Rust/proj/projman/src/structures/autorun.rs",
		"/C/code/lang/Rust/proj/projman/src/structures/defaults.rs",
		"/C/code/lang/Rust/proj/projman/src/structures/executables.rs",
		"/C/code/lang/Rust/proj/projman/src/structures/mod.rs",
		"/C/code/lang/Rust/proj/projman/src/structures/var_str.rs",
		"/C/code/lang/Rust/proj/projman/src/helpers.rs",
		"/C/code/lang/Rust/proj/passgen/src/passwords.rs",
		"/C/code/lang/Rust/proj/hashers_metrohash/src/lib.rs",
		"/C/code/lang/Rust/proj/hashers/src/dict.rs",
		"/C/code/lang/Rust/proj/hashers/src/lib.rs",
		"/C/code/lang/Rust/proj/hashers/src/benches/bench.rs",
		"/C/code/lang/Rust/proj/csort/src/color.rs",
		"/C/code/lang/Rust/proj/csort/src/colorhsl.rs",
		"/C/code/lang/Rust/proj/csort/src/main.rs",
		"/C/code/lang/Rust/proj/csort/src/page.rs",
		"/C/code/lang/Rust/proj/csort/src/sort_hsl.rs",
		"/C/code/lang/Rust/proj/csort/src/upload.rs",
		"/C/code/lang/Rust/proj/colors/src/color.rs",
		"/C/code/lang/Rust/proj/blogr/notes/Diesel Error Message.log",
		"/C/code/lang/Rust/proj/blogr/static/css/blog.css",
		"/C/code/lang/Rust/proj/blogr/static/header.html",
		"/C/code/lang/Rust/proj/blogr/static/footer.html",
		"/C/code/lang/Rust/proj/blogr/static/template.html",
		"/C/code/lang/Rust/proj/blogr/.env",
		"/C/code/lang/Rust/proj/passgen/src/main.rs",
		"/C/code/lang/Rust/proj/cmds/src/table.rs",
		"/C/code/lang/Rust/proj/cmds/src/cmdlist.rs",
		"/C/code/lang/Rust/proj/cmds/src/main.rs",
		"/C/code/lang/Rust/proj/cmds/src/tableformat.rs",
		"/C/code/lang/Rust/proj/proman/src/main.rs",
		"/C/code/lang/Rust/proj/randproj/src/main.rs",
		"/C/code/lang/Rust/proj/recipes/src/main.rs",
		"/C/code/lang/Rust/proj/rgui/src/main.rs",
		"/C/code/lang/Rust/proj/rpg/src/main.rs",
		"/C/code/lang/Rust/proj/rpg/src/item.rs",
		"/C/code/lang/Rust/proj/rpg/src/monsters.rs",
		"/C/code/lang/Rust/proj/rpg/src/map.rs",
		"/C/code/lang/Rust/proj/rpg/src/npc.rs",
		"/C/code/lang/Rust/proj/sparta/src/main.rs",
		"/C/code/lang/Rust/proj/testme/src/main.rs",
		"/C/code/lang/Rust/proj/words/src/dict.rs",
		"/C/code/lang/Rust/proj/wordsort/src/main.rs",
		"/C/code/lang/Rust/proj/splitter/sorters.txt",
		"/C/code/lang/Rust/proj/entropy2/src/main.rs",
		"/C/code/lang/Rust/proj/colors/src/main.rs",
		"/C/code/lang/Rust/proj/cmds/src/config.rs",
		"/C/code/lang/Rust/proj/rocket/src/main.rs",
		"/C/code/lang/Rust/proj/setenv_test/src/main.rs",
		"/C/code/lang/Rust/proj/projman/src/configuration/storage.rs",
		"/C/code/lang/Rust/proj/projman/src/configuration/storable.rs",
		"/C/code/lang/Rust/proj/color_sorter/src/main.rs",
		"/C/code/lang/Rust/proj/blogr/src/view.rs",
		"/C/code/lang/Rust/proj/blogr/src/articles.rs",
		"/C/code/lang/Rust/proj/blogr/notes/tags.sql",
		"/C/code/lang/Rust/proj/blogr/notes/users.sql",
		"/C/code/lang/Rust/proj/blogr/notes/categories.sql"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 119.0,
		"where_history":
		[
			"C:\\code\\lang\\rust\\proj\\blogr",
			"C:\\code\\lang\\rust\\proj\\cmds",
			"C:\\code\\lang\\rust\\proj\\csort",
			"C:\\code\\lang\\rust\\proj\\projman",
			"C:\\laragon\\bin\\cmder",
			"C:\\code\\lang\\Rust\\proj\\recipes\\src"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Authorize(?!Form|Cookie)",
			"izeCookie",
			"Authorize(?!Form|Cookie)",
			"Authorize",
			"TEST_LOGIN_URL",
			"center",
			"border-radius",
			"article",
			"\\.v-content",
			"212529",
			"\\{\\{#if",
			"http://localhost/",
			"\\{\\{info\\.base_url\\}\\}",
			"gen",
			"time",
			"Administrator",
			"admin",
			"login",
			"lo",
			"AdminAuth",
			"vishus",
			"hbs_article_view",
			"split_tags",
			"sanitize_tags",
			"parse",
			"NaiveDateTimeWrapper",
			"Option",
			"date",
			"lazy_static",
			"250",
			"MAX_CREATE_TAGS",
			"500",
			"save",
			"\n        /// register the helper\n        if let Err(e) = handlebars.register_helper(\"menu_item\", Box::new(menu_helper)) {\n            error!(\"Error in helper `menu_item`: '{}'\", e);\n            return None;\n        }\n        ",
			"engine",
			"hb",
			"handlebars",
			"String",
			"hbs_template\\(",
			"TemplateBody::Login",
			"titlecase",
			"to_lowercase",
			"db",
			"pool",
			"save(",
			"AuthFailure",
			"AuthFail",
			"hbs_medium_sanitize",
			"\\[post",
			"(hbs.*)",
			"pub fn (hbs_.*)\\(.*",
			"pub fn hbs_(.*)\\(.*",
			"pub fn (hbs_.*)\\(.*",
			"pub fn hbs_(.*)\\(.*",
			"\\n+",
			"^(?!pub fn hbs_).*",
			"^(?!pub fn hbs_)",
			"pub fn (?!hbs_)",
			"pub pub fn",
			"fn ",
			"^fn ",
			"TemplateBody::Articles",
			"pgconn",
			"{{",
			"inputTags",
			"insert-tags",
			"inputTags",
			"input-tags",
			"titlecase",
			"{{",
			"log",
			"header",
			"HEADER",
			"alltags",
			"all.tags",
			"all_tags",
			"text",
			"form",
			"login_form_fail",
			"tags",
			"link_tags",
			"opt_col(row.get_opt(5))",
			"  ",
			"<button type=\"submit\" class=\"btn btn-primary\">Submit</button>",
			"is_user",
			"value",
			"to_string",
			"FromForm|from_form",
			"Missing a required field",
			"naive",
			"row",
			"conn_str",
			"sslmode",
			"SqliteConnection",
			"aqry",
			"tags",
			"(\"\")",
			"user",
			"Invalid",
			"struct",
			"traits",
			"since",
			"testing",
			"File",
			"Files",
			"Logging",
			"example",
			"filter_str",
			"FileLIst",
			"des_buf",
			"Self",
			"RegularUser",
			"UserCookie",
			"Authentic",
			"reason",
			"reason_str",
			"ArticleBasic",
			"bool",
			"libpq",
			"<div class=\"main-wrapper\">",
			" ",
			",",
			"development",
			"7egV",
			"USER_LOGIN_FAIL",
			"template_login_dashboard",
			"admin",
			"self"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"AuthorizeCookie",
			"",
			"/",
			"http://localhost/",
			"UserAuth",
			"pages::\\1",
			"\\1,",
			"\\1",
			"\\n",
			"",
			"pub fn hbs_",
			"pub fn",
			"pub fn ",
			"pub fn",
			"row.get_opt(5).unwrap_or(Ok(String::new())).unwrap_or(String::new())",
			"    ",
			"<button type=\"submit\" class=\"btn btn-primary\" id=\"submit-button-id\">Submit</button>",
			"des",
			"Article",
			"<div id=\"mainWrapper\" class=\"main-wrapper\">",
			"\\n",
			"",
			"LoginFormRedirect",
			"LoginFormStatus",
			"UserAuth",
			"AdminCookie",
			"USER_COOKIE",
			"UserCookie",
			"CookieData",
			"passwordField",
			"usernameField",
			"\\n",
			"BlogEnvAuth",
			"#FF8500",
			"#FFE337",
			"\"",
			"\\n",
			"Served in {}.{08} seconds",
			"\\1,",
			"\\1",
			"\\1,",
			"\\1",
			"#ffffff",
			"\\1// eprint\\2",
			"\\1// eprint\\1",
			"\\1",
			"Option<::configuration::Local>",
			"::",
			"type S = \\1;\\n\\ttype D = \\1;",
			"\\1_msgpack(",
			"\\1_json(",
			"retrieve_json(",
			"store_json(",
			"split_string",
			"1:\\1 2:\\2 3:\\3 4:\\4 5:\\5 6:\\6 7:\\7 8:\\8 9:\\9",
			"0:\\0 1:\\1 2:\\2 3:\\3 4:\\4 5:\\5 6:\\6 7:\\7 8:\\8 9:\\9",
			"1:\\1 2:\\2 3:\\3 4:\\4 5:\\5 6:\\6 7:\\7 8:\\8 9:\\9",
			"0:\\0 1:\\1 2:\\2 3:\\3 4:\\4 5:\\5 6:\\6 7:\\7 8:\\8 9:\\9",
			"0:01:\\1 2:\\2 3:\\3 4:\\4 5:\\5 6:\\6 7:\\7 8:\\8 9:\\9",
			"0:0 1:\\1 2:\\2 3:\\3 4:\\4 5:\\5 6:\\6 7:\\7 8:\\8 9:\\9",
			"1:\\1 2:\\2 3:\\3 4:\\4 5:\\5 6:\\6 7:\\7 8:\\8 9:\\9",
			"run:\\k<run> in:\\k<in> with:\\with",
			"run:\\k<run> in:\\k<in> with:\\k<with>",
			"run:\\<run> in:\\<in> with:\\<with>",
			"1:\\1 2:\\2 3:\\3 4:\\4 5:\\5 6:\\6 7:\\7 8:\\8 9:\\9",
			"# \\1",
			"#\\1",
			"Command",
			"Lang",
			"TableFormat",
			"set_cfg_msgpack",
			"get_cfg_msgpack",
			"#\\1",
			"# \\1",
			"/",
			"&a, &b",
			"let sort_by_\\1 = |ref a, ref b| -> Ordering {",
			" ",
			"#FFFFFF",
			"\"\\1\",",
			"DICT_A_INDEXES",
			"DICT_A_LIST",
			"DICT_NP_LIST",
			"DICT_NP_INDEXES",
			"#\\[allow",
			"",
			"&DICT_LIST[\\1..\\2]",
			"",
			"]);",
			"dict.insert",
			"dict_nop",
			"])\\ndict_all.insert(\\2, vec![",
			"\\1",
			"",
			"\"\\1\" | ",
			"WORDLIST",
			"\"\\1\" | ",
			"let rg = thread_rng();",
			"",
			"safe_range(\\1,\\2)",
			"\"\\1\", ",
			"word: &str",
			"&str",
			"\\t",
			"\\n",
			"\\r\\n",
			"\\t",
			"(*CONF)",
			"CONF",
			"CFG.",
			"",
			"self.",
			"self",
			"\\1\\2: \\3",
			"\\ws\\name: \\type",
			"\\1\\2: \\3",
			"vec!\\1,",
			"projs.push(\\1);",
			"projs.push(\\1)",
			"",
			"\\t\\t\\t\\t\"\\1\",",
			"\\n",
			"",
			"\\1",
			"\\1\\n",
			" + ",
			"\\n",
			" \\n\\1"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/main.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19609,
						"regions":
						{
						},
						"selection":
						[
							[
								3158,
								3158
							]
						],
						"settings":
						{
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1510473085.34
							},
							"git_gutter_is_enabled": true,
							"history_list_is_closing": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2025.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/pages.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34160,
						"regions":
						{
						},
						"selection":
						[
							[
								1005,
								1005
							]
						],
						"settings":
						{
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.preview_meta":
							{
							},
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1510681274.79
							},
							"git_gutter_is_enabled": true,
							"history_list_is_closing": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 105.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/admin_auth.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3987,
						"regions":
						{
						},
						"selection":
						[
							[
								1412,
								1412
							]
						],
						"settings":
						{
							"auto_name": "",
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1510473085.34
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 794.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/user_auth.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3443,
						"regions":
						{
						},
						"selection":
						[
							[
								1576,
								1542
							]
						],
						"settings":
						{
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1510473085.34
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/blog.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24029,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							],
							[
								221,
								60
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1509508007.55
							},
							"git_gutter_is_enabled": true,
							"history_list_is_closing": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/cookie_data.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3423,
						"regions":
						{
						},
						"selection":
						[
							[
								594,
								594
							]
						],
						"settings":
						{
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1509924326.74
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1547.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/login_form_status.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5818,
						"regions":
						{
						},
						"selection":
						[
							[
								1553,
								1553
							]
						],
						"settings":
						{
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1509924326.74
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2212.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/data.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5057,
						"regions":
						{
						},
						"selection":
						[
							[
								3392,
								3392
							]
						],
						"settings":
						{
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1510473085.34
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1121.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/templates.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12412,
						"regions":
						{
						},
						"selection":
						[
							[
								9599,
								9599
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1509508007.55
							},
							"git_gutter_is_enabled": true,
							"history_list_is_closing": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "contrib/src/templates/handlebars_templates.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6933,
						"regions":
						{
						},
						"selection":
						[
							[
								4617,
								4767
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1508562186.47
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1792.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/sanitize.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2572,
						"regions":
						{
						},
						"selection":
						[
							[
								19,
								1
							]
						],
						"settings":
						{
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1509924326.74
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/layout.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14558,
						"regions":
						{
						},
						"selection":
						[
							[
								2569,
								2569
							]
						],
						"settings":
						{
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1509924326.74
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 673.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/C/code/lang/Rust/proj/projman/src/configuration/mod.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2460,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1508562186.47
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/C/code/lang/Rust/proj/projman/src/run.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7806,
						"regions":
						{
						},
						"selection":
						[
							[
								59,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1509508007.55
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/C/code/lang/Rust/proj/projman/src/configuration/storage.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32844,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1508562186.47
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": ".env",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 54,
						"regions":
						{
						},
						"selection":
						[
							[
								13,
								54
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": "",
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1508562186.47
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "src/users.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 535,
						"regions":
						{
						},
						"selection":
						[
							[
								533,
								533
							]
						],
						"settings":
						{
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1510473085.34
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "Cargo.toml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1016,
						"regions":
						{
						},
						"selection":
						[
							[
								149,
								131
							]
						],
						"settings":
						{
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".toml",
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1510473085.34
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "contrib/Cargo.toml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1247,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".toml",
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1508562186.47
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "lib/Cargo.toml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1278,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".toml",
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1508562186.47
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "Rocket.toml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 667,
						"regions":
						{
						},
						"selection":
						[
							[
								18,
								18
							]
						],
						"settings":
						{
							"auto_name": "address = \"localhost\"",
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".toml",
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1508562186.47
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				}
			]
		},
		{
			"selected": 24,
			"sheets":
			[
				{
					"buffer": 21,
					"file": "src/authorize.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10141,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "",
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1509924326.74
							},
							"git_gutter_is_enabled": false,
							"history_list_is_closing": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2520.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "static/blog.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2529,
						"regions":
						{
						},
						"selection":
						[
							[
								524,
								524
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/Flatland_Monokai.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".js",
								"current_syntax": "JavaScript/JavaScript",
								"enabled": false,
								"last_updated": 1510473085.34
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "static/blog_after.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 422,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/Flatland_Monokai.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".js",
								"current_syntax": "JavaScript/JavaScript",
								"enabled": false,
								"last_updated": 1509508007.55
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/blog.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24029,
						"regions":
						{
						},
						"selection":
						[
							[
								5566,
								5566
							]
						],
						"settings":
						{
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1509924326.74
							},
							"git_gutter_is_enabled": true,
							"history_list_is_closing": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "/C/code/lang/Rust/proj/projman/src/configuration/storable.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9321,
						"regions":
						{
						},
						"selection":
						[
							[
								3771,
								3771
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1509508007.55
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 319.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "auth-rs/src/authenticator.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 983,
						"regions":
						{
						},
						"selection":
						[
							[
								729,
								729
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1509508007.55
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "auth-rs/src/status.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3186,
						"regions":
						{
						},
						"selection":
						[
							[
								1432,
								1432
							]
						],
						"settings":
						{
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1509924326.74
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 644.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "auth-rs/src/config.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 424,
						"regions":
						{
						},
						"selection":
						[
							[
								424,
								424
							]
						],
						"settings":
						{
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1509924326.74
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "auth-rs/src/lib.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 181,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1509508007.55
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "auth-rs/src/userpass.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1062,
						"regions":
						{
						},
						"selection":
						[
							[
								260,
								260
							]
						],
						"settings":
						{
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1509924326.74
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "auth-rs/src/dummy/mod.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 343,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1509508007.55
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "auth-rs/example/src/main.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1421,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1509508007.55
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 0,
					"file": "src/main.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19609,
						"regions":
						{
						},
						"selection":
						[
							[
								5888,
								5888
							]
						],
						"settings":
						{
							"color_helper.box_height": 16,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1508562186.47
							},
							"git_gutter_is_enabled": true,
							"history_list_is_closing": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1815.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "templates/login-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8175,
						"regions":
						{
						},
						"selection":
						[
							[
								566,
								566
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"rgba",
									"hex",
									"hsl",
									"hsla",
									"rgb",
									"hex_compressed",
									"webcolors"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1509924326.74,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2621.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "templates/create-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8361,
						"regions":
						{
						},
						"selection":
						[
							[
								1778,
								1778
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"webcolors",
									"rgba",
									"hsl",
									"hex",
									"rgb",
									"hsla"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1509508007.55,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"word_wrap": false
						},
						"translation.x": 7.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "templates/search-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7253,
						"regions":
						{
						},
						"selection":
						[
							[
								1778,
								1778
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"rgba",
									"hex",
									"hsl",
									"hsla",
									"rgb",
									"hex_compressed",
									"webcolors"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1509924326.74,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 45.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "templates/general-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6294,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								6294
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"rgba",
									"hex",
									"hsl",
									"hsla",
									"rgb",
									"hex_compressed",
									"webcolors"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1509924326.74,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"history_list_is_closing": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "templates/article-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7145,
						"regions":
						{
						},
						"selection":
						[
							[
								1778,
								1778
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"webcolors",
									"rgba",
									"hsl",
									"hex",
									"rgb",
									"hsla"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1509508007.55,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1615.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "templates/articles-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7209,
						"regions":
						{
						},
						"selection":
						[
							[
								1778,
								1778
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"webcolors",
									"rgba",
									"hsl",
									"hex",
									"rgb",
									"hsla"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1509508007.55,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1795.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "static/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24494,
						"regions":
						{
						},
						"selection":
						[
							[
								5630,
								5630
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"rgba",
									"hex",
									"hsl",
									"hsla",
									"rgb",
									"hex_compressed",
									"webcolors"
								],
								"compress_hex_output": true,
								"current_ext": ".html",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1509924326.74,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 1726.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "static/css/blogr.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10080,
						"regions":
						{
						},
						"selection":
						[
							[
								8946,
								8946
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/deep_blue_see.tmTheme",
							"color_helper.file_palette":
							[
								"#000000ff",
								"#10b6cbff",
								"#15191bff",
								"#212529ff",
								"#222222ff",
								"#343a40ff",
								"#363636ff",
								"#555555ff",
								"#5bc0deff",
								"#666666ff",
								"#8ceaf6ff",
								"#aaaaaaff",
								"#bd67fdff",
								"#ccccccff",
								"#dd0000ff",
								"#ddddddff",
								"#e0e0e0ff",
								"#eeeeeeff",
								"#f0ad4eff",
								"#ff4801ff",
								"#ffdd00ff",
								"#ffffffff"
							],
							"color_helper.popup_active": false,
							"color_helper.popup_auto": true,
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hex_compressed",
									"webcolors",
									"rgba",
									"hsl",
									"hex",
									"rgb",
									"hsla"
								],
								"compress_hex_output": true,
								"current_ext": ".css",
								"current_syntax": "CSS/CSS",
								"enabled": true,
								"last_updated": 1509508007.55,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/CSS/CSS.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7053.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 40,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7015,
						"regions":
						{
						},
						"selection":
						[
							[
								7015,
								7015
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"webcolors",
									"rgba",
									"hex",
									"hsla",
									"hex_compressed",
									"rgb",
									"hsl"
								],
								"compress_hex_output": true,
								"current_ext": null,
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1508562186.47,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": false,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1691.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "templates/tags-template.html.hbs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6529,
						"regions":
						{
						},
						"selection":
						[
							[
								4839,
								4839
							]
						],
						"settings":
						{
							"auto_complete": false,
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"webcolors",
									"rgba",
									"hex",
									"hsla",
									"hex_compressed",
									"rgb",
									"hsl"
								],
								"compress_hex_output": true,
								"current_ext": ".hbs",
								"current_syntax": "HTML/HTML",
								"enabled": true,
								"last_updated": 1508562186.47,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 1051.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "old/static/old-blog.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7586,
						"regions":
						{
						},
						"selection":
						[
							[
								556,
								565
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/Flatland_Monokai.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".js",
								"current_syntax": "JavaScript/JavaScript",
								"enabled": false,
								"last_updated": 1508562186.47
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 994.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "/C/code/lang/Rust/proj/traitstr/src/main.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12948,
						"regions":
						{
						},
						"selection":
						[
							[
								10360,
								10360
							]
						],
						"settings":
						{
							"color_helper.box_height": 20,
							"color_helper.color_scheme": "Packages/User/Custom-Themes/RustCustom-3.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".rs",
								"current_syntax": "Rust/Rust",
								"enabled": false,
								"last_updated": 1510473085.34
							},
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 40.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 28.0
	},
	"pinned_build_system": "",
	"project": "sublime-project.sublime-project",
	"replace":
	{
		"height": 82.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 208.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 1
	}
}
